
OAllisonLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e00  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013b8  08006fb0  08006fb0  00016fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008368  08008368  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008370  08008370  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008374  08008374  00018374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00025af8  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025b18  20025b18  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f8c0  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002950  00000000  00000000  0002f953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001080  00000000  00000000  000322a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c8d  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025448  00000000  00000000  00033fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000130c1  00000000  00000000  000593fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd7b4  00000000  00000000  0006c4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000474c  00000000  00000000  00149c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000020 	.word	0x20000020
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006f98 	.word	0x08006f98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000024 	.word	0x20000024
 80001ec:	08006f98 	.word	0x08006f98

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <ApplicationInit>:

static const int centerX = LCD_PIXEL_WIDTH / 2;
static const int centerY = LCD_PIXEL_HEIGHT / 2;

void ApplicationInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	LTCD__Init();
 8000dec:	f001 fabc 	bl	8002368 <LTCD__Init>
    LTCD_Layer_Init(0);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f001 fb17 	bl	8002424 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000df6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f001 fd50 	bl	80028a0 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f001 fbfd 	bl	8002600 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <ApplicationInit+0x30>)
 8000e08:	f001 fc0a 	bl	8002620 <LCD_SetFont>

    RNG_Init();
 8000e0c:	f002 f838 	bl	8002e80 <RNG_Init>

    Button_InitInterruptMode();
 8000e10:	f001 f8f6 	bl	8002000 <Button_InitInterruptMode>
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	2000000c 	.word	0x2000000c

08000e1c <drawSquare>:

void drawSquare(int xPos, int yPos, uint16_t color)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	4613      	mov	r3, r2
 8000e28:	80fb      	strh	r3, [r7, #6]
    LCD_Draw_Rectangle_Fill(xPos, yPos, 40, 40, color);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	b298      	uxth	r0, r3
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	b299      	uxth	r1, r3
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2328      	movs	r3, #40	; 0x28
 8000e38:	2228      	movs	r2, #40	; 0x28
 8000e3a:	f001 fc54 	bl	80026e6 <LCD_Draw_Rectangle_Fill>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <drawTriangle>:

void drawTriangle(int xPos, int yPos, uint16_t color)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	4613      	mov	r3, r2
 8000e52:	80fb      	strh	r3, [r7, #6]
    LCD_Draw_Triangle_Fill(xPos, yPos, 80, 40, color);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	b298      	uxth	r0, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	b299      	uxth	r1, r3
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2328      	movs	r3, #40	; 0x28
 8000e62:	2250      	movs	r2, #80	; 0x50
 8000e64:	f001 fc73 	bl	800274e <LCD_Draw_Triangle_Fill>
}
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <drawCircle>:

void drawCircle(int xPos, int yPos, uint16_t color)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	80fb      	strh	r3, [r7, #6]
    LCD_Draw_Circle_Fill(xPos, yPos, 20, color);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	b298      	uxth	r0, r3
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	b299      	uxth	r1, r3
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	2214      	movs	r2, #20
 8000e8a:	f001 fbd9 	bl	8002640 <LCD_Draw_Circle_Fill>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <drawTime>:

void drawTime(int time)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
    int fourthNum   =   ((time / 1) % 10) + 48;
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <drawTime+0x1dc>)
 8000ea4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea8:	109a      	asrs	r2, r3, #2
 8000eaa:	17cb      	asrs	r3, r1, #31
 8000eac:	1ad2      	subs	r2, r2, r3
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	1aca      	subs	r2, r1, r3
 8000eb8:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000ebc:	617b      	str	r3, [r7, #20]
    int thirdNum    =   ((time / 10) % 10) + 48;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a6c      	ldr	r2, [pc, #432]	; (8001074 <drawTime+0x1dc>)
 8000ec2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec6:	1092      	asrs	r2, r2, #2
 8000ec8:	17db      	asrs	r3, r3, #31
 8000eca:	1ad1      	subs	r1, r2, r3
 8000ecc:	4b69      	ldr	r3, [pc, #420]	; (8001074 <drawTime+0x1dc>)
 8000ece:	fb83 2301 	smull	r2, r3, r3, r1
 8000ed2:	109a      	asrs	r2, r3, #2
 8000ed4:	17cb      	asrs	r3, r1, #31
 8000ed6:	1ad2      	subs	r2, r2, r3
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	1aca      	subs	r2, r1, r3
 8000ee2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000ee6:	613b      	str	r3, [r7, #16]
    int secondNum   =   ((time / 100) % 10) + 48;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a63      	ldr	r2, [pc, #396]	; (8001078 <drawTime+0x1e0>)
 8000eec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef0:	1152      	asrs	r2, r2, #5
 8000ef2:	17db      	asrs	r3, r3, #31
 8000ef4:	1ad1      	subs	r1, r2, r3
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <drawTime+0x1dc>)
 8000ef8:	fb83 2301 	smull	r2, r3, r3, r1
 8000efc:	109a      	asrs	r2, r3, #2
 8000efe:	17cb      	asrs	r3, r1, #31
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	1aca      	subs	r2, r1, r3
 8000f0c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000f10:	60fb      	str	r3, [r7, #12]
    int firstNum    =   ((time / 1000) % 10) + 48;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a59      	ldr	r2, [pc, #356]	; (800107c <drawTime+0x1e4>)
 8000f16:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1a:	1192      	asrs	r2, r2, #6
 8000f1c:	17db      	asrs	r3, r3, #31
 8000f1e:	1ad1      	subs	r1, r2, r3
 8000f20:	4b54      	ldr	r3, [pc, #336]	; (8001074 <drawTime+0x1dc>)
 8000f22:	fb83 2301 	smull	r2, r3, r3, r1
 8000f26:	109a      	asrs	r2, r3, #2
 8000f28:	17cb      	asrs	r3, r1, #31
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	1aca      	subs	r2, r1, r3
 8000f36:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000f3a:	60bb      	str	r3, [r7, #8]

    LCD_Clear(0,LCD_COLOR_BLUE2);
 8000f3c:	f240 511f 	movw	r1, #1311	; 0x51f
 8000f40:	2000      	movs	r0, #0
 8000f42:	f001 fcad 	bl	80028a0 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f4a:	f001 fb59 	bl	8002600 <LCD_SetTextColor>

    // Display time header

    LCD_DisplayChar(centerX - 80, centerY - 50, 84);
 8000f4e:	2378      	movs	r3, #120	; 0x78
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	3b50      	subs	r3, #80	; 0x50
 8000f54:	b298      	uxth	r0, r3
 8000f56:	23a0      	movs	r3, #160	; 0xa0
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3b32      	subs	r3, #50	; 0x32
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	2254      	movs	r2, #84	; 0x54
 8000f60:	4619      	mov	r1, r3
 8000f62:	f001 fb2b 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 65, centerY - 50, 105);
 8000f66:	2378      	movs	r3, #120	; 0x78
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3b41      	subs	r3, #65	; 0x41
 8000f6c:	b298      	uxth	r0, r3
 8000f6e:	23a0      	movs	r3, #160	; 0xa0
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	3b32      	subs	r3, #50	; 0x32
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	2269      	movs	r2, #105	; 0x69
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f001 fb1f 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 50, centerY - 50, 109);
 8000f7e:	2378      	movs	r3, #120	; 0x78
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3b32      	subs	r3, #50	; 0x32
 8000f84:	b298      	uxth	r0, r3
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b32      	subs	r3, #50	; 0x32
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	226d      	movs	r2, #109	; 0x6d
 8000f90:	4619      	mov	r1, r3
 8000f92:	f001 fb13 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 35, centerY - 50, 101);
 8000f96:	2378      	movs	r3, #120	; 0x78
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3b23      	subs	r3, #35	; 0x23
 8000f9c:	b298      	uxth	r0, r3
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3b32      	subs	r3, #50	; 0x32
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	2265      	movs	r2, #101	; 0x65
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f001 fb07 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 25, centerY - 50, 58);
 8000fae:	2378      	movs	r3, #120	; 0x78
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b19      	subs	r3, #25
 8000fb4:	b298      	uxth	r0, r3
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b32      	subs	r3, #50	; 0x32
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	223a      	movs	r2, #58	; 0x3a
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f001 fafb 	bl	80025bc <LCD_DisplayChar>

    LCD_Draw_Horizontal_Line(centerX - 80, centerY - 30, 70, 2, LCD_COLOR_WHITE);
 8000fc6:	2378      	movs	r3, #120	; 0x78
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b50      	subs	r3, #80	; 0x50
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	3b1e      	subs	r3, #30
 8000fd4:	b299      	uxth	r1, r3
 8000fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2246      	movs	r2, #70	; 0x46
 8000fe0:	f001 fc28 	bl	8002834 <LCD_Draw_Horizontal_Line>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f001 fb0b 	bl	8002600 <LCD_SetTextColor>

    // Display the time in milliseconds

    LCD_DisplayChar(centerX - 40, centerY, firstNum);
 8000fea:	2378      	movs	r3, #120	; 0x78
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	3b28      	subs	r3, #40	; 0x28
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	22a0      	movs	r2, #160	; 0xa0
 8000ff4:	b291      	uxth	r1, r2
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fade 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 25, centerY, secondNum);
 8001000:	2378      	movs	r3, #120	; 0x78
 8001002:	b29b      	uxth	r3, r3
 8001004:	3b19      	subs	r3, #25
 8001006:	b29b      	uxth	r3, r3
 8001008:	22a0      	movs	r2, #160	; 0xa0
 800100a:	b291      	uxth	r1, r2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fad3 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 10, centerY, thirdNum);
 8001016:	2378      	movs	r3, #120	; 0x78
 8001018:	b29b      	uxth	r3, r3
 800101a:	3b0a      	subs	r3, #10
 800101c:	b29b      	uxth	r3, r3
 800101e:	22a0      	movs	r2, #160	; 0xa0
 8001020:	b291      	uxth	r1, r2
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fac8 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 5, centerY, fourthNum);
 800102c:	2378      	movs	r3, #120	; 0x78
 800102e:	b29b      	uxth	r3, r3
 8001030:	3305      	adds	r3, #5
 8001032:	b29b      	uxth	r3, r3
 8001034:	22a0      	movs	r2, #160	; 0xa0
 8001036:	b291      	uxth	r1, r2
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fabd 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 30, centerY, 109);
 8001042:	2378      	movs	r3, #120	; 0x78
 8001044:	b29b      	uxth	r3, r3
 8001046:	331e      	adds	r3, #30
 8001048:	b29b      	uxth	r3, r3
 800104a:	22a0      	movs	r2, #160	; 0xa0
 800104c:	b291      	uxth	r1, r2
 800104e:	226d      	movs	r2, #109	; 0x6d
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fab3 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 45, centerY, 115);
 8001056:	2378      	movs	r3, #120	; 0x78
 8001058:	b29b      	uxth	r3, r3
 800105a:	332d      	adds	r3, #45	; 0x2d
 800105c:	b29b      	uxth	r3, r3
 800105e:	22a0      	movs	r2, #160	; 0xa0
 8001060:	b291      	uxth	r1, r2
 8001062:	2273      	movs	r2, #115	; 0x73
 8001064:	4618      	mov	r0, r3
 8001066:	f001 faa9 	bl	80025bc <LCD_DisplayChar>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667
 8001078:	51eb851f 	.word	0x51eb851f
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <drawTimeFinal>:

void drawTimeFinal()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af02      	add	r7, sp, #8
    LCD_Clear(0,LCD_COLOR_BLUE2);
 8001086:	f240 511f 	movw	r1, #1311	; 0x51f
 800108a:	2000      	movs	r0, #0
 800108c:	f001 fc08 	bl	80028a0 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001090:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001094:	f001 fab4 	bl	8002600 <LCD_SetTextColor>

    // Display time header

    LCD_DisplayChar(centerX - 80, 40, 84);
 8001098:	2378      	movs	r3, #120	; 0x78
 800109a:	b29b      	uxth	r3, r3
 800109c:	3b50      	subs	r3, #80	; 0x50
 800109e:	b29b      	uxth	r3, r3
 80010a0:	2254      	movs	r2, #84	; 0x54
 80010a2:	2128      	movs	r1, #40	; 0x28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 fa89 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 65, 40, 105);
 80010aa:	2378      	movs	r3, #120	; 0x78
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	3b41      	subs	r3, #65	; 0x41
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	2269      	movs	r2, #105	; 0x69
 80010b4:	2128      	movs	r1, #40	; 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fa80 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 50, 40, 109);
 80010bc:	2378      	movs	r3, #120	; 0x78
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3b32      	subs	r3, #50	; 0x32
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	226d      	movs	r2, #109	; 0x6d
 80010c6:	2128      	movs	r1, #40	; 0x28
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa77 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 35, 40, 101);
 80010ce:	2378      	movs	r3, #120	; 0x78
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	3b23      	subs	r3, #35	; 0x23
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2265      	movs	r2, #101	; 0x65
 80010d8:	2128      	movs	r1, #40	; 0x28
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fa6e 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 20, 40, 115);
 80010e0:	2378      	movs	r3, #120	; 0x78
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3b14      	subs	r3, #20
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	2273      	movs	r2, #115	; 0x73
 80010ea:	2128      	movs	r1, #40	; 0x28
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fa65 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 10, 40, 58);
 80010f2:	2378      	movs	r3, #120	; 0x78
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b0a      	subs	r3, #10
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	223a      	movs	r2, #58	; 0x3a
 80010fc:	2128      	movs	r1, #40	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fa5c 	bl	80025bc <LCD_DisplayChar>

    LCD_Draw_Horizontal_Line(centerX - 80, 70, 85, 2, LCD_COLOR_WHITE);
 8001104:	2378      	movs	r3, #120	; 0x78
 8001106:	b29b      	uxth	r3, r3
 8001108:	3b50      	subs	r3, #80	; 0x50
 800110a:	b298      	uxth	r0, r3
 800110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2302      	movs	r3, #2
 8001114:	2255      	movs	r2, #85	; 0x55
 8001116:	2146      	movs	r1, #70	; 0x46
 8001118:	f001 fb8c 	bl	8002834 <LCD_Draw_Horizontal_Line>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 800111c:	2000      	movs	r0, #0
 800111e:	f001 fa6f 	bl	8002600 <LCD_SetTextColor>

    for (int i = 0; i < 3; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001126:	e0f6      	b.n	8001316 <drawTimeFinal+0x296>
    {
        int time;

        if (i == 0) 
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	2b00      	cmp	r3, #0
 800112c:	d108      	bne.n	8001140 <drawTimeFinal+0xc0>
            time = time1;  
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <drawTimeFinal+0xd8>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
 800113e:	e017      	b.n	8001170 <drawTimeFinal+0xf0>
        else if (i == 1) 
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10c      	bne.n	8001160 <drawTimeFinal+0xe0>
            time = time2;  
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <drawTimeFinal+0xdc>)
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001150:	ee17 3a90 	vmov	r3, s15
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <drawTimeFinal+0xf0>
 8001158:	20000048 	.word	0x20000048
 800115c:	2000004c 	.word	0x2000004c
        else 
            time = time3;
 8001160:	4bcb      	ldr	r3, [pc, #812]	; (8001490 <drawTimeFinal+0x410>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116a:	ee17 3a90 	vmov	r3, s15
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28

        int fourthNum   =   ((time / 1) % 10) + 48;
 8001170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001172:	4bc8      	ldr	r3, [pc, #800]	; (8001494 <drawTimeFinal+0x414>)
 8001174:	fb83 2301 	smull	r2, r3, r3, r1
 8001178:	109a      	asrs	r2, r3, #2
 800117a:	17cb      	asrs	r3, r1, #31
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	1aca      	subs	r2, r1, r3
 8001188:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800118c:	613b      	str	r3, [r7, #16]
        int thirdNum    =   ((time / 10) % 10) + 48;
 800118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001190:	4ac0      	ldr	r2, [pc, #768]	; (8001494 <drawTimeFinal+0x414>)
 8001192:	fb82 1203 	smull	r1, r2, r2, r3
 8001196:	1092      	asrs	r2, r2, #2
 8001198:	17db      	asrs	r3, r3, #31
 800119a:	1ad1      	subs	r1, r2, r3
 800119c:	4bbd      	ldr	r3, [pc, #756]	; (8001494 <drawTimeFinal+0x414>)
 800119e:	fb83 2301 	smull	r2, r3, r3, r1
 80011a2:	109a      	asrs	r2, r3, #2
 80011a4:	17cb      	asrs	r3, r1, #31
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1aca      	subs	r2, r1, r3
 80011b2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80011b6:	60fb      	str	r3, [r7, #12]
        int secondNum   =   ((time / 100) % 10) + 48;
 80011b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ba:	4ab7      	ldr	r2, [pc, #732]	; (8001498 <drawTimeFinal+0x418>)
 80011bc:	fb82 1203 	smull	r1, r2, r2, r3
 80011c0:	1152      	asrs	r2, r2, #5
 80011c2:	17db      	asrs	r3, r3, #31
 80011c4:	1ad1      	subs	r1, r2, r3
 80011c6:	4bb3      	ldr	r3, [pc, #716]	; (8001494 <drawTimeFinal+0x414>)
 80011c8:	fb83 2301 	smull	r2, r3, r3, r1
 80011cc:	109a      	asrs	r2, r3, #2
 80011ce:	17cb      	asrs	r3, r1, #31
 80011d0:	1ad2      	subs	r2, r2, r3
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	1aca      	subs	r2, r1, r3
 80011dc:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80011e0:	60bb      	str	r3, [r7, #8]
        int firstNum    =   ((time / 1000) % 10) + 48;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	4aad      	ldr	r2, [pc, #692]	; (800149c <drawTimeFinal+0x41c>)
 80011e6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ea:	1192      	asrs	r2, r2, #6
 80011ec:	17db      	asrs	r3, r3, #31
 80011ee:	1ad1      	subs	r1, r2, r3
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <drawTimeFinal+0x414>)
 80011f2:	fb83 2301 	smull	r2, r3, r3, r1
 80011f6:	109a      	asrs	r2, r3, #2
 80011f8:	17cb      	asrs	r3, r1, #31
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	1aca      	subs	r2, r1, r3
 8001206:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800120a:	607b      	str	r3, [r7, #4]

        // Display the time in milliseconds

        LCD_DisplayChar(centerX - 40, 100 + (25 * i), firstNum);
 800120c:	2378      	movs	r3, #120	; 0x78
 800120e:	b29b      	uxth	r3, r3
 8001210:	3b28      	subs	r3, #40	; 0x28
 8001212:	b298      	uxth	r0, r3
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	0091      	lsls	r1, r2, #2
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	4413      	add	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	3364      	adds	r3, #100	; 0x64
 800122c:	b29b      	uxth	r3, r3
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f001 f9c2 	bl	80025bc <LCD_DisplayChar>
        LCD_DisplayChar(centerX - 25, 100 + (25 * i), secondNum);
 8001238:	2378      	movs	r3, #120	; 0x78
 800123a:	b29b      	uxth	r3, r3
 800123c:	3b19      	subs	r3, #25
 800123e:	b298      	uxth	r0, r3
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4413      	add	r3, r2
 800124a:	461a      	mov	r2, r3
 800124c:	0091      	lsls	r1, r2, #2
 800124e:	461a      	mov	r2, r3
 8001250:	460b      	mov	r3, r1
 8001252:	4413      	add	r3, r2
 8001254:	b29b      	uxth	r3, r3
 8001256:	3364      	adds	r3, #100	; 0x64
 8001258:	b29b      	uxth	r3, r3
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f001 f9ac 	bl	80025bc <LCD_DisplayChar>
        LCD_DisplayChar(centerX - 10, 100 + (25 * i), thirdNum);
 8001264:	2378      	movs	r3, #120	; 0x78
 8001266:	b29b      	uxth	r3, r3
 8001268:	3b0a      	subs	r3, #10
 800126a:	b298      	uxth	r0, r3
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4413      	add	r3, r2
 8001276:	461a      	mov	r2, r3
 8001278:	0091      	lsls	r1, r2, #2
 800127a:	461a      	mov	r2, r3
 800127c:	460b      	mov	r3, r1
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	3364      	adds	r3, #100	; 0x64
 8001284:	b29b      	uxth	r3, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f001 f996 	bl	80025bc <LCD_DisplayChar>
        LCD_DisplayChar(centerX + 5, 100 + (25 * i), fourthNum);
 8001290:	2378      	movs	r3, #120	; 0x78
 8001292:	b29b      	uxth	r3, r3
 8001294:	3305      	adds	r3, #5
 8001296:	b298      	uxth	r0, r3
 8001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	0092      	lsls	r2, r2, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	0091      	lsls	r1, r2, #2
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	3364      	adds	r3, #100	; 0x64
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 f980 	bl	80025bc <LCD_DisplayChar>
        LCD_DisplayChar(centerX + 30, 100 + (25 * i), 109);
 80012bc:	2378      	movs	r3, #120	; 0x78
 80012be:	b29b      	uxth	r3, r3
 80012c0:	331e      	adds	r3, #30
 80012c2:	b298      	uxth	r0, r3
 80012c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	461a      	mov	r2, r3
 80012d0:	0091      	lsls	r1, r2, #2
 80012d2:	461a      	mov	r2, r3
 80012d4:	460b      	mov	r3, r1
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3364      	adds	r3, #100	; 0x64
 80012dc:	b29b      	uxth	r3, r3
 80012de:	226d      	movs	r2, #109	; 0x6d
 80012e0:	4619      	mov	r1, r3
 80012e2:	f001 f96b 	bl	80025bc <LCD_DisplayChar>
        LCD_DisplayChar(centerX + 45, 100 + (25 * i), 115);
 80012e6:	2378      	movs	r3, #120	; 0x78
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	332d      	adds	r3, #45	; 0x2d
 80012ec:	b298      	uxth	r0, r3
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	461a      	mov	r2, r3
 80012fa:	0091      	lsls	r1, r2, #2
 80012fc:	461a      	mov	r2, r3
 80012fe:	460b      	mov	r3, r1
 8001300:	4413      	add	r3, r2
 8001302:	b29b      	uxth	r3, r3
 8001304:	3364      	adds	r3, #100	; 0x64
 8001306:	b29b      	uxth	r3, r3
 8001308:	2273      	movs	r2, #115	; 0x73
 800130a:	4619      	mov	r1, r3
 800130c:	f001 f956 	bl	80025bc <LCD_DisplayChar>
    for (int i = 0; i < 3; i++)
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001312:	3301      	adds	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	2b02      	cmp	r3, #2
 800131a:	f77f af05 	ble.w	8001128 <drawTimeFinal+0xa8>
    }

    LCD_SetTextColor(LCD_COLOR_WHITE);
 800131e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001322:	f001 f96d 	bl	8002600 <LCD_SetTextColor>

    // Display time header

    LCD_DisplayChar(centerX - 80, 200, 65);
 8001326:	2378      	movs	r3, #120	; 0x78
 8001328:	b29b      	uxth	r3, r3
 800132a:	3b50      	subs	r3, #80	; 0x50
 800132c:	b29b      	uxth	r3, r3
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	21c8      	movs	r1, #200	; 0xc8
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f942 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 65, 200, 118);
 8001338:	2378      	movs	r3, #120	; 0x78
 800133a:	b29b      	uxth	r3, r3
 800133c:	3b41      	subs	r3, #65	; 0x41
 800133e:	b29b      	uxth	r3, r3
 8001340:	2276      	movs	r2, #118	; 0x76
 8001342:	21c8      	movs	r1, #200	; 0xc8
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f939 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 50, 200, 101);
 800134a:	2378      	movs	r3, #120	; 0x78
 800134c:	b29b      	uxth	r3, r3
 800134e:	3b32      	subs	r3, #50	; 0x32
 8001350:	b29b      	uxth	r3, r3
 8001352:	2265      	movs	r2, #101	; 0x65
 8001354:	21c8      	movs	r1, #200	; 0xc8
 8001356:	4618      	mov	r0, r3
 8001358:	f001 f930 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 35, 200, 114);
 800135c:	2378      	movs	r3, #120	; 0x78
 800135e:	b29b      	uxth	r3, r3
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	b29b      	uxth	r3, r3
 8001364:	2272      	movs	r2, #114	; 0x72
 8001366:	21c8      	movs	r1, #200	; 0xc8
 8001368:	4618      	mov	r0, r3
 800136a:	f001 f927 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 20, 200, 97);
 800136e:	2378      	movs	r3, #120	; 0x78
 8001370:	b29b      	uxth	r3, r3
 8001372:	3b14      	subs	r3, #20
 8001374:	b29b      	uxth	r3, r3
 8001376:	2261      	movs	r2, #97	; 0x61
 8001378:	21c8      	movs	r1, #200	; 0xc8
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f91e 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 5, 200, 103);
 8001380:	2378      	movs	r3, #120	; 0x78
 8001382:	b29b      	uxth	r3, r3
 8001384:	3b05      	subs	r3, #5
 8001386:	b29b      	uxth	r3, r3
 8001388:	2267      	movs	r2, #103	; 0x67
 800138a:	21c8      	movs	r1, #200	; 0xc8
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f915 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 10, 200, 101);
 8001392:	2378      	movs	r3, #120	; 0x78
 8001394:	b29b      	uxth	r3, r3
 8001396:	330a      	adds	r3, #10
 8001398:	b29b      	uxth	r3, r3
 800139a:	2265      	movs	r2, #101	; 0x65
 800139c:	21c8      	movs	r1, #200	; 0xc8
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 f90c 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 20, 200, 58);
 80013a4:	2378      	movs	r3, #120	; 0x78
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3314      	adds	r3, #20
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	223a      	movs	r2, #58	; 0x3a
 80013ae:	21c8      	movs	r1, #200	; 0xc8
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 f903 	bl	80025bc <LCD_DisplayChar>

    LCD_Draw_Horizontal_Line(centerX - 80, 230, 115, 2, LCD_COLOR_WHITE);
 80013b6:	2378      	movs	r3, #120	; 0x78
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	3b50      	subs	r3, #80	; 0x50
 80013bc:	b298      	uxth	r0, r3
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	2273      	movs	r2, #115	; 0x73
 80013c8:	21e6      	movs	r1, #230	; 0xe6
 80013ca:	f001 fa33 	bl	8002834 <LCD_Draw_Horizontal_Line>

    LCD_SetTextColor(LCD_COLOR_BLACK);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f001 f916 	bl	8002600 <LCD_SetTextColor>

    int average = (time1 + time2 + time3) / 3;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <drawTimeFinal+0x420>)
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <drawTimeFinal+0x424>)
 80013dc:	edd3 7a00 	vldr	s15, [r3]
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <drawTimeFinal+0x410>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 3a90 	vmov	r3, s15
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24

    int fourthNum   =   ((average / 1) % 10) + 48;
 8001400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001402:	4b24      	ldr	r3, [pc, #144]	; (8001494 <drawTimeFinal+0x414>)
 8001404:	fb83 2301 	smull	r2, r3, r3, r1
 8001408:	109a      	asrs	r2, r3, #2
 800140a:	17cb      	asrs	r3, r1, #31
 800140c:	1ad2      	subs	r2, r2, r3
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1aca      	subs	r2, r1, r3
 8001418:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800141c:	623b      	str	r3, [r7, #32]
    int thirdNum    =   ((average / 10) % 10) + 48;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <drawTimeFinal+0x414>)
 8001422:	fb82 1203 	smull	r1, r2, r2, r3
 8001426:	1092      	asrs	r2, r2, #2
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1ad1      	subs	r1, r2, r3
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <drawTimeFinal+0x414>)
 800142e:	fb83 2301 	smull	r2, r3, r3, r1
 8001432:	109a      	asrs	r2, r3, #2
 8001434:	17cb      	asrs	r3, r1, #31
 8001436:	1ad2      	subs	r2, r2, r3
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	1aca      	subs	r2, r1, r3
 8001442:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001446:	61fb      	str	r3, [r7, #28]
    int secondNum   =   ((average / 100) % 10) + 48;
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <drawTimeFinal+0x418>)
 800144c:	fb82 1203 	smull	r1, r2, r2, r3
 8001450:	1152      	asrs	r2, r2, #5
 8001452:	17db      	asrs	r3, r3, #31
 8001454:	1ad1      	subs	r1, r2, r3
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <drawTimeFinal+0x414>)
 8001458:	fb83 2301 	smull	r2, r3, r3, r1
 800145c:	109a      	asrs	r2, r3, #2
 800145e:	17cb      	asrs	r3, r1, #31
 8001460:	1ad2      	subs	r2, r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	1aca      	subs	r2, r1, r3
 800146c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001470:	61bb      	str	r3, [r7, #24]
    int firstNum    =   ((average / 1000) % 10) + 48;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	4a09      	ldr	r2, [pc, #36]	; (800149c <drawTimeFinal+0x41c>)
 8001476:	fb82 1203 	smull	r1, r2, r2, r3
 800147a:	1192      	asrs	r2, r2, #6
 800147c:	17db      	asrs	r3, r3, #31
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <drawTimeFinal+0x414>)
 8001482:	fb83 2301 	smull	r2, r3, r3, r1
 8001486:	109a      	asrs	r2, r3, #2
 8001488:	17cb      	asrs	r3, r1, #31
 800148a:	1ad2      	subs	r2, r2, r3
 800148c:	e00c      	b.n	80014a8 <drawTimeFinal+0x428>
 800148e:	bf00      	nop
 8001490:	20000050 	.word	0x20000050
 8001494:	66666667 	.word	0x66666667
 8001498:	51eb851f 	.word	0x51eb851f
 800149c:	10624dd3 	.word	0x10624dd3
 80014a0:	20000048 	.word	0x20000048
 80014a4:	2000004c 	.word	0x2000004c
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	1aca      	subs	r2, r1, r3
 80014b2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80014b6:	617b      	str	r3, [r7, #20]

    // Display the average time in milliseconds

    LCD_DisplayChar(centerX - 40, 260, firstNum);
 80014b8:	2378      	movs	r3, #120	; 0x78
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3b28      	subs	r3, #40	; 0x28
 80014be:	b29b      	uxth	r3, r3
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f877 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 25, 260, secondNum);
 80014ce:	2378      	movs	r3, #120	; 0x78
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b19      	subs	r3, #25
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f86c 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX - 10, 260, thirdNum);
 80014e4:	2378      	movs	r3, #120	; 0x78
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	3b0a      	subs	r3, #10
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 f861 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 5, 260, fourthNum);
 80014fa:	2378      	movs	r3, #120	; 0x78
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	3305      	adds	r3, #5
 8001500:	b29b      	uxth	r3, r3
 8001502:	6a3a      	ldr	r2, [r7, #32]
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	f44f 7182 	mov.w	r1, #260	; 0x104
 800150a:	4618      	mov	r0, r3
 800150c:	f001 f856 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 30, 260, 109);
 8001510:	2378      	movs	r3, #120	; 0x78
 8001512:	b29b      	uxth	r3, r3
 8001514:	331e      	adds	r3, #30
 8001516:	b29b      	uxth	r3, r3
 8001518:	226d      	movs	r2, #109	; 0x6d
 800151a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f84c 	bl	80025bc <LCD_DisplayChar>
    LCD_DisplayChar(centerX + 45, 260, 115);
 8001524:	2378      	movs	r3, #120	; 0x78
 8001526:	b29b      	uxth	r3, r3
 8001528:	332d      	adds	r3, #45	; 0x2d
 800152a:	b29b      	uxth	r3, r3
 800152c:	2273      	movs	r2, #115	; 0x73
 800152e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f842 	bl	80025bc <LCD_DisplayChar>
}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <titleScreen>:

void titleScreen()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af02      	add	r7, sp, #8
    LCD_Clear(0,LCD_COLOR_BLUE2);
 8001546:	f240 511f 	movw	r1, #1311	; 0x51f
 800154a:	2000      	movs	r0, #0
 800154c:	f001 f9a8 	bl	80028a0 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_WHITE);
 8001550:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001554:	f001 f854 	bl	8002600 <LCD_SetTextColor>

    // Display time header

    LCD_DisplayChar(centerX - 100, 40, 82);
 8001558:	2378      	movs	r3, #120	; 0x78
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b64      	subs	r3, #100	; 0x64
 800155e:	b29b      	uxth	r3, r3
 8001560:	2252      	movs	r2, #82	; 0x52
 8001562:	2128      	movs	r1, #40	; 0x28
 8001564:	4618      	mov	r0, r3
 8001566:	f001 f829 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f002 fb50 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 85, 40, 101);
 8001570:	2378      	movs	r3, #120	; 0x78
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b55      	subs	r3, #85	; 0x55
 8001576:	b29b      	uxth	r3, r3
 8001578:	2265      	movs	r2, #101	; 0x65
 800157a:	2128      	movs	r1, #40	; 0x28
 800157c:	4618      	mov	r0, r3
 800157e:	f001 f81d 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001582:	2032      	movs	r0, #50	; 0x32
 8001584:	f002 fb44 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 70, 40, 102);
 8001588:	2378      	movs	r3, #120	; 0x78
 800158a:	b29b      	uxth	r3, r3
 800158c:	3b46      	subs	r3, #70	; 0x46
 800158e:	b29b      	uxth	r3, r3
 8001590:	2266      	movs	r2, #102	; 0x66
 8001592:	2128      	movs	r1, #40	; 0x28
 8001594:	4618      	mov	r0, r3
 8001596:	f001 f811 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f002 fb38 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 55, 40, 108);
 80015a0:	2378      	movs	r3, #120	; 0x78
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b37      	subs	r3, #55	; 0x37
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	226c      	movs	r2, #108	; 0x6c
 80015aa:	2128      	movs	r1, #40	; 0x28
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 f805 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80015b2:	2032      	movs	r0, #50	; 0x32
 80015b4:	f002 fb2c 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 40, 40, 101);
 80015b8:	2378      	movs	r3, #120	; 0x78
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3b28      	subs	r3, #40	; 0x28
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2265      	movs	r2, #101	; 0x65
 80015c2:	2128      	movs	r1, #40	; 0x28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fff9 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80015ca:	2032      	movs	r0, #50	; 0x32
 80015cc:	f002 fb20 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 25, 40, 120);
 80015d0:	2378      	movs	r3, #120	; 0x78
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b19      	subs	r3, #25
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2278      	movs	r2, #120	; 0x78
 80015da:	2128      	movs	r1, #40	; 0x28
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 ffed 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80015e2:	2032      	movs	r0, #50	; 0x32
 80015e4:	f002 fb14 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX, 40, 71);
 80015e8:	2378      	movs	r3, #120	; 0x78
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2247      	movs	r2, #71	; 0x47
 80015ee:	2128      	movs	r1, #40	; 0x28
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 ffe3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80015f6:	2032      	movs	r0, #50	; 0x32
 80015f8:	f002 fb0a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 15, 40, 97);
 80015fc:	2378      	movs	r3, #120	; 0x78
 80015fe:	b29b      	uxth	r3, r3
 8001600:	330f      	adds	r3, #15
 8001602:	b29b      	uxth	r3, r3
 8001604:	2261      	movs	r2, #97	; 0x61
 8001606:	2128      	movs	r1, #40	; 0x28
 8001608:	4618      	mov	r0, r3
 800160a:	f000 ffd7 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800160e:	2032      	movs	r0, #50	; 0x32
 8001610:	f002 fafe 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 30, 40, 109);
 8001614:	2378      	movs	r3, #120	; 0x78
 8001616:	b29b      	uxth	r3, r3
 8001618:	331e      	adds	r3, #30
 800161a:	b29b      	uxth	r3, r3
 800161c:	226d      	movs	r2, #109	; 0x6d
 800161e:	2128      	movs	r1, #40	; 0x28
 8001620:	4618      	mov	r0, r3
 8001622:	f000 ffcb 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001626:	2032      	movs	r0, #50	; 0x32
 8001628:	f002 faf2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 45, 40, 101);
 800162c:	2378      	movs	r3, #120	; 0x78
 800162e:	b29b      	uxth	r3, r3
 8001630:	332d      	adds	r3, #45	; 0x2d
 8001632:	b29b      	uxth	r3, r3
 8001634:	2265      	movs	r2, #101	; 0x65
 8001636:	2128      	movs	r1, #40	; 0x28
 8001638:	4618      	mov	r0, r3
 800163a:	f000 ffbf 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800163e:	2032      	movs	r0, #50	; 0x32
 8001640:	f002 fae6 	bl	8003c10 <HAL_Delay>

    // Colon character
    LCD_DisplayChar(centerX + 55, 40, 58);
 8001644:	2378      	movs	r3, #120	; 0x78
 8001646:	b29b      	uxth	r3, r3
 8001648:	3337      	adds	r3, #55	; 0x37
 800164a:	b29b      	uxth	r3, r3
 800164c:	223a      	movs	r2, #58	; 0x3a
 800164e:	2128      	movs	r1, #40	; 0x28
 8001650:	4618      	mov	r0, r3
 8001652:	f000 ffb3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001656:	2032      	movs	r0, #50	; 0x32
 8001658:	f002 fada 	bl	8003c10 <HAL_Delay>

    LCD_Draw_Horizontal_Line(centerX - 100, 70, 155, 2, LCD_COLOR_WHITE);
 800165c:	2378      	movs	r3, #120	; 0x78
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b64      	subs	r3, #100	; 0x64
 8001662:	b298      	uxth	r0, r3
 8001664:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2302      	movs	r3, #2
 800166c:	229b      	movs	r2, #155	; 0x9b
 800166e:	2146      	movs	r1, #70	; 0x46
 8001670:	f001 f8e0 	bl	8002834 <LCD_Draw_Horizontal_Line>
    HAL_Delay(500);
 8001674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001678:	f002 faca 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 100, 100, 80);
 800167c:	2378      	movs	r3, #120	; 0x78
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b64      	subs	r3, #100	; 0x64
 8001682:	b29b      	uxth	r3, r3
 8001684:	2250      	movs	r2, #80	; 0x50
 8001686:	2164      	movs	r1, #100	; 0x64
 8001688:	4618      	mov	r0, r3
 800168a:	f000 ff97 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800168e:	2032      	movs	r0, #50	; 0x32
 8001690:	f002 fabe 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 88, 100, 114);
 8001694:	2378      	movs	r3, #120	; 0x78
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b58      	subs	r3, #88	; 0x58
 800169a:	b29b      	uxth	r3, r3
 800169c:	2272      	movs	r2, #114	; 0x72
 800169e:	2164      	movs	r1, #100	; 0x64
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 ff8b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80016a6:	2032      	movs	r0, #50	; 0x32
 80016a8:	f002 fab2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 76, 100, 101);
 80016ac:	2378      	movs	r3, #120	; 0x78
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	3b4c      	subs	r3, #76	; 0x4c
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2265      	movs	r2, #101	; 0x65
 80016b6:	2164      	movs	r1, #100	; 0x64
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 ff7f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80016be:	2032      	movs	r0, #50	; 0x32
 80016c0:	f002 faa6 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 64, 100, 115);
 80016c4:	2378      	movs	r3, #120	; 0x78
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3b40      	subs	r3, #64	; 0x40
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2273      	movs	r2, #115	; 0x73
 80016ce:	2164      	movs	r1, #100	; 0x64
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 ff73 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f002 fa9a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 52, 100, 115);
 80016dc:	2378      	movs	r3, #120	; 0x78
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3b34      	subs	r3, #52	; 0x34
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2273      	movs	r2, #115	; 0x73
 80016e6:	2164      	movs	r1, #100	; 0x64
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 ff67 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80016ee:	2032      	movs	r0, #50	; 0x32
 80016f0:	f002 fa8e 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 28, 100, 98);
 80016f4:	2378      	movs	r3, #120	; 0x78
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b1c      	subs	r3, #28
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	2262      	movs	r2, #98	; 0x62
 80016fe:	2164      	movs	r1, #100	; 0x64
 8001700:	4618      	mov	r0, r3
 8001702:	f000 ff5b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001706:	2032      	movs	r0, #50	; 0x32
 8001708:	f002 fa82 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 16, 100, 117);
 800170c:	2378      	movs	r3, #120	; 0x78
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b10      	subs	r3, #16
 8001712:	b29b      	uxth	r3, r3
 8001714:	2275      	movs	r2, #117	; 0x75
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	4618      	mov	r0, r3
 800171a:	f000 ff4f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800171e:	2032      	movs	r0, #50	; 0x32
 8001720:	f002 fa76 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 4, 100, 116);
 8001724:	2378      	movs	r3, #120	; 0x78
 8001726:	b29b      	uxth	r3, r3
 8001728:	3b04      	subs	r3, #4
 800172a:	b29b      	uxth	r3, r3
 800172c:	2274      	movs	r2, #116	; 0x74
 800172e:	2164      	movs	r1, #100	; 0x64
 8001730:	4618      	mov	r0, r3
 8001732:	f000 ff43 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001736:	2032      	movs	r0, #50	; 0x32
 8001738:	f002 fa6a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 8, 100, 116);
 800173c:	2378      	movs	r3, #120	; 0x78
 800173e:	b29b      	uxth	r3, r3
 8001740:	3308      	adds	r3, #8
 8001742:	b29b      	uxth	r3, r3
 8001744:	2274      	movs	r2, #116	; 0x74
 8001746:	2164      	movs	r1, #100	; 0x64
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff37 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800174e:	2032      	movs	r0, #50	; 0x32
 8001750:	f002 fa5e 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 20, 100, 111);
 8001754:	2378      	movs	r3, #120	; 0x78
 8001756:	b29b      	uxth	r3, r3
 8001758:	3314      	adds	r3, #20
 800175a:	b29b      	uxth	r3, r3
 800175c:	226f      	movs	r2, #111	; 0x6f
 800175e:	2164      	movs	r1, #100	; 0x64
 8001760:	4618      	mov	r0, r3
 8001762:	f000 ff2b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f002 fa52 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 32, 100, 110);
 800176c:	2378      	movs	r3, #120	; 0x78
 800176e:	b29b      	uxth	r3, r3
 8001770:	3320      	adds	r3, #32
 8001772:	b29b      	uxth	r3, r3
 8001774:	226e      	movs	r2, #110	; 0x6e
 8001776:	2164      	movs	r1, #100	; 0x64
 8001778:	4618      	mov	r0, r3
 800177a:	f000 ff1f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800177e:	2032      	movs	r0, #50	; 0x32
 8001780:	f002 fa46 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 100, 130, 119);
 8001784:	2378      	movs	r3, #120	; 0x78
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b64      	subs	r3, #100	; 0x64
 800178a:	b29b      	uxth	r3, r3
 800178c:	2277      	movs	r2, #119	; 0x77
 800178e:	2182      	movs	r1, #130	; 0x82
 8001790:	4618      	mov	r0, r3
 8001792:	f000 ff13 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001796:	2032      	movs	r0, #50	; 0x32
 8001798:	f002 fa3a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 88, 130, 104);
 800179c:	2378      	movs	r3, #120	; 0x78
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b58      	subs	r3, #88	; 0x58
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2268      	movs	r2, #104	; 0x68
 80017a6:	2182      	movs	r1, #130	; 0x82
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 ff07 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80017ae:	2032      	movs	r0, #50	; 0x32
 80017b0:	f002 fa2e 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 76, 130, 101);
 80017b4:	2378      	movs	r3, #120	; 0x78
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3b4c      	subs	r3, #76	; 0x4c
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2265      	movs	r2, #101	; 0x65
 80017be:	2182      	movs	r1, #130	; 0x82
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fefb 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80017c6:	2032      	movs	r0, #50	; 0x32
 80017c8:	f002 fa22 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 64, 130, 110);
 80017cc:	2378      	movs	r3, #120	; 0x78
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	3b40      	subs	r3, #64	; 0x40
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	226e      	movs	r2, #110	; 0x6e
 80017d6:	2182      	movs	r1, #130	; 0x82
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 feef 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80017de:	2032      	movs	r0, #50	; 0x32
 80017e0:	f002 fa16 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 40, 130, 115);
 80017e4:	2378      	movs	r3, #120	; 0x78
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	3b28      	subs	r3, #40	; 0x28
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	2273      	movs	r2, #115	; 0x73
 80017ee:	2182      	movs	r1, #130	; 0x82
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fee3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80017f6:	2032      	movs	r0, #50	; 0x32
 80017f8:	f002 fa0a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 28, 130, 104);
 80017fc:	2378      	movs	r3, #120	; 0x78
 80017fe:	b29b      	uxth	r3, r3
 8001800:	3b1c      	subs	r3, #28
 8001802:	b29b      	uxth	r3, r3
 8001804:	2268      	movs	r2, #104	; 0x68
 8001806:	2182      	movs	r1, #130	; 0x82
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fed7 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f002 f9fe 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 16, 130, 97);
 8001814:	2378      	movs	r3, #120	; 0x78
 8001816:	b29b      	uxth	r3, r3
 8001818:	3b10      	subs	r3, #16
 800181a:	b29b      	uxth	r3, r3
 800181c:	2261      	movs	r2, #97	; 0x61
 800181e:	2182      	movs	r1, #130	; 0x82
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fecb 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001826:	2032      	movs	r0, #50	; 0x32
 8001828:	f002 f9f2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 4, 130, 112);
 800182c:	2378      	movs	r3, #120	; 0x78
 800182e:	b29b      	uxth	r3, r3
 8001830:	3b04      	subs	r3, #4
 8001832:	b29b      	uxth	r3, r3
 8001834:	2270      	movs	r2, #112	; 0x70
 8001836:	2182      	movs	r1, #130	; 0x82
 8001838:	4618      	mov	r0, r3
 800183a:	f000 febf 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800183e:	2032      	movs	r0, #50	; 0x32
 8001840:	f002 f9e6 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 8, 130, 101);
 8001844:	2378      	movs	r3, #120	; 0x78
 8001846:	b29b      	uxth	r3, r3
 8001848:	3308      	adds	r3, #8
 800184a:	b29b      	uxth	r3, r3
 800184c:	2265      	movs	r2, #101	; 0x65
 800184e:	2182      	movs	r1, #130	; 0x82
 8001850:	4618      	mov	r0, r3
 8001852:	f000 feb3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001856:	2032      	movs	r0, #50	; 0x32
 8001858:	f002 f9da 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 100, 160, 97);
 800185c:	2378      	movs	r3, #120	; 0x78
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b64      	subs	r3, #100	; 0x64
 8001862:	b29b      	uxth	r3, r3
 8001864:	2261      	movs	r2, #97	; 0x61
 8001866:	21a0      	movs	r1, #160	; 0xa0
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fea7 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800186e:	2032      	movs	r0, #50	; 0x32
 8001870:	f002 f9ce 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 88, 160, 112);
 8001874:	2378      	movs	r3, #120	; 0x78
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b58      	subs	r3, #88	; 0x58
 800187a:	b29b      	uxth	r3, r3
 800187c:	2270      	movs	r2, #112	; 0x70
 800187e:	21a0      	movs	r1, #160	; 0xa0
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fe9b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001886:	2032      	movs	r0, #50	; 0x32
 8001888:	f002 f9c2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 76, 160, 112);
 800188c:	2378      	movs	r3, #120	; 0x78
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b4c      	subs	r3, #76	; 0x4c
 8001892:	b29b      	uxth	r3, r3
 8001894:	2270      	movs	r2, #112	; 0x70
 8001896:	21a0      	movs	r1, #160	; 0xa0
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fe8f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800189e:	2032      	movs	r0, #50	; 0x32
 80018a0:	f002 f9b6 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 64, 160, 101);
 80018a4:	2378      	movs	r3, #120	; 0x78
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b40      	subs	r3, #64	; 0x40
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	2265      	movs	r2, #101	; 0x65
 80018ae:	21a0      	movs	r1, #160	; 0xa0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fe83 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80018b6:	2032      	movs	r0, #50	; 0x32
 80018b8:	f002 f9aa 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 52, 160, 97);
 80018bc:	2378      	movs	r3, #120	; 0x78
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b34      	subs	r3, #52	; 0x34
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2261      	movs	r2, #97	; 0x61
 80018c6:	21a0      	movs	r1, #160	; 0xa0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fe77 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80018ce:	2032      	movs	r0, #50	; 0x32
 80018d0:	f002 f99e 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 40, 160, 114);
 80018d4:	2378      	movs	r3, #120	; 0x78
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b28      	subs	r3, #40	; 0x28
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2272      	movs	r2, #114	; 0x72
 80018de:	21a0      	movs	r1, #160	; 0xa0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 fe6b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80018e6:	2032      	movs	r0, #50	; 0x32
 80018e8:	f002 f992 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 28, 160, 115);
 80018ec:	2378      	movs	r3, #120	; 0x78
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b1c      	subs	r3, #28
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2273      	movs	r2, #115	; 0x73
 80018f6:	21a0      	movs	r1, #160	; 0xa0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fe5f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80018fe:	2032      	movs	r0, #50	; 0x32
 8001900:	f002 f986 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 4, 160, 116);
 8001904:	2378      	movs	r3, #120	; 0x78
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b04      	subs	r3, #4
 800190a:	b29b      	uxth	r3, r3
 800190c:	2274      	movs	r2, #116	; 0x74
 800190e:	21a0      	movs	r1, #160	; 0xa0
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fe53 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001916:	2032      	movs	r0, #50	; 0x32
 8001918:	f002 f97a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 8, 160, 111);
 800191c:	2378      	movs	r3, #120	; 0x78
 800191e:	b29b      	uxth	r3, r3
 8001920:	3308      	adds	r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	226f      	movs	r2, #111	; 0x6f
 8001926:	21a0      	movs	r1, #160	; 0xa0
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fe47 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800192e:	2032      	movs	r0, #50	; 0x32
 8001930:	f002 f96e 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX + 32, 160, 116);
 8001934:	2378      	movs	r3, #120	; 0x78
 8001936:	b29b      	uxth	r3, r3
 8001938:	3320      	adds	r3, #32
 800193a:	b29b      	uxth	r3, r3
 800193c:	2274      	movs	r2, #116	; 0x74
 800193e:	21a0      	movs	r1, #160	; 0xa0
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fe3b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001946:	2032      	movs	r0, #50	; 0x32
 8001948:	f002 f962 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 44, 160, 101);
 800194c:	2378      	movs	r3, #120	; 0x78
 800194e:	b29b      	uxth	r3, r3
 8001950:	332c      	adds	r3, #44	; 0x2c
 8001952:	b29b      	uxth	r3, r3
 8001954:	2265      	movs	r2, #101	; 0x65
 8001956:	21a0      	movs	r1, #160	; 0xa0
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fe2f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800195e:	2032      	movs	r0, #50	; 0x32
 8001960:	f002 f956 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 56, 160, 115);
 8001964:	2378      	movs	r3, #120	; 0x78
 8001966:	b29b      	uxth	r3, r3
 8001968:	3338      	adds	r3, #56	; 0x38
 800196a:	b29b      	uxth	r3, r3
 800196c:	2273      	movs	r2, #115	; 0x73
 800196e:	21a0      	movs	r1, #160	; 0xa0
 8001970:	4618      	mov	r0, r3
 8001972:	f000 fe23 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001976:	2032      	movs	r0, #50	; 0x32
 8001978:	f002 f94a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 68, 160, 116);
 800197c:	2378      	movs	r3, #120	; 0x78
 800197e:	b29b      	uxth	r3, r3
 8001980:	3344      	adds	r3, #68	; 0x44
 8001982:	b29b      	uxth	r3, r3
 8001984:	2274      	movs	r2, #116	; 0x74
 8001986:	21a0      	movs	r1, #160	; 0xa0
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fe17 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 800198e:	2032      	movs	r0, #50	; 0x32
 8001990:	f002 f93e 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 100, 190, 121);
 8001994:	2378      	movs	r3, #120	; 0x78
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b64      	subs	r3, #100	; 0x64
 800199a:	b29b      	uxth	r3, r3
 800199c:	2279      	movs	r2, #121	; 0x79
 800199e:	21be      	movs	r1, #190	; 0xbe
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fe0b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f002 f932 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 88, 190, 111);
 80019ac:	2378      	movs	r3, #120	; 0x78
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b58      	subs	r3, #88	; 0x58
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	226f      	movs	r2, #111	; 0x6f
 80019b6:	21be      	movs	r1, #190	; 0xbe
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fdff 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80019be:	2032      	movs	r0, #50	; 0x32
 80019c0:	f002 f926 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 76, 190, 117);
 80019c4:	2378      	movs	r3, #120	; 0x78
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3b4c      	subs	r3, #76	; 0x4c
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2275      	movs	r2, #117	; 0x75
 80019ce:	21be      	movs	r1, #190	; 0xbe
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fdf3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80019d6:	2032      	movs	r0, #50	; 0x32
 80019d8:	f002 f91a 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 64, 190, 114);
 80019dc:	2378      	movs	r3, #120	; 0x78
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b40      	subs	r3, #64	; 0x40
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2272      	movs	r2, #114	; 0x72
 80019e6:	21be      	movs	r1, #190	; 0xbe
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 fde7 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 80019ee:	2032      	movs	r0, #50	; 0x32
 80019f0:	f002 f90e 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 40, 190, 114);
 80019f4:	2378      	movs	r3, #120	; 0x78
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	3b28      	subs	r3, #40	; 0x28
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2272      	movs	r2, #114	; 0x72
 80019fe:	21be      	movs	r1, #190	; 0xbe
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 fddb 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a06:	2032      	movs	r0, #50	; 0x32
 8001a08:	f002 f902 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 28, 190, 101);
 8001a0c:	2378      	movs	r3, #120	; 0x78
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b1c      	subs	r3, #28
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2265      	movs	r2, #101	; 0x65
 8001a16:	21be      	movs	r1, #190	; 0xbe
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fdcf 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a1e:	2032      	movs	r0, #50	; 0x32
 8001a20:	f002 f8f6 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 16, 190, 102);
 8001a24:	2378      	movs	r3, #120	; 0x78
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b10      	subs	r3, #16
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2266      	movs	r2, #102	; 0x66
 8001a2e:	21be      	movs	r1, #190	; 0xbe
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fdc3 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a36:	2032      	movs	r0, #50	; 0x32
 8001a38:	f002 f8ea 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 4, 190, 108);
 8001a3c:	2378      	movs	r3, #120	; 0x78
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b04      	subs	r3, #4
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	226c      	movs	r2, #108	; 0x6c
 8001a46:	21be      	movs	r1, #190	; 0xbe
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fdb7 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a4e:	2032      	movs	r0, #50	; 0x32
 8001a50:	f002 f8de 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 8, 190, 101);
 8001a54:	2378      	movs	r3, #120	; 0x78
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3308      	adds	r3, #8
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	2265      	movs	r2, #101	; 0x65
 8001a5e:	21be      	movs	r1, #190	; 0xbe
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 fdab 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a66:	2032      	movs	r0, #50	; 0x32
 8001a68:	f002 f8d2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX + 20, 190, 120);
 8001a6c:	2378      	movs	r3, #120	; 0x78
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3314      	adds	r3, #20
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2278      	movs	r2, #120	; 0x78
 8001a76:	21be      	movs	r1, #190	; 0xbe
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fd9f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a7e:	2032      	movs	r0, #50	; 0x32
 8001a80:	f002 f8c6 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 100, 220, 116);
 8001a84:	2378      	movs	r3, #120	; 0x78
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b64      	subs	r3, #100	; 0x64
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2274      	movs	r2, #116	; 0x74
 8001a8e:	21dc      	movs	r1, #220	; 0xdc
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd93 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001a96:	2032      	movs	r0, #50	; 0x32
 8001a98:	f002 f8ba 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 88, 220, 105);
 8001a9c:	2378      	movs	r3, #120	; 0x78
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b58      	subs	r3, #88	; 0x58
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2269      	movs	r2, #105	; 0x69
 8001aa6:	21dc      	movs	r1, #220	; 0xdc
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fd87 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001aae:	2032      	movs	r0, #50	; 0x32
 8001ab0:	f002 f8ae 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 76, 220, 109);
 8001ab4:	2378      	movs	r3, #120	; 0x78
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b4c      	subs	r3, #76	; 0x4c
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	226d      	movs	r2, #109	; 0x6d
 8001abe:	21dc      	movs	r1, #220	; 0xdc
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fd7b 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001ac6:	2032      	movs	r0, #50	; 0x32
 8001ac8:	f002 f8a2 	bl	8003c10 <HAL_Delay>
    LCD_DisplayChar(centerX - 64, 220, 101);
 8001acc:	2378      	movs	r3, #120	; 0x78
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b40      	subs	r3, #64	; 0x40
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2265      	movs	r2, #101	; 0x65
 8001ad6:	21dc      	movs	r1, #220	; 0xdc
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fd6f 	bl	80025bc <LCD_DisplayChar>
    HAL_Delay(50);
 8001ade:	2032      	movs	r0, #50	; 0x32
 8001ae0:	f002 f896 	bl	8003c10 <HAL_Delay>

    LCD_DisplayChar(centerX - 52, 220, 46);
 8001ae4:	2378      	movs	r3, #120	; 0x78
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b34      	subs	r3, #52	; 0x34
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	222e      	movs	r2, #46	; 0x2e
 8001aee:	21dc      	movs	r1, #220	; 0xdc
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fd63 	bl	80025bc <LCD_DisplayChar>

    removeSchedulerEvent(START_EVENT);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f001 fa06 	bl	8002f08 <removeSchedulerEvent>
    addSchedulerEvent(LEVEL_1_EVENT);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f001 f9ed 	bl	8002edc <addSchedulerEvent>

    HAL_Delay(1000);
 8001b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b06:	f002 f883 	bl	8003c10 <HAL_Delay>
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <levelOne>:

void levelOne()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
    uint8_t randShape = RNG_GetRandomNumber();
 8001b16:	f001 f9c1 	bl	8002e9c <RNG_GetRandomNumber>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	70fb      	strb	r3, [r7, #3]
    randShape %= 3;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <levelOne+0xdc>)
 8001b22:	fba3 1302 	umull	r1, r3, r3, r2
 8001b26:	0859      	lsrs	r1, r3, #1
 8001b28:	460b      	mov	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	440b      	add	r3, r1
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	70fb      	strb	r3, [r7, #3]
    
    uint32_t randDelay = RNG_GetRandomNumber();
 8001b32:	f001 f9b3 	bl	8002e9c <RNG_GetRandomNumber>
 8001b36:	6078      	str	r0, [r7, #4]
    randDelay %= 4;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	607b      	str	r3, [r7, #4]

    LCD_Clear(0,LCD_COLOR_WHITE);
 8001b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b44:	2000      	movs	r0, #0
 8001b46:	f000 feab 	bl	80028a0 <LCD_Clear>

    // Ensure delay is not zero
    if (randDelay < 1) randDelay = 1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <levelOne+0x44>
 8001b50:	2301      	movs	r3, #1
 8001b52:	607b      	str	r3, [r7, #4]

    HAL_Delay(randDelay * 1000);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 f856 	bl	8003c10 <HAL_Delay>

    if (randShape == 0)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <levelOne+0x6e>
    {
        drawSquare(centerX - 25, centerY + 20, LCD_COLOR_BLACK);
 8001b6a:	2378      	movs	r3, #120	; 0x78
 8001b6c:	3b19      	subs	r3, #25
 8001b6e:	22a0      	movs	r2, #160	; 0xa0
 8001b70:	f102 0114 	add.w	r1, r2, #20
 8001b74:	2200      	movs	r2, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f950 	bl	8000e1c <drawSquare>
 8001b7c:	e013      	b.n	8001ba6 <levelOne+0x96>
    }
    else if (randShape == 1)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d109      	bne.n	8001b98 <levelOne+0x88>
    {
        drawTriangle(centerX - 45, centerY + 20, LCD_COLOR_BLACK);
 8001b84:	2378      	movs	r3, #120	; 0x78
 8001b86:	3b2d      	subs	r3, #45	; 0x2d
 8001b88:	22a0      	movs	r2, #160	; 0xa0
 8001b8a:	f102 0114 	add.w	r1, r2, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff f958 	bl	8000e46 <drawTriangle>
 8001b96:	e006      	b.n	8001ba6 <levelOne+0x96>
    }
    else
    {
        drawCircle(centerX - 5, centerY, LCD_COLOR_BLACK);
 8001b98:	2378      	movs	r3, #120	; 0x78
 8001b9a:	3b05      	subs	r3, #5
 8001b9c:	21a0      	movs	r1, #160	; 0xa0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f965 	bl	8000e70 <drawCircle>
    }

    oldTime = Timer_GetCurrentTime();
 8001ba6:	f001 f9c7 	bl	8002f38 <Timer_GetCurrentTime>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <levelOne+0xe0>)
 8001bae:	6013      	str	r3, [r2, #0]
    newTime = oldTime;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <levelOne+0xe0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <levelOne+0xe4>)
 8001bb6:	6013      	str	r3, [r2, #0]

    Button_EnableInterrupt();
 8001bb8:	f000 fa58 	bl	800206c <Button_EnableInterrupt>

    while (level == 1)
 8001bbc:	bf00      	nop
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <levelOne+0xe8>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bc8:	eef4 7a47 	vcmp.f32	s15, s14
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	d0f5      	beq.n	8001bbe <levelOne+0xae>
        ;
    
    drawTime(time1);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <levelOne+0xec>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f7ff f95a 	bl	8000e98 <drawTime>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	aaaaaaab 	.word	0xaaaaaaab
 8001bf0:	2000003c 	.word	0x2000003c
 8001bf4:	20000040 	.word	0x20000040
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000048 	.word	0x20000048

08001c00 <levelTwo>:

void levelTwo()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af02      	add	r7, sp, #8
    LCD_Clear(0,LCD_COLOR_WHITE);
 8001c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f000 fe48 	bl	80028a0 <LCD_Clear>
    LCD_Draw_Vertical_Line(centerX, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001c10:	2378      	movs	r3, #120	; 0x78
 8001c12:	b298      	uxth	r0, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f000 fde3 	bl	80027e6 <LCD_Draw_Vertical_Line>
    LCD_Draw_Horizontal_Line(0, centerY, LCD_PIXEL_WIDTH, 1, LCD_COLOR_BLACK);
 8001c20:	23a0      	movs	r3, #160	; 0xa0
 8001c22:	b299      	uxth	r1, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	22f0      	movs	r2, #240	; 0xf0
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 fe01 	bl	8002834 <LCD_Draw_Horizontal_Line>

    uint8_t randShape = RNG_GetRandomNumber();
 8001c32:	f001 f933 	bl	8002e9c <RNG_GetRandomNumber>
 8001c36:	4603      	mov	r3, r0
 8001c38:	70fb      	strb	r3, [r7, #3]
    randShape %= 3;
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <levelTwo+0x138>)
 8001c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8001c42:	0859      	lsrs	r1, r3, #1
 8001c44:	460b      	mov	r3, r1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	440b      	add	r3, r1
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	70fb      	strb	r3, [r7, #3]

    uint8_t randX = RNG_GetRandomNumber();
 8001c4e:	f001 f925 	bl	8002e9c <RNG_GetRandomNumber>
 8001c52:	4603      	mov	r3, r0
 8001c54:	70bb      	strb	r3, [r7, #2]
    randX %= 2;
 8001c56:	78bb      	ldrb	r3, [r7, #2]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	70bb      	strb	r3, [r7, #2]

    uint8_t randY = RNG_GetRandomNumber();
 8001c5e:	f001 f91d 	bl	8002e9c <RNG_GetRandomNumber>
 8001c62:	4603      	mov	r3, r0
 8001c64:	707b      	strb	r3, [r7, #1]
    randY %= 2;
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	707b      	strb	r3, [r7, #1]

    uint32_t xPos;
    uint32_t yPos;

    if (randX == 0)
 8001c6e:	78bb      	ldrb	r3, [r7, #2]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <levelTwo+0x7c>
    {
        xPos = centerX - 80;
 8001c74:	2378      	movs	r3, #120	; 0x78
 8001c76:	3b50      	subs	r3, #80	; 0x50
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e002      	b.n	8001c82 <levelTwo+0x82>
    }
    else
    {
        xPos = centerX + 40;
 8001c7c:	2378      	movs	r3, #120	; 0x78
 8001c7e:	3328      	adds	r3, #40	; 0x28
 8001c80:	60fb      	str	r3, [r7, #12]
    }

    if (randY == 0)
 8001c82:	787b      	ldrb	r3, [r7, #1]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <levelTwo+0x90>
    {
        yPos = centerY - 70;
 8001c88:	23a0      	movs	r3, #160	; 0xa0
 8001c8a:	3b46      	subs	r3, #70	; 0x46
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	e002      	b.n	8001c96 <levelTwo+0x96>
    }
    else
    {
        yPos = centerY + 60;
 8001c90:	23a0      	movs	r3, #160	; 0xa0
 8001c92:	333c      	adds	r3, #60	; 0x3c
 8001c94:	60bb      	str	r3, [r7, #8]
    }

    uint32_t randDelay = RNG_GetRandomNumber();
 8001c96:	f001 f901 	bl	8002e9c <RNG_GetRandomNumber>
 8001c9a:	6078      	str	r0, [r7, #4]
    randDelay %= 4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	607b      	str	r3, [r7, #4]

    // Ensure delay is not zero
    if (randDelay < 1) randDelay = 1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <levelTwo+0xae>
 8001caa:	2301      	movs	r3, #1
 8001cac:	607b      	str	r3, [r7, #4]

    HAL_Delay(randDelay * 1000);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 ffa9 	bl	8003c10 <HAL_Delay>

    if (randShape == 0)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <levelTwo+0xd2>
    {
        drawSquare(xPos, yPos, LCD_COLOR_BLACK);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f8a6 	bl	8000e1c <drawSquare>
 8001cd0:	e00f      	b.n	8001cf2 <levelTwo+0xf2>
    }
    else if (randShape == 1)
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <levelTwo+0xe6>
    {
        drawTriangle(xPos, yPos, LCD_COLOR_BLACK);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f8b1 	bl	8000e46 <drawTriangle>
 8001ce4:	e005      	b.n	8001cf2 <levelTwo+0xf2>
    }
    else
    {
        drawCircle(xPos, yPos, LCD_COLOR_BLACK);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f8bf 	bl	8000e70 <drawCircle>
    }

    oldTime = Timer_GetCurrentTime();
 8001cf2:	f001 f921 	bl	8002f38 <Timer_GetCurrentTime>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <levelTwo+0x13c>)
 8001cfa:	6013      	str	r3, [r2, #0]
    newTime = oldTime;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <levelTwo+0x13c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <levelTwo+0x140>)
 8001d02:	6013      	str	r3, [r2, #0]

    Button_EnableInterrupt();
 8001d04:	f000 f9b2 	bl	800206c <Button_EnableInterrupt>

    while (level == 2)
 8001d08:	bf00      	nop
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <levelTwo+0x144>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d14:	eef4 7a47 	vcmp.f32	s15, s14
 8001d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1c:	d0f5      	beq.n	8001d0a <levelTwo+0x10a>
        ;
    
    drawTime(time2);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <levelTwo+0x148>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d28:	ee17 0a90 	vmov	r0, s15
 8001d2c:	f7ff f8b4 	bl	8000e98 <drawTime>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	2000003c 	.word	0x2000003c
 8001d40:	20000040 	.word	0x20000040
 8001d44:	20000000 	.word	0x20000000
 8001d48:	2000004c 	.word	0x2000004c
 8001d4c:	00000000 	.word	0x00000000

08001d50 <levelThree>:

void levelThree()
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
    oldTime = Timer_GetCurrentTime();
 8001d56:	f001 f8ef 	bl	8002f38 <Timer_GetCurrentTime>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a46      	ldr	r2, [pc, #280]	; (8001e78 <levelThree+0x128>)
 8001d5e:	6013      	str	r3, [r2, #0]

    int tempOldTime = oldTime;
 8001d60:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <levelThree+0x128>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]

    time3 = INT16_MAX;
 8001d66:	4b45      	ldr	r3, [pc, #276]	; (8001e7c <levelThree+0x12c>)
 8001d68:	4a45      	ldr	r2, [pc, #276]	; (8001e80 <levelThree+0x130>)
 8001d6a:	601a      	str	r2, [r3, #0]

    while (level3_numWins < 3)
 8001d6c:	e06e      	b.n	8001e4c <levelThree+0xfc>
    {
        newTime = Timer_GetCurrentTime();
 8001d6e:	f001 f8e3 	bl	8002f38 <Timer_GetCurrentTime>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a43      	ldr	r2, [pc, #268]	; (8001e84 <levelThree+0x134>)
 8001d76:	6013      	str	r3, [r2, #0]
        int deltaTime = newTime - tempOldTime;
 8001d78:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <levelThree+0x134>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	60bb      	str	r3, [r7, #8]

        // Only update every 15ms to avoid flickering
        if (deltaTime >= 15)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b0e      	cmp	r3, #14
 8001d86:	dd61      	ble.n	8001e4c <levelThree+0xfc>
        {
            tempOldTime = newTime;
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <levelThree+0x134>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

            int xOffset = (int) (sin(((double) newTime / 150.0f)) * (20 + centerX / 2));
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <levelThree+0x134>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb7e 	bl	8000494 <__aeabi_i2d>
 8001d98:	a335      	add	r3, pc, #212	; (adr r3, 8001e70 <levelThree+0x120>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fd0d 	bl	80007bc <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	ec43 2b17 	vmov	d7, r2, r3
 8001daa:	eeb0 0a47 	vmov.f32	s0, s14
 8001dae:	eef0 0a67 	vmov.f32	s1, s15
 8001db2:	f004 f8b1 	bl	8005f18 <sin>
 8001db6:	ec55 4b10 	vmov	r4, r5, d0
 8001dba:	2378      	movs	r3, #120	; 0x78
 8001dbc:	0fda      	lsrs	r2, r3, #31
 8001dbe:	4413      	add	r3, r2
 8001dc0:	105b      	asrs	r3, r3, #1
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb65 	bl	8000494 <__aeabi_i2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fbc9 	bl	8000568 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe5d 	bl	8000a9c <__aeabi_d2iz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	607b      	str	r3, [r7, #4]

            if (xOffset >= 20)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b13      	cmp	r3, #19
 8001dea:	dd15      	ble.n	8001e18 <levelThree+0xc8>
            {
                LCD_Clear(0, LCD_COLOR_GREEN);
 8001dec:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 fd55 	bl	80028a0 <LCD_Clear>
                
                if (button_enabled == false)
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <levelThree+0x138>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <levelThree+0xdc>
                {
                    oldTime = newTime;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <levelThree+0x134>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <levelThree+0x128>)
 8001e0a:	6013      	str	r3, [r2, #0]
                    Button_EnableInterrupt();
 8001e0c:	f000 f92e 	bl	800206c <Button_EnableInterrupt>
                    button_enabled = true;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <levelThree+0x138>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e009      	b.n	8001e2c <levelThree+0xdc>
                }
            }
            else
            {
                LCD_Clear(0,LCD_COLOR_RED);
 8001e18:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 fd3f 	bl	80028a0 <LCD_Clear>
                Button_DisableInterrupt();
 8001e22:	f000 f930 	bl	8002086 <Button_DisableInterrupt>
                button_enabled = false;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <levelThree+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
            }
            
            LCD_Draw_Vertical_Line(centerX, 0, LCD_PIXEL_HEIGHT, LCD_COLOR_BLACK);
 8001e2c:	2378      	movs	r3, #120	; 0x78
 8001e2e:	b298      	uxth	r0, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e36:	2100      	movs	r1, #0
 8001e38:	f000 fcd5 	bl	80027e6 <LCD_Draw_Vertical_Line>
            drawCircle(centerX + xOffset, centerY, LCD_COLOR_BLACK);
 8001e3c:	2278      	movs	r2, #120	; 0x78
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	21a0      	movs	r1, #160	; 0xa0
 8001e44:	2200      	movs	r2, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f812 	bl	8000e70 <drawCircle>
    while (level3_numWins < 3)
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <levelThree+0x13c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	dd8c      	ble.n	8001d6e <levelThree+0x1e>
        }
    }

    drawTime(time3);
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <levelThree+0x12c>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e5e:	ee17 0a90 	vmov	r0, s15
 8001e62:	f7ff f819 	bl	8000e98 <drawTime>
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	00000000 	.word	0x00000000
 8001e74:	4062c000 	.word	0x4062c000
 8001e78:	2000003c 	.word	0x2000003c
 8001e7c:	20000050 	.word	0x20000050
 8001e80:	46fffe00 	.word	0x46fffe00
 8001e84:	20000040 	.word	0x20000040
 8001e88:	20000044 	.word	0x20000044
 8001e8c:	20000054 	.word	0x20000054

08001e90 <stageWinScreen>:

void stageWinScreen()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
    if (level == 0)
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <stageWinScreen+0x144>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	f000 8091 	beq.w	8001fca <stageWinScreen+0x13a>
    {
        
    }

    else if (level == 1)
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <stageWinScreen+0x144>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eb2:	eef4 7a47 	vcmp.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d121      	bne.n	8001f00 <stageWinScreen+0x70>
    {
        newTime = Timer_GetCurrentTime();
 8001ebc:	f001 f83c 	bl	8002f38 <Timer_GetCurrentTime>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <stageWinScreen+0x148>)
 8001ec4:	6013      	str	r3, [r2, #0]
        time1 = newTime - oldTime;
 8001ec6:	4b44      	ldr	r3, [pc, #272]	; (8001fd8 <stageWinScreen+0x148>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <stageWinScreen+0x14c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <stageWinScreen+0x150>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]

        level++;
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <stageWinScreen+0x144>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001eec:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <stageWinScreen+0x144>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
        removeSchedulerEvent(LEVEL_1_EVENT);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f001 f808 	bl	8002f08 <removeSchedulerEvent>
        addSchedulerEvent(LEVEL_2_EVENT);
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f000 ffef 	bl	8002edc <addSchedulerEvent>
        {
            removeSchedulerEvent(LEVEL_3_EVENT);
            addSchedulerEvent(END_EVENT);
        }
    }
}
 8001efe:	e064      	b.n	8001fca <stageWinScreen+0x13a>
    else if (level == 2)
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <stageWinScreen+0x144>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f0a:	eef4 7a47 	vcmp.f32	s15, s14
 8001f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f12:	d121      	bne.n	8001f58 <stageWinScreen+0xc8>
        newTime = Timer_GetCurrentTime();
 8001f14:	f001 f810 	bl	8002f38 <Timer_GetCurrentTime>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <stageWinScreen+0x148>)
 8001f1c:	6013      	str	r3, [r2, #0]
        time2 = newTime - oldTime;
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <stageWinScreen+0x148>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <stageWinScreen+0x14c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <stageWinScreen+0x154>)
 8001f32:	edc3 7a00 	vstr	s15, [r3]
        level++;
 8001f36:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <stageWinScreen+0x144>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <stageWinScreen+0x144>)
 8001f46:	edc3 7a00 	vstr	s15, [r3]
        removeSchedulerEvent(LEVEL_2_EVENT);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f000 ffdc 	bl	8002f08 <removeSchedulerEvent>
        addSchedulerEvent(LEVEL_3_EVENT);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 ffc3 	bl	8002edc <addSchedulerEvent>
}
 8001f56:	e038      	b.n	8001fca <stageWinScreen+0x13a>
    else if (level == 3)
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <stageWinScreen+0x144>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001f62:	eef4 7a47 	vcmp.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d12e      	bne.n	8001fca <stageWinScreen+0x13a>
        newTime = Timer_GetCurrentTime();
 8001f6c:	f000 ffe4 	bl	8002f38 <Timer_GetCurrentTime>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <stageWinScreen+0x148>)
 8001f74:	6013      	str	r3, [r2, #0]
        int temp = newTime - oldTime;
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <stageWinScreen+0x148>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <stageWinScreen+0x14c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	607b      	str	r3, [r7, #4]
        if (temp < time3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <stageWinScreen+0x158>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	d507      	bpl.n	8001fac <stageWinScreen+0x11c>
            time3 = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <stageWinScreen+0x158>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
        level3_numWins++;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <stageWinScreen+0x15c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <stageWinScreen+0x15c>)
 8001fb4:	6013      	str	r3, [r2, #0]
        if (level3_numWins == 3)
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <stageWinScreen+0x15c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d105      	bne.n	8001fca <stageWinScreen+0x13a>
            removeSchedulerEvent(LEVEL_3_EVENT);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 ffa2 	bl	8002f08 <removeSchedulerEvent>
            addSchedulerEvent(END_EVENT);
 8001fc4:	2004      	movs	r0, #4
 8001fc6:	f000 ff89 	bl	8002edc <addSchedulerEvent>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000040 	.word	0x20000040
 8001fdc:	2000003c 	.word	0x2000003c
 8001fe0:	20000048 	.word	0x20000048
 8001fe4:	2000004c 	.word	0x2000004c
 8001fe8:	20000050 	.word	0x20000050
 8001fec:	20000054 	.word	0x20000054

08001ff0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) 
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    Button_DisableInterrupt();
 8001ff4:	f000 f847 	bl	8002086 <Button_DisableInterrupt>
    
    stageWinScreen();
 8001ff8:	f7ff ff4a 	bl	8001e90 <stageWinScreen>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <Button_InitInterruptMode>:
    button.Speed = GPIO_SPEED_MEDIUM;
    Button_EnableClock();
    HAL_GPIO_Init(GPIOA, &button);
}

void Button_InitInterruptMode() {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    button.Mode = GPIO_MODE_IT_RISING;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <Button_InitInterruptMode+0x30>)
 8002006:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 800200a:	605a      	str	r2, [r3, #4]
    button.Pin = BUTTON_PIN_NUM;
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <Button_InitInterruptMode+0x30>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    button.Pull = GPIO_NOPULL;
 8002012:	4b07      	ldr	r3, [pc, #28]	; (8002030 <Button_InitInterruptMode+0x30>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
    button.Speed = GPIO_SPEED_MEDIUM;
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <Button_InitInterruptMode+0x30>)
 800201a:	2201      	movs	r2, #1
 800201c:	60da      	str	r2, [r3, #12]
    Button_EnableClock();
 800201e:	f000 f80b 	bl	8002038 <Button_EnableClock>
    HAL_GPIO_Init(GPIOA, &button);
 8002022:	4903      	ldr	r1, [pc, #12]	; (8002030 <Button_InitInterruptMode+0x30>)
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <Button_InitInterruptMode+0x34>)
 8002026:	f001 fefd 	bl	8003e24 <HAL_GPIO_Init>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000058 	.word	0x20000058
 8002034:	40020000 	.word	0x40020000

08002038 <Button_EnableClock>:

void Button_EnableClock() {
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <Button_EnableClock+0x30>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <Button_EnableClock+0x30>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <Button_EnableClock+0x30>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <Button_EnableInterrupt>:

void Button_EnableInterrupt() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    EXTI_clear_pending(0);
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f899 	bl	80021a8 <EXTI_clear_pending>
    InterruptIRQ_clear_pending(EXTI0_IRQn);
 8002076:	2006      	movs	r0, #6
 8002078:	f000 f888 	bl	800218c <InterruptIRQ_clear_pending>
    InterruptIRQ_enable(EXTI0_IRQn);
 800207c:	2006      	movs	r0, #6
 800207e:	f000 f869 	bl	8002154 <InterruptIRQ_enable>
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <Button_DisableInterrupt>:

void Button_DisableInterrupt() {
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
    InterruptIRQ_disable(EXTI0_IRQn);
 800208a:	2006      	movs	r0, #6
 800208c:	f000 f870 	bl	8002170 <InterruptIRQ_disable>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <__NVIC_EnableIRQ+0x38>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db12      	blt.n	8002108 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	490a      	ldr	r1, [pc, #40]	; (8002114 <__NVIC_DisableIRQ+0x44>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	3320      	adds	r3, #32
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020fc:	f3bf 8f4f 	dsb	sy
}
 8002100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002102:	f3bf 8f6f 	isb	sy
}
 8002106:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0c      	blt.n	8002144 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_ClearPendingIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	3360      	adds	r3, #96	; 0x60
 8002140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100

08002154 <InterruptIRQ_enable>:
#include "InterruptControl.h"

void InterruptIRQ_enable(IRQn_Type IRQn)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
    NVIC_EnableIRQ(IRQn);
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff96 	bl	8002094 <__NVIC_EnableIRQ>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <InterruptIRQ_disable>:

void InterruptIRQ_disable(IRQn_Type IRQn)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
    NVIC_DisableIRQ(IRQn);
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffa6 	bl	80020d0 <__NVIC_DisableIRQ>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <InterruptIRQ_clear_pending>:

void InterruptIRQ_clear_pending(IRQn_Type IRQn)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
	NVIC_ClearPendingIRQ(IRQn);
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ffbc 	bl	8002118 <__NVIC_ClearPendingIRQ>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <EXTI_clear_pending>:
{
    NVIC_SetPendingIRQ(IRQn);
}

void EXTI_clear_pending(uint8_t pin_num)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
    EXTI -> PR |= (1 << pin_num);
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <EXTI_clear_pending+0x2c>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	79fa      	ldrb	r2, [r7, #7]
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	4611      	mov	r1, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <EXTI_clear_pending+0x2c>)
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6153      	str	r3, [r2, #20]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	4b5a      	ldr	r3, [pc, #360]	; (800234c <LCD_GPIO_Init+0x174>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a59      	ldr	r2, [pc, #356]	; (800234c <LCD_GPIO_Init+0x174>)
 80021e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <LCD_GPIO_Init+0x174>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <LCD_GPIO_Init+0x174>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a52      	ldr	r2, [pc, #328]	; (800234c <LCD_GPIO_Init+0x174>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b50      	ldr	r3, [pc, #320]	; (800234c <LCD_GPIO_Init+0x174>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <LCD_GPIO_Init+0x174>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a4b      	ldr	r2, [pc, #300]	; (800234c <LCD_GPIO_Init+0x174>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <LCD_GPIO_Init+0x174>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <LCD_GPIO_Init+0x174>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a44      	ldr	r2, [pc, #272]	; (800234c <LCD_GPIO_Init+0x174>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b42      	ldr	r3, [pc, #264]	; (800234c <LCD_GPIO_Init+0x174>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <LCD_GPIO_Init+0x174>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a3d      	ldr	r2, [pc, #244]	; (800234c <LCD_GPIO_Init+0x174>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <LCD_GPIO_Init+0x174>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <LCD_GPIO_Init+0x174>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <LCD_GPIO_Init+0x174>)
 8002274:	f043 0320 	orr.w	r3, r3, #32
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <LCD_GPIO_Init+0x174>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <LCD_GPIO_Init+0x174>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a2f      	ldr	r2, [pc, #188]	; (800234c <LCD_GPIO_Init+0x174>)
 8002290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <LCD_GPIO_Init+0x174>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80022a2:	f641 0358 	movw	r3, #6232	; 0x1858
 80022a6:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80022b0:	2302      	movs	r3, #2
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80022b4:	230e      	movs	r3, #14
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	4824      	ldr	r0, [pc, #144]	; (8002350 <LCD_GPIO_Init+0x178>)
 80022c0:	f001 fdb0 	bl	8003e24 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80022c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80022c8:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4820      	ldr	r0, [pc, #128]	; (8002354 <LCD_GPIO_Init+0x17c>)
 80022d2:	f001 fda7 	bl	8003e24 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80022d6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80022da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	481d      	ldr	r0, [pc, #116]	; (8002358 <LCD_GPIO_Init+0x180>)
 80022e4:	f001 fd9e 	bl	8003e24 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80022e8:	2348      	movs	r3, #72	; 0x48
 80022ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	481a      	ldr	r0, [pc, #104]	; (800235c <LCD_GPIO_Init+0x184>)
 80022f4:	f001 fd96 	bl	8003e24 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80022f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	4816      	ldr	r0, [pc, #88]	; (8002360 <LCD_GPIO_Init+0x188>)
 8002306:	f001 fd8d 	bl	8003e24 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800230a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800230e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	4813      	ldr	r0, [pc, #76]	; (8002364 <LCD_GPIO_Init+0x18c>)
 8002318:	f001 fd84 	bl	8003e24 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800231c:	2303      	movs	r3, #3
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002320:	2309      	movs	r3, #9
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002324:	f107 031c 	add.w	r3, r7, #28
 8002328:	4619      	mov	r1, r3
 800232a:	480a      	ldr	r0, [pc, #40]	; (8002354 <LCD_GPIO_Init+0x17c>)
 800232c:	f001 fd7a 	bl	8003e24 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002330:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002336:	f107 031c 	add.w	r3, r7, #28
 800233a:	4619      	mov	r1, r3
 800233c:	4809      	ldr	r0, [pc, #36]	; (8002364 <LCD_GPIO_Init+0x18c>)
 800233e:	f001 fd71 	bl	8003e24 <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	3730      	adds	r7, #48	; 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021400 	.word	0x40021400
 8002364:	40021800 	.word	0x40021800

08002368 <LTCD__Init>:


void LTCD__Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <LTCD__Init+0xb0>)
 800236e:	4a2b      	ldr	r2, [pc, #172]	; (800241c <LTCD__Init+0xb4>)
 8002370:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <LTCD__Init+0xb0>)
 8002374:	2209      	movs	r2, #9
 8002376:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <LTCD__Init+0xb0>)
 800237a:	2201      	movs	r2, #1
 800237c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <LTCD__Init+0xb0>)
 8002380:	221d      	movs	r2, #29
 8002382:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <LTCD__Init+0xb0>)
 8002386:	2203      	movs	r2, #3
 8002388:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <LTCD__Init+0xb0>)
 800238c:	f240 120d 	movw	r2, #269	; 0x10d
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <LTCD__Init+0xb0>)
 8002394:	f240 1243 	movw	r2, #323	; 0x143
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <LTCD__Init+0xb0>)
 800239c:	f240 1217 	movw	r2, #279	; 0x117
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <LTCD__Init+0xb0>)
 80023a4:	f240 1247 	movw	r2, #327	; 0x147
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <LTCD__Init+0xb0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80023b2:	4b19      	ldr	r3, [pc, #100]	; (8002418 <LTCD__Init+0xb0>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <LTCD__Init+0xb0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <LTCD__Init+0xb8>)
 80023c4:	2208      	movs	r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <LTCD__Init+0xb8>)
 80023ca:	22c0      	movs	r2, #192	; 0xc0
 80023cc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <LTCD__Init+0xb8>)
 80023d0:	2204      	movs	r2, #4
 80023d2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <LTCD__Init+0xb8>)
 80023d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023da:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80023dc:	4810      	ldr	r0, [pc, #64]	; (8002420 <LTCD__Init+0xb8>)
 80023de:	f002 fefd 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <LTCD__Init+0xb0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <LTCD__Init+0xb0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <LTCD__Init+0xb0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <LTCD__Init+0xb0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80023fa:	f7ff feed 	bl	80021d8 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <LTCD__Init+0xb0>)
 8002400:	f001 ffe2 	bl	80043c8 <HAL_LTDC_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800240a:	f000 fa6b 	bl	80028e4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 800240e:	f000 fa6c 	bl	80028ea <ili9341_Init>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000006c 	.word	0x2000006c
 800241c:	40016800 	.word	0x40016800
 8002420:	20000114 	.word	0x20000114

08002424 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b090      	sub	sp, #64	; 0x40
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8002432:	23f0      	movs	r3, #240	; 0xf0
 8002434:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 800243a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800243e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8002440:	2302      	movs	r3, #2
 8002442:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8002444:	23ff      	movs	r3, #255	; 0xff
 8002446:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800244c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002452:	2305      	movs	r3, #5
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 800245c:	4b0f      	ldr	r3, [pc, #60]	; (800249c <LTCD_Layer_Init+0x78>)
 800245e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8002460:	23f0      	movs	r3, #240	; 0xf0
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8002464:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002468:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800247c:	79fa      	ldrb	r2, [r7, #7]
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	4619      	mov	r1, r3
 8002484:	4806      	ldr	r0, [pc, #24]	; (80024a0 <LTCD_Layer_Init+0x7c>)
 8002486:	f002 f86f 	bl	8004568 <HAL_LTDC_ConfigLayer>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8002490:	f000 fa28 	bl	80028e4 <LCD_Error_Handler>
	}

}
 8002494:	bf00      	nop
 8002496:	3740      	adds	r7, #64	; 0x40
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200001a0 	.word	0x200001a0
 80024a0:	2000006c 	.word	0x2000006c

080024a4 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
 80024ae:	460b      	mov	r3, r1
 80024b0:	80bb      	strh	r3, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80024b6:	88ba      	ldrh	r2, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	461a      	mov	r2, r3
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4413      	add	r3, r2
 80024c6:	4905      	ldr	r1, [pc, #20]	; (80024dc <LCD_Draw_Pixel+0x38>)
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	200001a0 	.word	0x200001a0

080024e0 <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	603a      	str	r2, [r7, #0]
 80024ea:	80fb      	strh	r3, [r7, #6]
 80024ec:	460b      	mov	r3, r1
 80024ee:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e04c      	b.n	8002598 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	e03f      	b.n	8002584 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	4413      	add	r3, r2
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	4619      	mov	r1, r3
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <LCD_DrawChar+0xd0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	889b      	ldrh	r3, [r3, #4]
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <LCD_DrawChar+0xd4>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	08db      	lsrs	r3, r3, #3
 800251e:	b29b      	uxth	r3, r3
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	409a      	lsls	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	fa42 f303 	asr.w	r3, r2, r3
 800252c:	400b      	ands	r3, r1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <LCD_DrawChar+0x5c>
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <LCD_DrawChar+0xd0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	889b      	ldrh	r3, [r3, #4]
 8002538:	2b0c      	cmp	r3, #12
 800253a:	d920      	bls.n	800257e <LCD_DrawChar+0x9e>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	fa42 f303 	asr.w	r3, r2, r3
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d104      	bne.n	8002560 <LCD_DrawChar+0x80>
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <LCD_DrawChar+0xd0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	889b      	ldrh	r3, [r3, #4]
 800255c:	2b0c      	cmp	r3, #12
 800255e:	d80e      	bhi.n	800257e <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	b29a      	uxth	r2, r3
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	4413      	add	r3, r2
 8002568:	b298      	uxth	r0, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	b29a      	uxth	r2, r3
 800256e:	88bb      	ldrh	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <LCD_DrawChar+0xd8>)
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	f7ff ff93 	bl	80024a4 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3301      	adds	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <LCD_DrawChar+0xd0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4293      	cmp	r3, r2
 8002590:	d3b8      	bcc.n	8002504 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <LCD_DrawChar+0xd0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	88db      	ldrh	r3, [r3, #6]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d3ab      	bcc.n	80024fe <LCD_DrawChar+0x1e>
      }
    }
  }
}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000144 	.word	0x20000144
 80025b4:	aaaaaaab 	.word	0xaaaaaaab
 80025b8:	20000004 	.word	0x20000004

080025bc <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
 80025c6:	460b      	mov	r3, r1
 80025c8:	80bb      	strh	r3, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	3b20      	subs	r3, #32
 80025d2:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <LCD_DisplayChar+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <LCD_DisplayChar+0x40>)
 80025de:	6809      	ldr	r1, [r1, #0]
 80025e0:	88c9      	ldrh	r1, [r1, #6]
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	441a      	add	r2, r3
 80025ea:	88b9      	ldrh	r1, [r7, #4]
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff ff76 	bl	80024e0 <LCD_DrawChar>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000144 	.word	0x20000144

08002600 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 800260a:	4a04      	ldr	r2, [pc, #16]	; (800261c <LCD_SetTextColor+0x1c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	8013      	strh	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	20000004 	.word	0x20000004

08002620 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <LCD_SetFont+0x1c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6013      	str	r3, [r2, #0]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000144 	.word	0x20000144

08002640 <LCD_Draw_Circle_Fill>:

// Draw Circle Filled
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4623      	mov	r3, r4
 8002650:	80fb      	strh	r3, [r7, #6]
 8002652:	4603      	mov	r3, r0
 8002654:	80bb      	strh	r3, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	807b      	strh	r3, [r7, #2]
 800265a:	4613      	mov	r3, r2
 800265c:	803b      	strh	r3, [r7, #0]
  for(int16_t y=-radius; y<=radius; y++)
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	425b      	negs	r3, r3
 8002662:	b29b      	uxth	r3, r3
 8002664:	81fb      	strh	r3, [r7, #14]
 8002666:	e034      	b.n	80026d2 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	425b      	negs	r3, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	81bb      	strh	r3, [r7, #12]
 8002670:	e024      	b.n	80026bc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8002672:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002676:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800267a:	fb03 f202 	mul.w	r2, r3, r2
 800267e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002682:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	441a      	add	r2, r3
 800268c:	887b      	ldrh	r3, [r7, #2]
 800268e:	8879      	ldrh	r1, [r7, #2]
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	429a      	cmp	r2, r3
 8002696:	dc0b      	bgt.n	80026b0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8002698:	89ba      	ldrh	r2, [r7, #12]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4413      	add	r3, r2
 800269e:	b298      	uxth	r0, r3
 80026a0:	89fa      	ldrh	r2, [r7, #14]
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	883a      	ldrh	r2, [r7, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7ff fefa 	bl	80024a4 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 80026b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	81bb      	strh	r3, [r7, #12]
 80026bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	ddd5      	ble.n	8002672 <LCD_Draw_Circle_Fill+0x32>
  for(int16_t y=-radius; y<=radius; y++)
 80026c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	81fb      	strh	r3, [r7, #14]
 80026d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	429a      	cmp	r2, r3
 80026da:	ddc5      	ble.n	8002668 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}

080026e6 <LCD_Draw_Rectangle_Fill>:

// Draw rectangle filled
void LCD_Draw_Rectangle_Fill(uint16_t xPos, uint16_t yPos, uint16_t width, uint16_t height, uint16_t color)
{
 80026e6:	b590      	push	{r4, r7, lr}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4604      	mov	r4, r0
 80026ee:	4608      	mov	r0, r1
 80026f0:	4611      	mov	r1, r2
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	80fb      	strh	r3, [r7, #6]
 80026f8:	4603      	mov	r3, r0
 80026fa:	80bb      	strh	r3, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	803b      	strh	r3, [r7, #0]
  for (int y = yPos; y >= yPos - height; y--)
 8002704:	88bb      	ldrh	r3, [r7, #4]
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e016      	b.n	8002738 <LCD_Draw_Rectangle_Fill+0x52>
  {
    for (int x = xPos; x <= xPos + width; x++)
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	e00a      	b.n	8002726 <LCD_Draw_Rectangle_Fill+0x40>
    {
      LCD_Draw_Pixel(x, y, color);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	b29b      	uxth	r3, r3
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	b291      	uxth	r1, r2
 8002718:	8c3a      	ldrh	r2, [r7, #32]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fec2 	bl	80024a4 <LCD_Draw_Pixel>
    for (int x = xPos; x <= xPos + width; x++)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	4413      	add	r3, r2
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	ddee      	ble.n	8002710 <LCD_Draw_Rectangle_Fill+0x2a>
  for (int y = yPos; y >= yPos - height; y--)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3b01      	subs	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	88ba      	ldrh	r2, [r7, #4]
 800273a:	883b      	ldrh	r3, [r7, #0]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	429a      	cmp	r2, r3
 8002742:	dae2      	bge.n	800270a <LCD_Draw_Rectangle_Fill+0x24>
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}

0800274e <LCD_Draw_Triangle_Fill>:

void LCD_Draw_Triangle_Fill(uint16_t xPos, uint16_t yPos, uint16_t width, uint16_t height, uint16_t color)
{
 800274e:	b590      	push	{r4, r7, lr}
 8002750:	b089      	sub	sp, #36	; 0x24
 8002752:	af00      	add	r7, sp, #0
 8002754:	4604      	mov	r4, r0
 8002756:	4608      	mov	r0, r1
 8002758:	4611      	mov	r1, r2
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	80fb      	strh	r3, [r7, #6]
 8002760:	4603      	mov	r3, r0
 8002762:	80bb      	strh	r3, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
 8002768:	4613      	mov	r3, r2
 800276a:	803b      	strh	r3, [r7, #0]
  uint16_t topPoint_x = xPos + (width / 2);
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	b29a      	uxth	r2, r3
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4413      	add	r3, r2
 8002776:	82fb      	strh	r3, [r7, #22]
  uint16_t topPoint_y = yPos - height;
 8002778:	88ba      	ldrh	r2, [r7, #4]
 800277a:	883b      	ldrh	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	82bb      	strh	r3, [r7, #20]

  uint16_t stepWidth = width / height / 2;
 8002780:	887a      	ldrh	r2, [r7, #2]
 8002782:	883b      	ldrh	r3, [r7, #0]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	827b      	strh	r3, [r7, #18]

  for (int y = topPoint_y; y <= yPos; y++)
 800278e:	8abb      	ldrh	r3, [r7, #20]
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e01f      	b.n	80027d4 <LCD_Draw_Triangle_Fill+0x86>
  {
    int step = stepWidth * (y - topPoint_y);
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	8aba      	ldrh	r2, [r7, #20]
 8002798:	69f9      	ldr	r1, [r7, #28]
 800279a:	1a8a      	subs	r2, r1, r2
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	60fb      	str	r3, [r7, #12]
    for (int x = topPoint_x - step; x <= topPoint_x + step; x++)
 80027a2:	8afa      	ldrh	r2, [r7, #22]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	e00a      	b.n	80027c2 <LCD_Draw_Triangle_Fill+0x74>
    {
      LCD_Draw_Pixel(x, y, color);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	b291      	uxth	r1, r2
 80027b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe74 	bl	80024a4 <LCD_Draw_Pixel>
    for (int x = topPoint_x - step; x <= topPoint_x + step; x++)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	3301      	adds	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	8afa      	ldrh	r2, [r7, #22]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	ddee      	ble.n	80027ac <LCD_Draw_Triangle_Fill+0x5e>
  for (int y = topPoint_y; y <= yPos; y++)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3301      	adds	r3, #1
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	429a      	cmp	r2, r3
 80027da:	dddb      	ble.n	8002794 <LCD_Draw_Triangle_Fill+0x46>
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <LCD_Draw_Vertical_Line>:

// Draw Vertical Line
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	4604      	mov	r4, r0
 80027ee:	4608      	mov	r0, r1
 80027f0:	4611      	mov	r1, r2
 80027f2:	461a      	mov	r2, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	80fb      	strh	r3, [r7, #6]
 80027f8:	4603      	mov	r3, r0
 80027fa:	80bb      	strh	r3, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	81fb      	strh	r3, [r7, #14]
 8002808:	e00b      	b.n	8002822 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800280a:	89fa      	ldrh	r2, [r7, #14]
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	b299      	uxth	r1, r3
 8002812:	883a      	ldrh	r2, [r7, #0]
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fe44 	bl	80024a4 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	3301      	adds	r3, #1
 8002820:	81fb      	strh	r3, [r7, #14]
 8002822:	89fa      	ldrh	r2, [r7, #14]
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	429a      	cmp	r2, r3
 8002828:	d3ef      	bcc.n	800280a <LCD_Draw_Vertical_Line+0x24>
  }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}

08002834 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t xPos, uint16_t yPos, uint16_t length, uint16_t thickness, uint16_t color)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	4604      	mov	r4, r0
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4623      	mov	r3, r4
 8002844:	80fb      	strh	r3, [r7, #6]
 8002846:	4603      	mov	r3, r0
 8002848:	80bb      	strh	r3, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	807b      	strh	r3, [r7, #2]
 800284e:	4613      	mov	r3, r2
 8002850:	803b      	strh	r3, [r7, #0]
  for (int i = 0; i < thickness; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e01a      	b.n	800288e <LCD_Draw_Horizontal_Line+0x5a>
  {
    for (int j = 0; j < length; j++)
 8002858:	2300      	movs	r3, #0
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e010      	b.n	8002880 <LCD_Draw_Horizontal_Line+0x4c>
    {
      LCD_Draw_Pixel(xPos + j, yPos + i, color);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	b29a      	uxth	r2, r3
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	4413      	add	r3, r2
 8002866:	b298      	uxth	r0, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	b29a      	uxth	r2, r3
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	8c3a      	ldrh	r2, [r7, #32]
 8002874:	4619      	mov	r1, r3
 8002876:	f7ff fe15 	bl	80024a4 <LCD_Draw_Pixel>
    for (int j = 0; j < length; j++)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbea      	blt.n	800285e <LCD_Draw_Horizontal_Line+0x2a>
  for (int i = 0; i < thickness; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	883b      	ldrh	r3, [r7, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	429a      	cmp	r2, r3
 8002894:	dbe0      	blt.n	8002858 <LCD_Draw_Horizontal_Line+0x24>
    }
  }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bd90      	pop	{r4, r7, pc}

080028a0 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	460a      	mov	r2, r1
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	4613      	mov	r3, r2
 80028ae:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e007      	b.n	80028cc <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <LCD_Clear+0x40>)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88ba      	ldrh	r2, [r7, #4]
 80028c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3301      	adds	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80028d2:	d3f3      	bcc.n	80028bc <LCD_Clear+0x1c>
		}
	}
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	200001a0 	.word	0x200001a0

080028e4 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 80028e8:	e7fe      	b.n	80028e8 <LCD_Error_Handler+0x4>

080028ea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80028ee:	f000 f9ff 	bl	8002cf0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80028f2:	20ca      	movs	r0, #202	; 0xca
 80028f4:	f000 f943 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80028f8:	20c3      	movs	r0, #195	; 0xc3
 80028fa:	f000 f94d 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80028fe:	2008      	movs	r0, #8
 8002900:	f000 f94a 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8002904:	2050      	movs	r0, #80	; 0x50
 8002906:	f000 f947 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 800290a:	20cf      	movs	r0, #207	; 0xcf
 800290c:	f000 f937 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8002910:	2000      	movs	r0, #0
 8002912:	f000 f941 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8002916:	20c1      	movs	r0, #193	; 0xc1
 8002918:	f000 f93e 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800291c:	2030      	movs	r0, #48	; 0x30
 800291e:	f000 f93b 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8002922:	20ed      	movs	r0, #237	; 0xed
 8002924:	f000 f92b 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8002928:	2064      	movs	r0, #100	; 0x64
 800292a:	f000 f935 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800292e:	2003      	movs	r0, #3
 8002930:	f000 f932 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8002934:	2012      	movs	r0, #18
 8002936:	f000 f92f 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800293a:	2081      	movs	r0, #129	; 0x81
 800293c:	f000 f92c 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8002940:	20e8      	movs	r0, #232	; 0xe8
 8002942:	f000 f91c 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8002946:	2085      	movs	r0, #133	; 0x85
 8002948:	f000 f926 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f000 f923 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002952:	2078      	movs	r0, #120	; 0x78
 8002954:	f000 f920 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8002958:	20cb      	movs	r0, #203	; 0xcb
 800295a:	f000 f910 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800295e:	2039      	movs	r0, #57	; 0x39
 8002960:	f000 f91a 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	f000 f917 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f000 f914 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8002970:	2034      	movs	r0, #52	; 0x34
 8002972:	f000 f911 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8002976:	2002      	movs	r0, #2
 8002978:	f000 f90e 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800297c:	20f7      	movs	r0, #247	; 0xf7
 800297e:	f000 f8fe 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8002982:	2020      	movs	r0, #32
 8002984:	f000 f908 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8002988:	20ea      	movs	r0, #234	; 0xea
 800298a:	f000 f8f8 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f902 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f000 f8ff 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800299a:	20b1      	movs	r0, #177	; 0xb1
 800299c:	f000 f8ef 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 f8f9 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80029a6:	201b      	movs	r0, #27
 80029a8:	f000 f8f6 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80029ac:	20b6      	movs	r0, #182	; 0xb6
 80029ae:	f000 f8e6 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80029b2:	200a      	movs	r0, #10
 80029b4:	f000 f8f0 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 80029b8:	20a2      	movs	r0, #162	; 0xa2
 80029ba:	f000 f8ed 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 80029be:	20c0      	movs	r0, #192	; 0xc0
 80029c0:	f000 f8dd 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80029c4:	2010      	movs	r0, #16
 80029c6:	f000 f8e7 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 80029ca:	20c1      	movs	r0, #193	; 0xc1
 80029cc:	f000 f8d7 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80029d0:	2010      	movs	r0, #16
 80029d2:	f000 f8e1 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80029d6:	20c5      	movs	r0, #197	; 0xc5
 80029d8:	f000 f8d1 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80029dc:	2045      	movs	r0, #69	; 0x45
 80029de:	f000 f8db 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80029e2:	2015      	movs	r0, #21
 80029e4:	f000 f8d8 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80029e8:	20c7      	movs	r0, #199	; 0xc7
 80029ea:	f000 f8c8 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80029ee:	2090      	movs	r0, #144	; 0x90
 80029f0:	f000 f8d2 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80029f4:	2036      	movs	r0, #54	; 0x36
 80029f6:	f000 f8c2 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80029fa:	20c8      	movs	r0, #200	; 0xc8
 80029fc:	f000 f8cc 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002a00:	20f2      	movs	r0, #242	; 0xf2
 8002a02:	f000 f8bc 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f8c6 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002a0c:	20b0      	movs	r0, #176	; 0xb0
 8002a0e:	f000 f8b6 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002a12:	20c2      	movs	r0, #194	; 0xc2
 8002a14:	f000 f8c0 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002a18:	20b6      	movs	r0, #182	; 0xb6
 8002a1a:	f000 f8b0 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002a1e:	200a      	movs	r0, #10
 8002a20:	f000 f8ba 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002a24:	20a7      	movs	r0, #167	; 0xa7
 8002a26:	f000 f8b7 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002a2a:	2027      	movs	r0, #39	; 0x27
 8002a2c:	f000 f8b4 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002a30:	2004      	movs	r0, #4
 8002a32:	f000 f8b1 	bl	8002b98 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002a36:	202a      	movs	r0, #42	; 0x2a
 8002a38:	f000 f8a1 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f000 f8ab 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f8a8 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f8a5 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002a4e:	20ef      	movs	r0, #239	; 0xef
 8002a50:	f000 f8a2 	bl	8002b98 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002a54:	202b      	movs	r0, #43	; 0x2b
 8002a56:	f000 f892 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f000 f89c 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 f899 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f000 f896 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002a6c:	203f      	movs	r0, #63	; 0x3f
 8002a6e:	f000 f893 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002a72:	20f6      	movs	r0, #246	; 0xf6
 8002a74:	f000 f883 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f000 f88d 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f88a 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8002a84:	2006      	movs	r0, #6
 8002a86:	f000 f887 	bl	8002b98 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8002a8a:	202c      	movs	r0, #44	; 0x2c
 8002a8c:	f000 f877 	bl	8002b7e <ili9341_Write_Reg>
  LCD_Delay(200);
 8002a90:	20c8      	movs	r0, #200	; 0xc8
 8002a92:	f000 f9e9 	bl	8002e68 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8002a96:	2026      	movs	r0, #38	; 0x26
 8002a98:	f000 f871 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f000 f87b 	bl	8002b98 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8002aa2:	20e0      	movs	r0, #224	; 0xe0
 8002aa4:	f000 f86b 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8002aa8:	200f      	movs	r0, #15
 8002aaa:	f000 f875 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8002aae:	2029      	movs	r0, #41	; 0x29
 8002ab0:	f000 f872 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8002ab4:	2024      	movs	r0, #36	; 0x24
 8002ab6:	f000 f86f 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002aba:	200c      	movs	r0, #12
 8002abc:	f000 f86c 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8002ac0:	200e      	movs	r0, #14
 8002ac2:	f000 f869 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002ac6:	2009      	movs	r0, #9
 8002ac8:	f000 f866 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8002acc:	204e      	movs	r0, #78	; 0x4e
 8002ace:	f000 f863 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002ad2:	2078      	movs	r0, #120	; 0x78
 8002ad4:	f000 f860 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002ad8:	203c      	movs	r0, #60	; 0x3c
 8002ada:	f000 f85d 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8002ade:	2009      	movs	r0, #9
 8002ae0:	f000 f85a 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002ae4:	2013      	movs	r0, #19
 8002ae6:	f000 f857 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002aea:	2005      	movs	r0, #5
 8002aec:	f000 f854 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002af0:	2017      	movs	r0, #23
 8002af2:	f000 f851 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002af6:	2011      	movs	r0, #17
 8002af8:	f000 f84e 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f000 f84b 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002b02:	20e1      	movs	r0, #225	; 0xe1
 8002b04:	f000 f83b 	bl	8002b7e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f000 f845 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002b0e:	2016      	movs	r0, #22
 8002b10:	f000 f842 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002b14:	201b      	movs	r0, #27
 8002b16:	f000 f83f 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002b1a:	2004      	movs	r0, #4
 8002b1c:	f000 f83c 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002b20:	2011      	movs	r0, #17
 8002b22:	f000 f839 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002b26:	2007      	movs	r0, #7
 8002b28:	f000 f836 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002b2c:	2031      	movs	r0, #49	; 0x31
 8002b2e:	f000 f833 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002b32:	2033      	movs	r0, #51	; 0x33
 8002b34:	f000 f830 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002b38:	2042      	movs	r0, #66	; 0x42
 8002b3a:	f000 f82d 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002b3e:	2005      	movs	r0, #5
 8002b40:	f000 f82a 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002b44:	200c      	movs	r0, #12
 8002b46:	f000 f827 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002b4a:	200a      	movs	r0, #10
 8002b4c:	f000 f824 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002b50:	2028      	movs	r0, #40	; 0x28
 8002b52:	f000 f821 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002b56:	202f      	movs	r0, #47	; 0x2f
 8002b58:	f000 f81e 	bl	8002b98 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002b5c:	200f      	movs	r0, #15
 8002b5e:	f000 f81b 	bl	8002b98 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002b62:	2011      	movs	r0, #17
 8002b64:	f000 f80b 	bl	8002b7e <ili9341_Write_Reg>
  LCD_Delay(200);
 8002b68:	20c8      	movs	r0, #200	; 0xc8
 8002b6a:	f000 f97d 	bl	8002e68 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002b6e:	2029      	movs	r0, #41	; 0x29
 8002b70:	f000 f805 	bl	8002b7e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002b74:	202c      	movs	r0, #44	; 0x2c
 8002b76:	f000 f802 	bl	8002b7e <ili9341_Write_Reg>
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f94a 	bl	8002e24 <LCD_IO_WriteReg>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 f91b 	bl	8002de0 <LCD_IO_WriteData>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002bb8:	4819      	ldr	r0, [pc, #100]	; (8002c20 <SPI_Init+0x6c>)
 8002bba:	f002 ff3c 	bl	8005a36 <HAL_SPI_GetState>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d12b      	bne.n	8002c1c <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	; (8002c20 <SPI_Init+0x6c>)
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <SPI_Init+0x70>)
 8002bc8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <SPI_Init+0x6c>)
 8002bcc:	2218      	movs	r2, #24
 8002bce:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <SPI_Init+0x6c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <SPI_Init+0x6c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <SPI_Init+0x6c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002be2:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <SPI_Init+0x6c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <SPI_Init+0x6c>)
 8002bea:	2207      	movs	r2, #7
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <SPI_Init+0x6c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <SPI_Init+0x6c>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <SPI_Init+0x6c>)
 8002bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c00:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <SPI_Init+0x6c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SPI_Init+0x6c>)
 8002c0a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c0e:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002c10:	4803      	ldr	r0, [pc, #12]	; (8002c20 <SPI_Init+0x6c>)
 8002c12:	f000 f833 	bl	8002c7c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002c16:	4802      	ldr	r0, [pc, #8]	; (8002c20 <SPI_Init+0x6c>)
 8002c18:	f002 fd20 	bl	800565c <HAL_SPI_Init>
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000148 	.word	0x20000148
 8002c24:	40015000 	.word	0x40015000

08002c28 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <SPI_Write+0x34>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	1db9      	adds	r1, r7, #6
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4808      	ldr	r0, [pc, #32]	; (8002c60 <SPI_Write+0x38>)
 8002c40:	f002 fdbd 	bl	80057be <HAL_SPI_Transmit>
 8002c44:	4603      	mov	r3, r0
 8002c46:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002c4e:	f000 f809 	bl	8002c64 <SPI_Error>
  }
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	20000148 	.word	0x20000148

08002c64 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002c68:	4803      	ldr	r0, [pc, #12]	; (8002c78 <SPI_Error+0x14>)
 8002c6a:	f002 fd80 	bl	800576e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002c6e:	f7ff ffa1 	bl	8002bb4 <SPI_Init>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000148 	.word	0x20000148

08002c7c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c92:	6453      	str	r3, [r2, #68]	; 0x44
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <SPI_MspInit+0x6c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8002cbc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8002cce:	2305      	movs	r3, #5
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <SPI_MspInit+0x70>)
 8002cda:	f001 f8a3 	bl	8003e24 <HAL_GPIO_Init>
}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40021400 	.word	0x40021400

08002cf0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <LCD_IO_Init+0xe0>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d164      	bne.n	8002dc8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <LCD_IO_Init+0xe0>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	6313      	str	r3, [r2, #48]	; 0x30
 8002d14:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	4619      	mov	r1, r3
 8002d38:	4827      	ldr	r0, [pc, #156]	; (8002dd8 <LCD_IO_Init+0xe8>)
 8002d3a:	f001 f873 	bl	8003e24 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4619      	mov	r1, r3
 8002d72:	4819      	ldr	r0, [pc, #100]	; (8002dd8 <LCD_IO_Init+0xe8>)
 8002d74:	f001 f856 	bl	8003e24 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6313      	str	r3, [r2, #48]	; 0x30
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <LCD_IO_Init+0xe4>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002d94:	2304      	movs	r3, #4
 8002d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002da4:	f107 030c 	add.w	r3, r7, #12
 8002da8:	4619      	mov	r1, r3
 8002daa:	480c      	ldr	r0, [pc, #48]	; (8002ddc <LCD_IO_Init+0xec>)
 8002dac:	f001 f83a 	bl	8003e24 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002db0:	2200      	movs	r2, #0
 8002db2:	2104      	movs	r1, #4
 8002db4:	4809      	ldr	r0, [pc, #36]	; (8002ddc <LCD_IO_Init+0xec>)
 8002db6:	f001 faed 	bl	8004394 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002dba:	2201      	movs	r2, #1
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4807      	ldr	r0, [pc, #28]	; (8002ddc <LCD_IO_Init+0xec>)
 8002dc0:	f001 fae8 	bl	8004394 <HAL_GPIO_WritePin>

    SPI_Init();
 8002dc4:	f7ff fef6 	bl	8002bb4 <SPI_Init>
  }
}
 8002dc8:	bf00      	nop
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200259a0 	.word	0x200259a0
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020c00 	.word	0x40020c00
 8002ddc:	40020800 	.word	0x40020800

08002de0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df0:	480a      	ldr	r0, [pc, #40]	; (8002e1c <LCD_IO_WriteData+0x3c>)
 8002df2:	f001 facf 	bl	8004394 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002df6:	2200      	movs	r2, #0
 8002df8:	2104      	movs	r1, #4
 8002dfa:	4809      	ldr	r0, [pc, #36]	; (8002e20 <LCD_IO_WriteData+0x40>)
 8002dfc:	f001 faca 	bl	8004394 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff10 	bl	8002c28 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <LCD_IO_WriteData+0x40>)
 8002e0e:	f001 fac1 	bl	8004394 <HAL_GPIO_WritePin>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020c00 	.word	0x40020c00
 8002e20:	40020800 	.word	0x40020800

08002e24 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e34:	480a      	ldr	r0, [pc, #40]	; (8002e60 <LCD_IO_WriteReg+0x3c>)
 8002e36:	f001 faad 	bl	8004394 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	4809      	ldr	r0, [pc, #36]	; (8002e64 <LCD_IO_WriteReg+0x40>)
 8002e40:	f001 faa8 	bl	8004394 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff feed 	bl	8002c28 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2104      	movs	r1, #4
 8002e52:	4804      	ldr	r0, [pc, #16]	; (8002e64 <LCD_IO_WriteReg+0x40>)
 8002e54:	f001 fa9e 	bl	8004394 <HAL_GPIO_WritePin>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40020c00 	.word	0x40020c00
 8002e64:	40020800 	.word	0x40020800

08002e68 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fecd 	bl	8003c10 <HAL_Delay>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <RNG_Init>:
static RNG_HandleTypeDef rng;

static uint32_t randomNumber;

void RNG_Init()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
    rng.Instance = RNG;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <RNG_Init+0x14>)
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <RNG_Init+0x18>)
 8002e88:	601a      	str	r2, [r3, #0]
    HAL_RNG_Init(&rng);
 8002e8a:	4802      	ldr	r0, [pc, #8]	; (8002e94 <RNG_Init+0x14>)
 8002e8c:	f002 fb66 	bl	800555c <HAL_RNG_Init>
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200259a4 	.word	0x200259a4
 8002e98:	50060800 	.word	0x50060800

08002e9c <RNG_GetRandomNumber>:

uint32_t RNG_GetRandomNumber()
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
    int status = HAL_RNG_GenerateRandomNumber(&rng, &randomNumber);
 8002ea2:	4906      	ldr	r1, [pc, #24]	; (8002ebc <RNG_GetRandomNumber+0x20>)
 8002ea4:	4806      	ldr	r0, [pc, #24]	; (8002ec0 <RNG_GetRandomNumber+0x24>)
 8002ea6:	f002 fb83 	bl	80055b0 <HAL_RNG_GenerateRandomNumber>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	607b      	str	r3, [r7, #4]
    return randomNumber;
 8002eae:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <RNG_GetRandomNumber+0x20>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200259b4 	.word	0x200259b4
 8002ec0:	200259a4 	.word	0x200259a4

08002ec4 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents() {
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <getScheduledEvents+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	200259b8 	.word	0x200259b8

08002edc <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    scheduledEvents |= 1 << event;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <addSchedulerEvent+0x28>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	4a03      	ldr	r2, [pc, #12]	; (8002f04 <addSchedulerEvent+0x28>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	200259b8 	.word	0x200259b8

08002f08 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event) {
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    scheduledEvents &= ~(1 << event);
 8002f10:	2201      	movs	r2, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <removeSchedulerEvent+0x2c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4013      	ands	r3, r2
 8002f22:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <removeSchedulerEvent+0x2c>)
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200259b8 	.word	0x200259b8

08002f38 <Timer_GetCurrentTime>:
 */

#include "Timer_Driver.h"

int Timer_GetCurrentTime()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
    HAL_GetTick();
 8002f3c:	f000 fe5c 	bl	8003bf8 <HAL_GetTick>
}
 8002f40:	bf00      	nop
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f4c:	f000 fdee 	bl	8003b2c <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  systemClockOverride();
 8002f50:	f000 f842 	bl	8002fd8 <systemClockOverride>

  MX_GPIO_Init();
 8002f54:	f000 f9b2 	bl	80032bc <MX_GPIO_Init>
  MX_LTDC_Init();
 8002f58:	f000 f87e 	bl	8003058 <MX_LTDC_Init>
  MX_RNG_Init();
 8002f5c:	f000 f92e 	bl	80031bc <MX_RNG_Init>
  MX_SPI5_Init();
 8002f60:	f000 f940 	bl	80031e4 <MX_SPI5_Init>
  MX_TIM6_Init();
 8002f64:	f000 f974 	bl	8003250 <MX_TIM6_Init>

  uint32_t eventsToRun;

  ApplicationInit();
 8002f68:	f7fd ff3e 	bl	8000de8 <ApplicationInit>

  addSchedulerEvent(START_EVENT);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff ffb5 	bl	8002edc <addSchedulerEvent>

  eventsToRun = getScheduledEvents();
 8002f72:	f7ff ffa7 	bl	8002ec4 <getScheduledEvents>
 8002f76:	6078      	str	r0, [r7, #4]

  while (1)
  {
    if ((eventsToRun & accessStartEvent) != 0)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <main+0x42>
      titleScreen();
 8002f82:	f7fe fadd 	bl	8001540 <titleScreen>
 8002f86:	e01e      	b.n	8002fc6 <main+0x80>

    else if ((eventsToRun & accessLevel1Event) != 0)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <main+0x52>
      levelOne();
 8002f92:	f7fe fdbd 	bl	8001b10 <levelOne>
 8002f96:	e016      	b.n	8002fc6 <main+0x80>
    
    else if ((eventsToRun & accessLevel2Event) != 0)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <main+0x62>
      levelTwo();
 8002fa2:	f7fe fe2d 	bl	8001c00 <levelTwo>
 8002fa6:	e00e      	b.n	8002fc6 <main+0x80>
    
    else if ((eventsToRun & accessLevel3Event) != 0)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <main+0x72>
      levelThree();
 8002fb2:	f7fe fecd 	bl	8001d50 <levelThree>
 8002fb6:	e006      	b.n	8002fc6 <main+0x80>
    
    else if ((eventsToRun & accessEndEvent) != 0)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <main+0x80>
      drawTimeFinal();
 8002fc2:	f7fe f85d 	bl	8001080 <drawTimeFinal>
    
    eventsToRun = getScheduledEvents();
 8002fc6:	f7ff ff7d 	bl	8002ec4 <getScheduledEvents>
 8002fca:	6078      	str	r0, [r7, #4]

    HAL_Delay(3000);
 8002fcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fd0:	f000 fe1e 	bl	8003c10 <HAL_Delay>
    if ((eventsToRun & accessStartEvent) != 0)
 8002fd4:	e7d0      	b.n	8002f78 <main+0x32>
	...

08002fd8 <systemClockOverride>:
    Error_Handler();
  }
}

void systemClockOverride(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b092      	sub	sp, #72	; 0x48
 8002fdc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <systemClockOverride+0x7c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <systemClockOverride+0x7c>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	; 0x40
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <systemClockOverride+0x7c>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003002:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003004:	2302      	movs	r3, #2
 8003006:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003008:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800300c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800300e:	2308      	movs	r3, #8
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003012:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003018:	2302      	movs	r3, #2
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800301c:	2307      	movs	r3, #7
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	4618      	mov	r0, r3
 8003024:	f001 fc76 	bl	8004914 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003028:	230f      	movs	r3, #15
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302c:	2302      	movs	r3, #2
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003030:	2300      	movs	r3, #0
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003038:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800303a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303e:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8003040:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003044:	2105      	movs	r1, #5
 8003046:	4618      	mov	r0, r3
 8003048:	f001 fedc 	bl	8004e04 <HAL_RCC_ClockConfig>
}
 800304c:	bf00      	nop
 800304e:	3748      	adds	r7, #72	; 0x48
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800

08003058 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b09a      	sub	sp, #104	; 0x68
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800305e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003062:	2234      	movs	r2, #52	; 0x34
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f002 ff2a 	bl	8005ec0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800306c:	463b      	mov	r3, r7
 800306e:	2234      	movs	r2, #52	; 0x34
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f002 ff24 	bl	8005ec0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003078:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <MX_LTDC_Init+0x15c>)
 800307a:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <MX_LTDC_Init+0x160>)
 800307c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800307e:	4b4d      	ldr	r3, [pc, #308]	; (80031b4 <MX_LTDC_Init+0x15c>)
 8003080:	2200      	movs	r2, #0
 8003082:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <MX_LTDC_Init+0x15c>)
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800308a:	4b4a      	ldr	r3, [pc, #296]	; (80031b4 <MX_LTDC_Init+0x15c>)
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003090:	4b48      	ldr	r3, [pc, #288]	; (80031b4 <MX_LTDC_Init+0x15c>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003096:	4b47      	ldr	r3, [pc, #284]	; (80031b4 <MX_LTDC_Init+0x15c>)
 8003098:	2207      	movs	r2, #7
 800309a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800309c:	4b45      	ldr	r3, [pc, #276]	; (80031b4 <MX_LTDC_Init+0x15c>)
 800309e:	2203      	movs	r2, #3
 80030a0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80030a2:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030a4:	220e      	movs	r2, #14
 80030a6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030b0:	f240 228e 	movw	r2, #654	; 0x28e
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80030b6:	4b3f      	ldr	r3, [pc, #252]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030b8:	f240 12e5 	movw	r2, #485	; 0x1e5
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030c0:	f44f 7225 	mov.w	r2, #660	; 0x294
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030c8:	f240 12e7 	movw	r2, #487	; 0x1e7
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80030ce:	4b39      	ldr	r3, [pc, #228]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80030d6:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80030e6:	4833      	ldr	r0, [pc, #204]	; (80031b4 <MX_LTDC_Init+0x15c>)
 80030e8:	f001 f96e 	bl	80043c8 <HAL_LTDC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80030f2:	f000 fab5 	bl	8003660 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003106:	2300      	movs	r3, #0
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003116:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003118:	2305      	movs	r3, #5
 800311a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800313a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800313e:	2200      	movs	r2, #0
 8003140:	4619      	mov	r1, r3
 8003142:	481c      	ldr	r0, [pc, #112]	; (80031b4 <MX_LTDC_Init+0x15c>)
 8003144:	f001 fa10 	bl	8004568 <HAL_LTDC_ConfigLayer>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800314e:	f000 fa87 	bl	8003660 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800316e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003172:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003174:	2305      	movs	r3, #5
 8003176:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003196:	463b      	mov	r3, r7
 8003198:	2201      	movs	r2, #1
 800319a:	4619      	mov	r1, r3
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_LTDC_Init+0x15c>)
 800319e:	f001 f9e3 	bl	8004568 <HAL_LTDC_ConfigLayer>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80031a8:	f000 fa5a 	bl	8003660 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	3768      	adds	r7, #104	; 0x68
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200259bc 	.word	0x200259bc
 80031b8:	40016800 	.word	0x40016800

080031bc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_RNG_Init+0x20>)
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <MX_RNG_Init+0x24>)
 80031c4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_RNG_Init+0x20>)
 80031c8:	f002 f9c8 	bl	800555c <HAL_RNG_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80031d2:	f000 fa45 	bl	8003660 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20025a64 	.word	0x20025a64
 80031e0:	50060800 	.word	0x50060800

080031e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80031e8:	4b17      	ldr	r3, [pc, #92]	; (8003248 <MX_SPI5_Init+0x64>)
 80031ea:	4a18      	ldr	r2, [pc, #96]	; (800324c <MX_SPI5_Init+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80031ee:	4b16      	ldr	r3, [pc, #88]	; (8003248 <MX_SPI5_Init+0x64>)
 80031f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80031f6:	4b14      	ldr	r3, [pc, #80]	; (8003248 <MX_SPI5_Init+0x64>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <MX_SPI5_Init+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <MX_SPI5_Init+0x64>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003208:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <MX_SPI5_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <MX_SPI5_Init+0x64>)
 8003210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003214:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_SPI5_Init+0x64>)
 8003218:	2208      	movs	r2, #8
 800321a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <MX_SPI5_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <MX_SPI5_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	; (8003248 <MX_SPI5_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <MX_SPI5_Init+0x64>)
 8003230:	220a      	movs	r2, #10
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	; (8003248 <MX_SPI5_Init+0x64>)
 8003236:	f002 fa11 	bl	800565c <HAL_SPI_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003240:	f000 fa0e 	bl	8003660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20025a74 	.word	0x20025a74
 800324c:	40015000 	.word	0x40015000

08003250 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003256:	463b      	mov	r3, r7
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <MX_TIM6_Init+0x64>)
 8003260:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <MX_TIM6_Init+0x68>)
 8003262:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <MX_TIM6_Init+0x64>)
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <MX_TIM6_Init+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <MX_TIM6_Init+0x64>)
 8003272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003276:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_TIM6_Init+0x64>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800327e:	480d      	ldr	r0, [pc, #52]	; (80032b4 <MX_TIM6_Init+0x64>)
 8003280:	f002 fcb2 	bl	8005be8 <HAL_TIM_Base_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800328a:	f000 f9e9 	bl	8003660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003296:	463b      	mov	r3, r7
 8003298:	4619      	mov	r1, r3
 800329a:	4806      	ldr	r0, [pc, #24]	; (80032b4 <MX_TIM6_Init+0x64>)
 800329c:	f002 fd94 	bl	8005dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80032a6:	f000 f9db 	bl	8003660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20025acc 	.word	0x20025acc
 80032b8:	40001000 	.word	0x40001000

080032bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	; 0x38
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
 80032d6:	4bb2      	ldr	r3, [pc, #712]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4ab1      	ldr	r2, [pc, #708]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4baf      	ldr	r3, [pc, #700]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	4bab      	ldr	r3, [pc, #684]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4aaa      	ldr	r2, [pc, #680]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4ba8      	ldr	r3, [pc, #672]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	4ba4      	ldr	r3, [pc, #656]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4aa3      	ldr	r2, [pc, #652]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4ba1      	ldr	r3, [pc, #644]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	4b9d      	ldr	r3, [pc, #628]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a9c      	ldr	r2, [pc, #624]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b9a      	ldr	r3, [pc, #616]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	4b96      	ldr	r3, [pc, #600]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a95      	ldr	r2, [pc, #596]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b93      	ldr	r3, [pc, #588]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	613b      	str	r3, [r7, #16]
 800335c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b8f      	ldr	r3, [pc, #572]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a8e      	ldr	r2, [pc, #568]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b8c      	ldr	r3, [pc, #560]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 8003384:	f043 0310 	orr.w	r3, r3, #16
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	4b81      	ldr	r3, [pc, #516]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a80      	ldr	r2, [pc, #512]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b7e      	ldr	r3, [pc, #504]	; (80035a0 <MX_GPIO_Init+0x2e4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2116      	movs	r1, #22
 80033b6:	487b      	ldr	r0, [pc, #492]	; (80035a4 <MX_GPIO_Init+0x2e8>)
 80033b8:	f000 ffec 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80033bc:	2200      	movs	r2, #0
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	4879      	ldr	r0, [pc, #484]	; (80035a8 <MX_GPIO_Init+0x2ec>)
 80033c2:	f000 ffe7 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80033c6:	2200      	movs	r2, #0
 80033c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80033cc:	4877      	ldr	r0, [pc, #476]	; (80035ac <MX_GPIO_Init+0x2f0>)
 80033ce:	f000 ffe1 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80033d2:	2200      	movs	r2, #0
 80033d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80033d8:	4875      	ldr	r0, [pc, #468]	; (80035b0 <MX_GPIO_Init+0x2f4>)
 80033da:	f000 ffdb 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80033de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ec:	2303      	movs	r3, #3
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033f0:	230c      	movs	r3, #12
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	4619      	mov	r1, r3
 80033fa:	486e      	ldr	r0, [pc, #440]	; (80035b4 <MX_GPIO_Init+0x2f8>)
 80033fc:	f000 fd12 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003400:	2301      	movs	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340c:	2303      	movs	r3, #3
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003410:	230c      	movs	r3, #12
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003418:	4619      	mov	r1, r3
 800341a:	4862      	ldr	r0, [pc, #392]	; (80035a4 <MX_GPIO_Init+0x2e8>)
 800341c:	f000 fd02 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003420:	2316      	movs	r3, #22
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003424:	2301      	movs	r3, #1
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	485b      	ldr	r0, [pc, #364]	; (80035a4 <MX_GPIO_Init+0x2e8>)
 8003438:	f000 fcf4 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800343c:	f248 0307 	movw	r3, #32775	; 0x8007
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003442:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	4619      	mov	r1, r3
 8003452:	4855      	ldr	r0, [pc, #340]	; (80035a8 <MX_GPIO_Init+0x2ec>)
 8003454:	f000 fce6 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800345c:	2301      	movs	r3, #1
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346c:	4619      	mov	r1, r3
 800346e:	484e      	ldr	r0, [pc, #312]	; (80035a8 <MX_GPIO_Init+0x2ec>)
 8003470:	f000 fcd8 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8003474:	2320      	movs	r3, #32
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003478:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	4619      	mov	r1, r3
 8003488:	4846      	ldr	r0, [pc, #280]	; (80035a4 <MX_GPIO_Init+0x2e8>)
 800348a:	f000 fccb 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800348e:	2304      	movs	r3, #4
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800349a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349e:	4619      	mov	r1, r3
 80034a0:	4845      	ldr	r0, [pc, #276]	; (80035b8 <MX_GPIO_Init+0x2fc>)
 80034a2:	f000 fcbf 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80034a6:	f248 1333 	movw	r3, #33075	; 0x8133
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034b8:	230c      	movs	r3, #12
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	483b      	ldr	r0, [pc, #236]	; (80035b0 <MX_GPIO_Init+0x2f4>)
 80034c4:	f000 fcae 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80034c8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034da:	230c      	movs	r3, #12
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4835      	ldr	r0, [pc, #212]	; (80035bc <MX_GPIO_Init+0x300>)
 80034e6:	f000 fc9d 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80034ea:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80034fc:	230c      	movs	r3, #12
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	482c      	ldr	r0, [pc, #176]	; (80035b8 <MX_GPIO_Init+0x2fc>)
 8003508:	f000 fc8c 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800350c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	4619      	mov	r1, r3
 8003520:	4825      	ldr	r0, [pc, #148]	; (80035b8 <MX_GPIO_Init+0x2fc>)
 8003522:	f000 fc7f 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003526:	f24c 7303 	movw	r3, #50947	; 0xc703
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003538:	230c      	movs	r3, #12
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003540:	4619      	mov	r1, r3
 8003542:	481a      	ldr	r0, [pc, #104]	; (80035ac <MX_GPIO_Init+0x2f0>)
 8003544:	f000 fc6e 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354e:	2300      	movs	r3, #0
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	4813      	ldr	r0, [pc, #76]	; (80035ac <MX_GPIO_Init+0x2f0>)
 800355e:	f000 fc61 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003562:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003568:	2301      	movs	r3, #1
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003570:	2300      	movs	r3, #0
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003578:	4619      	mov	r1, r3
 800357a:	480c      	ldr	r0, [pc, #48]	; (80035ac <MX_GPIO_Init+0x2f0>)
 800357c:	f000 fc52 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003586:	2312      	movs	r3, #18
 8003588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	2300      	movs	r3, #0
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003592:	2304      	movs	r3, #4
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359a:	4619      	mov	r1, r3
 800359c:	e010      	b.n	80035c0 <MX_GPIO_Init+0x304>
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020c00 	.word	0x40020c00
 80035b0:	40021800 	.word	0x40021800
 80035b4:	40021400 	.word	0x40021400
 80035b8:	40020400 	.word	0x40020400
 80035bc:	40021000 	.word	0x40021000
 80035c0:	4823      	ldr	r0, [pc, #140]	; (8003650 <MX_GPIO_Init+0x394>)
 80035c2:	f000 fc2f 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80035c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035cc:	2312      	movs	r3, #18
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035d8:	2304      	movs	r3, #4
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	481c      	ldr	r0, [pc, #112]	; (8003654 <MX_GPIO_Init+0x398>)
 80035e4:	f000 fc1e 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80035e8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035fa:	2307      	movs	r3, #7
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	4813      	ldr	r0, [pc, #76]	; (8003654 <MX_GPIO_Init+0x398>)
 8003606:	f000 fc0d 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800360a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003610:	2301      	movs	r3, #1
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800361c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003620:	4619      	mov	r1, r3
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <MX_GPIO_Init+0x39c>)
 8003624:	f000 fbfe 	bl	8003e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003628:	2360      	movs	r3, #96	; 0x60
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003634:	2303      	movs	r3, #3
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003638:	230c      	movs	r3, #12
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003640:	4619      	mov	r1, r3
 8003642:	4806      	ldr	r0, [pc, #24]	; (800365c <MX_GPIO_Init+0x3a0>)
 8003644:	f000 fbee 	bl	8003e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003648:	bf00      	nop
 800364a:	3738      	adds	r7, #56	; 0x38
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40020800 	.word	0x40020800
 8003654:	40020000 	.word	0x40020000
 8003658:	40021800 	.word	0x40021800
 800365c:	40020400 	.word	0x40020400

08003660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003664:	b672      	cpsid	i
}
 8003666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003668:	e7fe      	b.n	8003668 <Error_Handler+0x8>
	...

0800366c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_MspInit+0x4c>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <HAL_MspInit+0x4c>)
 800367c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_MspInit+0x4c>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	603b      	str	r3, [r7, #0]
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_MspInit+0x4c>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <HAL_MspInit+0x4c>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_MspInit+0x4c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80036aa:	2007      	movs	r0, #7
 80036ac:	f000 fb86 	bl	8003dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800

080036bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b09a      	sub	sp, #104	; 0x68
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d8:	2230      	movs	r2, #48	; 0x30
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fbef 	bl	8005ec0 <memset>
  if(hltdc->Instance==LTDC)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a81      	ldr	r2, [pc, #516]	; (80038ec <HAL_LTDC_MspInit+0x230>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f040 80fa 	bne.w	80038e2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80036ee:	2308      	movs	r3, #8
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80036f2:	2332      	movs	r3, #50	; 0x32
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80036f6:	2302      	movs	r3, #2
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80036fa:	2300      	movs	r3, #0
 80036fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fd6a 	bl	80051dc <HAL_RCCEx_PeriphCLKConfig>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800370e:	f7ff ffa7 	bl	8003660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4a75      	ldr	r2, [pc, #468]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 800371c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003720:	6453      	str	r3, [r2, #68]	; 0x44
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003738:	f043 0320 	orr.w	r3, r3, #32
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	4b68      	ldr	r3, [pc, #416]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6313      	str	r3, [r2, #48]	; 0x30
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
 8003764:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a60      	ldr	r2, [pc, #384]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003770:	f043 0302 	orr.w	r3, r3, #2
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b5e      	ldr	r3, [pc, #376]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 800378c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	6313      	str	r3, [r2, #48]	; 0x30
 80037ae:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_LTDC_MspInit+0x234>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80037d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2302      	movs	r3, #2
 80037de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80037e8:	230e      	movs	r3, #14
 80037ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80037ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037f0:	4619      	mov	r1, r3
 80037f2:	4840      	ldr	r0, [pc, #256]	; (80038f4 <HAL_LTDC_MspInit+0x238>)
 80037f4:	f000 fb16 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80037f8:	f641 0358 	movw	r3, #6232	; 0x1858
 80037fc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800380a:	230e      	movs	r3, #14
 800380c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003812:	4619      	mov	r1, r3
 8003814:	4838      	ldr	r0, [pc, #224]	; (80038f8 <HAL_LTDC_MspInit+0x23c>)
 8003816:	f000 fb05 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800381a:	2303      	movs	r3, #3
 800381c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800382a:	2309      	movs	r3, #9
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800382e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003832:	4619      	mov	r1, r3
 8003834:	4831      	ldr	r0, [pc, #196]	; (80038fc <HAL_LTDC_MspInit+0x240>)
 8003836:	f000 faf5 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800383a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800383e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800384c:	230e      	movs	r3, #14
 800384e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003854:	4619      	mov	r1, r3
 8003856:	4829      	ldr	r0, [pc, #164]	; (80038fc <HAL_LTDC_MspInit+0x240>)
 8003858:	f000 fae4 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800385c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003860:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003862:	2302      	movs	r3, #2
 8003864:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386a:	2300      	movs	r3, #0
 800386c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800386e:	230e      	movs	r3, #14
 8003870:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003872:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003876:	4619      	mov	r1, r3
 8003878:	4821      	ldr	r0, [pc, #132]	; (8003900 <HAL_LTDC_MspInit+0x244>)
 800387a:	f000 fad3 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800387e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003882:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003890:	230e      	movs	r3, #14
 8003892:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003898:	4619      	mov	r1, r3
 800389a:	481a      	ldr	r0, [pc, #104]	; (8003904 <HAL_LTDC_MspInit+0x248>)
 800389c:	f000 fac2 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80038a0:	2348      	movs	r3, #72	; 0x48
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038b0:	230e      	movs	r3, #14
 80038b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038b8:	4619      	mov	r1, r3
 80038ba:	4813      	ldr	r0, [pc, #76]	; (8003908 <HAL_LTDC_MspInit+0x24c>)
 80038bc:	f000 fab2 	bl	8003e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80038c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c6:	2302      	movs	r3, #2
 80038c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ce:	2300      	movs	r3, #0
 80038d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80038d2:	2309      	movs	r3, #9
 80038d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038da:	4619      	mov	r1, r3
 80038dc:	4808      	ldr	r0, [pc, #32]	; (8003900 <HAL_LTDC_MspInit+0x244>)
 80038de:	f000 faa1 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80038e2:	bf00      	nop
 80038e4:	3768      	adds	r7, #104	; 0x68
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40016800 	.word	0x40016800
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40021400 	.word	0x40021400
 80038f8:	40020000 	.word	0x40020000
 80038fc:	40020400 	.word	0x40020400
 8003900:	40021800 	.word	0x40021800
 8003904:	40020800 	.word	0x40020800
 8003908:	40020c00 	.word	0x40020c00

0800390c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_RNG_MspInit+0x3c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10d      	bne.n	800393a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_RNG_MspInit+0x40>)
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RNG_MspInit+0x40>)
 8003928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392c:	6353      	str	r3, [r2, #52]	; 0x34
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_RNG_MspInit+0x40>)
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	50060800 	.word	0x50060800
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	; 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_SPI_MspInit+0x84>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12c      	bne.n	80039cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	6453      	str	r3, [r2, #68]	; 0x44
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 8003998:	f043 0320 	orr.w	r3, r3, #32
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <HAL_SPI_MspInit+0x88>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80039aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80039ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80039bc:	2305      	movs	r3, #5
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	4619      	mov	r1, r3
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <HAL_SPI_MspInit+0x8c>)
 80039c8:	f000 fa2c 	bl	8003e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40015000 	.word	0x40015000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40021400 	.word	0x40021400

080039e0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_SPI_MspDeInit+0x30>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10a      	bne.n	8003a08 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_SPI_MspDeInit+0x34>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_SPI_MspDeInit+0x34>)
 80039f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80039fc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80039fe:	f44f 7160 	mov.w	r1, #896	; 0x380
 8003a02:	4805      	ldr	r0, [pc, #20]	; (8003a18 <HAL_SPI_MspDeInit+0x38>)
 8003a04:	f000 fbba 	bl	800417c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40015000 	.word	0x40015000
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40021400 	.word	0x40021400

08003a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0b      	ldr	r2, [pc, #44]	; (8003a58 <HAL_TIM_Base_MspInit+0x3c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <HAL_TIM_Base_MspInit+0x40>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_TIM_Base_MspInit+0x40>)
 8003a38:	f043 0310 	orr.w	r3, r3, #16
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <HAL_TIM_Base_MspInit+0x40>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003a4a:	bf00      	nop
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40001000 	.word	0x40001000
 8003a5c:	40023800 	.word	0x40023800

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <NMI_Handler+0x4>

08003a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <MemManage_Handler+0x4>

08003a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a76:	e7fe      	b.n	8003a76 <BusFault_Handler+0x4>

08003a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <UsageFault_Handler+0x4>

08003a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aac:	f000 f890 	bl	8003bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <SystemInit+0x20>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <SystemInit+0x20>)
 8003ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b10 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003adc:	480d      	ldr	r0, [pc, #52]	; (8003b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ade:	490e      	ldr	r1, [pc, #56]	; (8003b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ae4:	e002      	b.n	8003aec <LoopCopyDataInit>

08003ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aea:	3304      	adds	r3, #4

08003aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003af0:	d3f9      	bcc.n	8003ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003af2:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003af4:	4c0b      	ldr	r4, [pc, #44]	; (8003b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003af8:	e001      	b.n	8003afe <LoopFillZerobss>

08003afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003afc:	3204      	adds	r2, #4

08003afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b00:	d3fb      	bcc.n	8003afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b02:	f7ff ffd7 	bl	8003ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b06:	f002 f9e3 	bl	8005ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b0a:	f7ff fa1c 	bl	8002f46 <main>
  bx  lr    
 8003b0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b18:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003b1c:	08008378 	.word	0x08008378
  ldr r2, =_sbss
 8003b20:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003b24:	20025b18 	.word	0x20025b18

08003b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b28:	e7fe      	b.n	8003b28 <ADC_IRQHandler>
	...

08003b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <HAL_Init+0x40>)
 8003b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_Init+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <HAL_Init+0x40>)
 8003b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_Init+0x40>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_Init+0x40>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b54:	2003      	movs	r0, #3
 8003b56:	f000 f931 	bl	8003dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f000 f808 	bl	8003b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b60:	f7ff fd84 	bl	800366c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00

08003b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_InitTick+0x54>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_InitTick+0x58>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f93b 	bl	8003e0a <HAL_SYSTICK_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e00e      	b.n	8003bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d80a      	bhi.n	8003bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bac:	f000 f911 	bl	8003dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bb0:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <HAL_InitTick+0x5c>)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20000014 	.word	0x20000014
 8003bc8:	2000001c 	.word	0x2000001c
 8003bcc:	20000018 	.word	0x20000018

08003bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x20>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_IncTick+0x24>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4413      	add	r3, r2
 8003be0:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <HAL_IncTick+0x24>)
 8003be2:	6013      	str	r3, [r2, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	2000001c 	.word	0x2000001c
 8003bf4:	20025b14 	.word	0x20025b14

08003bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <HAL_GetTick+0x14>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	20025b14 	.word	0x20025b14

08003c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff ffee 	bl	8003bf8 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c28:	d005      	beq.n	8003c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_Delay+0x44>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c36:	bf00      	nop
 8003c38:	f7ff ffde 	bl	8003bf8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d8f7      	bhi.n	8003c38 <HAL_Delay+0x28>
  {
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	2000001c 	.word	0x2000001c

08003c58 <__NVIC_SetPriorityGrouping>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <__NVIC_SetPriorityGrouping+0x44>)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	60d3      	str	r3, [r2, #12]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <__NVIC_GetPriorityGrouping>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f003 0307 	and.w	r3, r3, #7
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	6039      	str	r1, [r7, #0]
 8003cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	db0a      	blt.n	8003ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	490c      	ldr	r1, [pc, #48]	; (8003d08 <__NVIC_SetPriority+0x4c>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	440b      	add	r3, r1
 8003ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce4:	e00a      	b.n	8003cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	4908      	ldr	r1, [pc, #32]	; (8003d0c <__NVIC_SetPriority+0x50>)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	3b04      	subs	r3, #4
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	761a      	strb	r2, [r3, #24]
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0307 	and.w	r3, r3, #7
 8003d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f1c3 0307 	rsb	r3, r3, #7
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	bf28      	it	cs
 8003d2e:	2304      	movcs	r3, #4
 8003d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d902      	bls.n	8003d40 <NVIC_EncodePriority+0x30>
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3b03      	subs	r3, #3
 8003d3e:	e000      	b.n	8003d42 <NVIC_EncodePriority+0x32>
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	401a      	ands	r2, r3
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d62:	43d9      	mvns	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	4313      	orrs	r3, r2
         );
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3724      	adds	r7, #36	; 0x24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
	...

08003d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d88:	d301      	bcc.n	8003d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e00f      	b.n	8003dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <SysTick_Config+0x40>)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d96:	210f      	movs	r1, #15
 8003d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d9c:	f7ff ff8e 	bl	8003cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <SysTick_Config+0x40>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003da6:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <SysTick_Config+0x40>)
 8003da8:	2207      	movs	r2, #7
 8003daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000e010 	.word	0xe000e010

08003dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff47 	bl	8003c58 <__NVIC_SetPriorityGrouping>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
 8003dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff5c 	bl	8003ca0 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff8e 	bl	8003d10 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5d 	bl	8003cbc <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffb0 	bl	8003d78 <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b089      	sub	sp, #36	; 0x24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	e177      	b.n	8004130 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e40:	2201      	movs	r2, #1
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	f040 8166 	bne.w	800412a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d005      	beq.n	8003e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d130      	bne.n	8003ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eac:	2201      	movs	r2, #1
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	f003 0201 	and.w	r2, r3, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d017      	beq.n	8003f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d123      	bne.n	8003f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3208      	adds	r2, #8
 8003f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	08da      	lsrs	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2203      	movs	r2, #3
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0203 	and.w	r2, r3, #3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80c0 	beq.w	800412a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b66      	ldr	r3, [pc, #408]	; (8004148 <HAL_GPIO_Init+0x324>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	4a65      	ldr	r2, [pc, #404]	; (8004148 <HAL_GPIO_Init+0x324>)
 8003fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_GPIO_Init+0x324>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc6:	4a61      	ldr	r2, [pc, #388]	; (800414c <HAL_GPIO_Init+0x328>)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	089b      	lsrs	r3, r3, #2
 8003fcc:	3302      	adds	r3, #2
 8003fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	220f      	movs	r2, #15
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_GPIO_Init+0x32c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d037      	beq.n	8004062 <HAL_GPIO_Init+0x23e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a57      	ldr	r2, [pc, #348]	; (8004154 <HAL_GPIO_Init+0x330>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d031      	beq.n	800405e <HAL_GPIO_Init+0x23a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a56      	ldr	r2, [pc, #344]	; (8004158 <HAL_GPIO_Init+0x334>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d02b      	beq.n	800405a <HAL_GPIO_Init+0x236>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a55      	ldr	r2, [pc, #340]	; (800415c <HAL_GPIO_Init+0x338>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d025      	beq.n	8004056 <HAL_GPIO_Init+0x232>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a54      	ldr	r2, [pc, #336]	; (8004160 <HAL_GPIO_Init+0x33c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <HAL_GPIO_Init+0x22e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a53      	ldr	r2, [pc, #332]	; (8004164 <HAL_GPIO_Init+0x340>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d019      	beq.n	800404e <HAL_GPIO_Init+0x22a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a52      	ldr	r2, [pc, #328]	; (8004168 <HAL_GPIO_Init+0x344>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_GPIO_Init+0x226>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a51      	ldr	r2, [pc, #324]	; (800416c <HAL_GPIO_Init+0x348>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00d      	beq.n	8004046 <HAL_GPIO_Init+0x222>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a50      	ldr	r2, [pc, #320]	; (8004170 <HAL_GPIO_Init+0x34c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <HAL_GPIO_Init+0x21e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4f      	ldr	r2, [pc, #316]	; (8004174 <HAL_GPIO_Init+0x350>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_GPIO_Init+0x21a>
 800403a:	2309      	movs	r3, #9
 800403c:	e012      	b.n	8004064 <HAL_GPIO_Init+0x240>
 800403e:	230a      	movs	r3, #10
 8004040:	e010      	b.n	8004064 <HAL_GPIO_Init+0x240>
 8004042:	2308      	movs	r3, #8
 8004044:	e00e      	b.n	8004064 <HAL_GPIO_Init+0x240>
 8004046:	2307      	movs	r3, #7
 8004048:	e00c      	b.n	8004064 <HAL_GPIO_Init+0x240>
 800404a:	2306      	movs	r3, #6
 800404c:	e00a      	b.n	8004064 <HAL_GPIO_Init+0x240>
 800404e:	2305      	movs	r3, #5
 8004050:	e008      	b.n	8004064 <HAL_GPIO_Init+0x240>
 8004052:	2304      	movs	r3, #4
 8004054:	e006      	b.n	8004064 <HAL_GPIO_Init+0x240>
 8004056:	2303      	movs	r3, #3
 8004058:	e004      	b.n	8004064 <HAL_GPIO_Init+0x240>
 800405a:	2302      	movs	r3, #2
 800405c:	e002      	b.n	8004064 <HAL_GPIO_Init+0x240>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_GPIO_Init+0x240>
 8004062:	2300      	movs	r3, #0
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	f002 0203 	and.w	r2, r2, #3
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	4093      	lsls	r3, r2
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004074:	4935      	ldr	r1, [pc, #212]	; (800414c <HAL_GPIO_Init+0x328>)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3302      	adds	r3, #2
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_GPIO_Init+0x354>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040a6:	4a34      	ldr	r2, [pc, #208]	; (8004178 <HAL_GPIO_Init+0x354>)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ac:	4b32      	ldr	r3, [pc, #200]	; (8004178 <HAL_GPIO_Init+0x354>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d0:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_GPIO_Init+0x354>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040d6:	4b28      	ldr	r3, [pc, #160]	; (8004178 <HAL_GPIO_Init+0x354>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040fa:	4a1f      	ldr	r2, [pc, #124]	; (8004178 <HAL_GPIO_Init+0x354>)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_GPIO_Init+0x354>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	43db      	mvns	r3, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4013      	ands	r3, r2
 800410e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004124:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_GPIO_Init+0x354>)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3301      	adds	r3, #1
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	f67f ae84 	bls.w	8003e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	3724      	adds	r7, #36	; 0x24
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	40013800 	.word	0x40013800
 8004150:	40020000 	.word	0x40020000
 8004154:	40020400 	.word	0x40020400
 8004158:	40020800 	.word	0x40020800
 800415c:	40020c00 	.word	0x40020c00
 8004160:	40021000 	.word	0x40021000
 8004164:	40021400 	.word	0x40021400
 8004168:	40021800 	.word	0x40021800
 800416c:	40021c00 	.word	0x40021c00
 8004170:	40022000 	.word	0x40022000
 8004174:	40022400 	.word	0x40022400
 8004178:	40013c00 	.word	0x40013c00

0800417c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e0d9      	b.n	800434c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004198:	2201      	movs	r2, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	f040 80c9 	bne.w	8004346 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80041b4:	4a6b      	ldr	r2, [pc, #428]	; (8004364 <HAL_GPIO_DeInit+0x1e8>)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	3302      	adds	r3, #2
 80041bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	220f      	movs	r2, #15
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a63      	ldr	r2, [pc, #396]	; (8004368 <HAL_GPIO_DeInit+0x1ec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d037      	beq.n	800424e <HAL_GPIO_DeInit+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a62      	ldr	r2, [pc, #392]	; (800436c <HAL_GPIO_DeInit+0x1f0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d031      	beq.n	800424a <HAL_GPIO_DeInit+0xce>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a61      	ldr	r2, [pc, #388]	; (8004370 <HAL_GPIO_DeInit+0x1f4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02b      	beq.n	8004246 <HAL_GPIO_DeInit+0xca>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a60      	ldr	r2, [pc, #384]	; (8004374 <HAL_GPIO_DeInit+0x1f8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d025      	beq.n	8004242 <HAL_GPIO_DeInit+0xc6>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a5f      	ldr	r2, [pc, #380]	; (8004378 <HAL_GPIO_DeInit+0x1fc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01f      	beq.n	800423e <HAL_GPIO_DeInit+0xc2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_GPIO_DeInit+0x200>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d019      	beq.n	800423a <HAL_GPIO_DeInit+0xbe>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a5d      	ldr	r2, [pc, #372]	; (8004380 <HAL_GPIO_DeInit+0x204>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_GPIO_DeInit+0xba>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a5c      	ldr	r2, [pc, #368]	; (8004384 <HAL_GPIO_DeInit+0x208>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00d      	beq.n	8004232 <HAL_GPIO_DeInit+0xb6>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_GPIO_DeInit+0x20c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <HAL_GPIO_DeInit+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a5a      	ldr	r2, [pc, #360]	; (800438c <HAL_GPIO_DeInit+0x210>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_GPIO_DeInit+0xae>
 8004226:	2309      	movs	r3, #9
 8004228:	e012      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800422a:	230a      	movs	r3, #10
 800422c:	e010      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800422e:	2308      	movs	r3, #8
 8004230:	e00e      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 8004232:	2307      	movs	r3, #7
 8004234:	e00c      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 8004236:	2306      	movs	r3, #6
 8004238:	e00a      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800423a:	2305      	movs	r3, #5
 800423c:	e008      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800423e:	2304      	movs	r3, #4
 8004240:	e006      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 8004242:	2303      	movs	r3, #3
 8004244:	e004      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 8004246:	2302      	movs	r3, #2
 8004248:	e002      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_GPIO_DeInit+0xd4>
 800424e:	2300      	movs	r3, #0
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	f002 0203 	and.w	r2, r2, #3
 8004256:	0092      	lsls	r2, r2, #2
 8004258:	4093      	lsls	r3, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d132      	bne.n	80042c6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	4949      	ldr	r1, [pc, #292]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 800426a:	4013      	ands	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800426e:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	4946      	ldr	r1, [pc, #280]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 8004278:	4013      	ands	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800427c:	4b44      	ldr	r3, [pc, #272]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	43db      	mvns	r3, r3
 8004284:	4942      	ldr	r1, [pc, #264]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 8004286:	4013      	ands	r3, r2
 8004288:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	493f      	ldr	r1, [pc, #252]	; (8004390 <HAL_GPIO_DeInit+0x214>)
 8004294:	4013      	ands	r3, r2
 8004296:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80042a8:	4a2e      	ldr	r2, [pc, #184]	; (8004364 <HAL_GPIO_DeInit+0x1e8>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	43da      	mvns	r2, r3
 80042b8:	482a      	ldr	r0, [pc, #168]	; (8004364 <HAL_GPIO_DeInit+0x1e8>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	400a      	ands	r2, r1
 80042c0:	3302      	adds	r3, #2
 80042c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2103      	movs	r1, #3
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	08da      	lsrs	r2, r3, #3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3208      	adds	r2, #8
 80042e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	08d2      	lsrs	r2, r2, #3
 80042fc:	4019      	ands	r1, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	2103      	movs	r1, #3
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	2101      	movs	r1, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2103      	movs	r1, #3
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	f67f af22 	bls.w	8004198 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40013800 	.word	0x40013800
 8004368:	40020000 	.word	0x40020000
 800436c:	40020400 	.word	0x40020400
 8004370:	40020800 	.word	0x40020800
 8004374:	40020c00 	.word	0x40020c00
 8004378:	40021000 	.word	0x40021000
 800437c:	40021400 	.word	0x40021400
 8004380:	40021800 	.word	0x40021800
 8004384:	40021c00 	.word	0x40021c00
 8004388:	40022000 	.word	0x40022000
 800438c:	40022400 	.word	0x40022400
 8004390:	40013c00 	.word	0x40013c00

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043b0:	e003      	b.n	80043ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	041a      	lsls	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	619a      	str	r2, [r3, #24]
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0bf      	b.n	800455a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff f964 	bl	80036bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800440a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004420:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_LTDC_Init+0x19c>)
 800443c:	400b      	ands	r3, r1
 800443e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68d9      	ldr	r1, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_LTDC_Init+0x19c>)
 800446a:	400b      	ands	r3, r1
 800446c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68d9      	ldr	r1, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6919      	ldr	r1, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_LTDC_Init+0x19c>)
 8004498:	400b      	ands	r3, r1
 800449a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6919      	ldr	r1, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6959      	ldr	r1, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_LTDC_Init+0x19c>)
 80044c6:	400b      	ands	r3, r1
 80044c8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6959      	ldr	r1, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0206 	orr.w	r2, r2, #6
 8004536:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	f000f800 	.word	0xf000f800

08004568 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_LTDC_ConfigLayer+0x1a>
 800457e:	2302      	movs	r3, #2
 8004580:	e02c      	b.n	80045dc <HAL_LTDC_ConfigLayer+0x74>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2134      	movs	r1, #52	; 0x34
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	4413      	add	r3, r2
 800459e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4614      	mov	r4, r2
 80045a6:	461d      	mov	r5, r3
 80045a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f811 	bl	80045e4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2201      	movs	r2, #1
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}

080045e4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	4413      	add	r3, r2
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	4413      	add	r3, r2
 8004612:	3384      	adds	r3, #132	; 0x84
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	4611      	mov	r1, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	01d2      	lsls	r2, r2, #7
 8004620:	440a      	add	r2, r1
 8004622:	3284      	adds	r2, #132	; 0x84
 8004624:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004628:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800463a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800463c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4619      	mov	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	01db      	lsls	r3, r3, #7
 8004648:	440b      	add	r3, r1
 800464a:	3384      	adds	r3, #132	; 0x84
 800464c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004652:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004662:	4413      	add	r3, r2
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	01db      	lsls	r3, r3, #7
 8004672:	4413      	add	r3, r2
 8004674:	3384      	adds	r3, #132	; 0x84
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	4611      	mov	r1, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	01d2      	lsls	r2, r2, #7
 8004682:	440a      	add	r2, r1
 8004684:	3284      	adds	r2, #132	; 0x84
 8004686:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800468a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469a:	4413      	add	r3, r2
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	440b      	add	r3, r1
 80046aa:	3384      	adds	r3, #132	; 0x84
 80046ac:	4619      	mov	r1, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	01db      	lsls	r3, r3, #7
 80046be:	4413      	add	r3, r2
 80046c0:	3384      	adds	r3, #132	; 0x84
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	4611      	mov	r1, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	01d2      	lsls	r2, r2, #7
 80046ce:	440a      	add	r2, r1
 80046d0:	3284      	adds	r2, #132	; 0x84
 80046d2:	f023 0307 	bic.w	r3, r3, #7
 80046d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	4413      	add	r3, r2
 80046e4:	3384      	adds	r3, #132	; 0x84
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80046fe:	041b      	lsls	r3, r3, #16
 8004700:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	061b      	lsls	r3, r3, #24
 8004708:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	01db      	lsls	r3, r3, #7
 8004714:	4413      	add	r3, r2
 8004716:	3384      	adds	r3, #132	; 0x84
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	01db      	lsls	r3, r3, #7
 8004724:	4413      	add	r3, r2
 8004726:	3384      	adds	r3, #132	; 0x84
 8004728:	461a      	mov	r2, r3
 800472a:	2300      	movs	r3, #0
 800472c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004734:	461a      	mov	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	431a      	orrs	r2, r3
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	431a      	orrs	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	01db      	lsls	r3, r3, #7
 8004748:	440b      	add	r3, r1
 800474a:	3384      	adds	r3, #132	; 0x84
 800474c:	4619      	mov	r1, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	4413      	add	r3, r2
 8004760:	3384      	adds	r3, #132	; 0x84
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	4611      	mov	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	01d2      	lsls	r2, r2, #7
 800476e:	440a      	add	r2, r1
 8004770:	3284      	adds	r2, #132	; 0x84
 8004772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004776:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	; 0x84
 8004786:	461a      	mov	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	01db      	lsls	r3, r3, #7
 8004798:	4413      	add	r3, r2
 800479a:	3384      	adds	r3, #132	; 0x84
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	4611      	mov	r1, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	01d2      	lsls	r2, r2, #7
 80047a8:	440a      	add	r2, r1
 80047aa:	3284      	adds	r2, #132	; 0x84
 80047ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047b0:	f023 0307 	bic.w	r3, r3, #7
 80047b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	68f9      	ldr	r1, [r7, #12]
 80047c0:	6809      	ldr	r1, [r1, #0]
 80047c2:	4608      	mov	r0, r1
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	01c9      	lsls	r1, r1, #7
 80047c8:	4401      	add	r1, r0
 80047ca:	3184      	adds	r1, #132	; 0x84
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	01db      	lsls	r3, r3, #7
 80047da:	4413      	add	r3, r2
 80047dc:	3384      	adds	r3, #132	; 0x84
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	01db      	lsls	r3, r3, #7
 80047ea:	4413      	add	r3, r2
 80047ec:	3384      	adds	r3, #132	; 0x84
 80047ee:	461a      	mov	r2, r3
 80047f0:	2300      	movs	r3, #0
 80047f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	01db      	lsls	r3, r3, #7
 80047fe:	4413      	add	r3, r2
 8004800:	3384      	adds	r3, #132	; 0x84
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004812:	2304      	movs	r3, #4
 8004814:	61fb      	str	r3, [r7, #28]
 8004816:	e01b      	b.n	8004850 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d102      	bne.n	8004826 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004820:	2303      	movs	r3, #3
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	e014      	b.n	8004850 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d00b      	beq.n	8004846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004832:	2b02      	cmp	r3, #2
 8004834:	d007      	beq.n	8004846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800483a:	2b03      	cmp	r3, #3
 800483c:	d003      	beq.n	8004846 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004842:	2b07      	cmp	r3, #7
 8004844:	d102      	bne.n	800484c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004846:	2302      	movs	r3, #2
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	e001      	b.n	8004850 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800484c:	2301      	movs	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4413      	add	r3, r2
 800485c:	3384      	adds	r3, #132	; 0x84
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	4611      	mov	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	01d2      	lsls	r2, r2, #7
 800486a:	440a      	add	r2, r1
 800486c:	3284      	adds	r2, #132	; 0x84
 800486e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004872:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	fb02 f303 	mul.w	r3, r2, r3
 800487e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	1acb      	subs	r3, r1, r3
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	fb01 f303 	mul.w	r3, r1, r3
 8004890:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004892:	68f9      	ldr	r1, [r7, #12]
 8004894:	6809      	ldr	r1, [r1, #0]
 8004896:	4608      	mov	r0, r1
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	01c9      	lsls	r1, r1, #7
 800489c:	4401      	add	r1, r0
 800489e:	3184      	adds	r1, #132	; 0x84
 80048a0:	4313      	orrs	r3, r2
 80048a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	01db      	lsls	r3, r3, #7
 80048ae:	4413      	add	r3, r2
 80048b0:	3384      	adds	r3, #132	; 0x84
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4611      	mov	r1, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	01d2      	lsls	r2, r2, #7
 80048be:	440a      	add	r2, r1
 80048c0:	3284      	adds	r2, #132	; 0x84
 80048c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048c6:	f023 0307 	bic.w	r3, r3, #7
 80048ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	01db      	lsls	r3, r3, #7
 80048d6:	4413      	add	r3, r2
 80048d8:	3384      	adds	r3, #132	; 0x84
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	01db      	lsls	r3, r3, #7
 80048ec:	4413      	add	r3, r2
 80048ee:	3384      	adds	r3, #132	; 0x84
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4611      	mov	r1, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	01d2      	lsls	r2, r2, #7
 80048fc:	440a      	add	r2, r1
 80048fe:	3284      	adds	r2, #132	; 0x84
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6013      	str	r3, [r2, #0]
}
 8004906:	bf00      	nop
 8004908:	3724      	adds	r7, #36	; 0x24
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e267      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d075      	beq.n	8004a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004932:	4b88      	ldr	r3, [pc, #544]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b04      	cmp	r3, #4
 800493c:	d00c      	beq.n	8004958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493e:	4b85      	ldr	r3, [pc, #532]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004946:	2b08      	cmp	r3, #8
 8004948:	d112      	bne.n	8004970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494a:	4b82      	ldr	r3, [pc, #520]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004956:	d10b      	bne.n	8004970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004958:	4b7e      	ldr	r3, [pc, #504]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05b      	beq.n	8004a1c <HAL_RCC_OscConfig+0x108>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d157      	bne.n	8004a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e242      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x74>
 800497a:	4b76      	ldr	r3, [pc, #472]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a75      	ldr	r2, [pc, #468]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e01d      	b.n	80049c4 <HAL_RCC_OscConfig+0xb0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x98>
 8004992:	4b70      	ldr	r3, [pc, #448]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6f      	ldr	r2, [pc, #444]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b6d      	ldr	r3, [pc, #436]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6c      	ldr	r2, [pc, #432]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e00b      	b.n	80049c4 <HAL_RCC_OscConfig+0xb0>
 80049ac:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a68      	ldr	r2, [pc, #416]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	4b66      	ldr	r3, [pc, #408]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a65      	ldr	r2, [pc, #404]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7ff f914 	bl	8003bf8 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d4:	f7ff f910 	bl	8003bf8 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b64      	cmp	r3, #100	; 0x64
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e207      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0xc0>
 80049f2:	e014      	b.n	8004a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7ff f900 	bl	8003bf8 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7ff f8fc 	bl	8003bf8 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e1f3      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	4b51      	ldr	r3, [pc, #324]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0xe8>
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d063      	beq.n	8004af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2a:	4b4a      	ldr	r3, [pc, #296]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a36:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d11c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a42:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d116      	bne.n	8004a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4e:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <HAL_RCC_OscConfig+0x152>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d001      	beq.n	8004a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e1c7      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a66:	4b3b      	ldr	r3, [pc, #236]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4937      	ldr	r1, [pc, #220]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7a:	e03a      	b.n	8004af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <HAL_RCC_OscConfig+0x244>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7ff f8b5 	bl	8003bf8 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a92:	f7ff f8b1 	bl	8003bf8 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e1a8      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	4b2b      	ldr	r3, [pc, #172]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4925      	ldr	r1, [pc, #148]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
 8004ac4:	e015      	b.n	8004af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_OscConfig+0x244>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7ff f894 	bl	8003bf8 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad4:	f7ff f890 	bl	8003bf8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e187      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d036      	beq.n	8004b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_RCC_OscConfig+0x248>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0c:	f7ff f874 	bl	8003bf8 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b14:	f7ff f870 	bl	8003bf8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e167      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <HAL_RCC_OscConfig+0x240>)
 8004b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0f0      	beq.n	8004b14 <HAL_RCC_OscConfig+0x200>
 8004b32:	e01b      	b.n	8004b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_OscConfig+0x248>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3a:	f7ff f85d 	bl	8003bf8 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b40:	e00e      	b.n	8004b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b42:	f7ff f859 	bl	8003bf8 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d907      	bls.n	8004b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e150      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
 8004b54:	40023800 	.word	0x40023800
 8004b58:	42470000 	.word	0x42470000
 8004b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	4b88      	ldr	r3, [pc, #544]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ea      	bne.n	8004b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8097 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7e:	4b81      	ldr	r3, [pc, #516]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	4b7d      	ldr	r3, [pc, #500]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	4a7c      	ldr	r2, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b98:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9a:	4b7a      	ldr	r3, [pc, #488]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b77      	ldr	r3, [pc, #476]	; (8004d88 <HAL_RCC_OscConfig+0x474>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d118      	bne.n	8004be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb6:	4b74      	ldr	r3, [pc, #464]	; (8004d88 <HAL_RCC_OscConfig+0x474>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a73      	ldr	r2, [pc, #460]	; (8004d88 <HAL_RCC_OscConfig+0x474>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7ff f819 	bl	8003bf8 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7ff f815 	bl	8003bf8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e10c      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_OscConfig+0x474>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d106      	bne.n	8004bfe <HAL_RCC_OscConfig+0x2ea>
 8004bf0:	4b64      	ldr	r3, [pc, #400]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a63      	ldr	r2, [pc, #396]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfc:	e01c      	b.n	8004c38 <HAL_RCC_OscConfig+0x324>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x30c>
 8004c06:	4b5f      	ldr	r3, [pc, #380]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	4a5e      	ldr	r2, [pc, #376]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6713      	str	r3, [r2, #112]	; 0x70
 8004c12:	4b5c      	ldr	r3, [pc, #368]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a5b      	ldr	r2, [pc, #364]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0x324>
 8004c20:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	4a57      	ldr	r2, [pc, #348]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2c:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a54      	ldr	r2, [pc, #336]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c32:	f023 0304 	bic.w	r3, r3, #4
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d015      	beq.n	8004c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fe ffda 	bl	8003bf8 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fe ffd6 	bl	8003bf8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0cb      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c5e:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0ee      	beq.n	8004c48 <HAL_RCC_OscConfig+0x334>
 8004c6a:	e014      	b.n	8004c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6c:	f7fe ffc4 	bl	8003bf8 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fe ffc0 	bl	8003bf8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e0b5      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1ee      	bne.n	8004c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a1 	beq.w	8004df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb2:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d05c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d141      	bne.n	8004d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc6:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <HAL_RCC_OscConfig+0x478>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fe ff94 	bl	8003bf8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd4:	f7fe ff90 	bl	8003bf8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e087      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce6:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1f0      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69da      	ldr	r2, [r3, #28]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	019b      	lsls	r3, r3, #6
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	085b      	lsrs	r3, r3, #1
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	491b      	ldr	r1, [pc, #108]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1c:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <HAL_RCC_OscConfig+0x478>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d22:	f7fe ff69 	bl	8003bf8 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2a:	f7fe ff65 	bl	8003bf8 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e05c      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x416>
 8004d48:	e054      	b.n	8004df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <HAL_RCC_OscConfig+0x478>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fe ff52 	bl	8003bf8 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fe ff4e 	bl	8003bf8 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e045      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x444>
 8004d76:	e03d      	b.n	8004df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e038      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x4ec>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d028      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d121      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d11a      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d111      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0cc      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b68      	ldr	r3, [pc, #416]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d90c      	bls.n	8004e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b65      	ldr	r3, [pc, #404]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2e:	4b63      	ldr	r3, [pc, #396]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d001      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0b8      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e58:	4b59      	ldr	r3, [pc, #356]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a58      	ldr	r2, [pc, #352]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e70:	4b53      	ldr	r3, [pc, #332]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a52      	ldr	r2, [pc, #328]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e7c:	4b50      	ldr	r3, [pc, #320]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	494d      	ldr	r1, [pc, #308]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d044      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d119      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e07f      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec2:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e06f      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed2:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e067      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee2:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f023 0203 	bic.w	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4934      	ldr	r1, [pc, #208]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef4:	f7fe fe80 	bl	8003bf8 <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004efc:	f7fe fe7c 	bl	8003bf8 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e04f      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 020c 	and.w	r2, r3, #12
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d1eb      	bne.n	8004efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 030f 	and.w	r3, r3, #15
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d20c      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_RCC_ClockConfig+0x1b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e032      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f58:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f76:	4b12      	ldr	r3, [pc, #72]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	490e      	ldr	r1, [pc, #56]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f8a:	f000 f821 	bl	8004fd0 <HAL_RCC_GetSysClockFreq>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	091b      	lsrs	r3, r3, #4
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	490a      	ldr	r1, [pc, #40]	; (8004fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	5ccb      	ldrb	r3, [r1, r3]
 8004f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa2:	4a09      	ldr	r2, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fa6:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fde0 	bl	8003b70 <HAL_InitTick>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023c00 	.word	0x40023c00
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	08008180 	.word	0x08008180
 8004fc8:	20000014 	.word	0x20000014
 8004fcc:	20000018 	.word	0x20000018

08004fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd4:	b094      	sub	sp, #80	; 0x50
 8004fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	647b      	str	r3, [r7, #68]	; 0x44
 8004fdc:	2300      	movs	r3, #0
 8004fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe8:	4b79      	ldr	r3, [pc, #484]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d00d      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	f200 80e1 	bhi.w	80051bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x34>
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d003      	beq.n	800500a <HAL_RCC_GetSysClockFreq+0x3a>
 8005002:	e0db      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005004:	4b73      	ldr	r3, [pc, #460]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005006:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005008:	e0db      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500a:	4b73      	ldr	r3, [pc, #460]	; (80051d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800500e:	e0d8      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005010:	4b6f      	ldr	r3, [pc, #444]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501a:	4b6d      	ldr	r3, [pc, #436]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d063      	beq.n	80050ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005026:	4b6a      	ldr	r3, [pc, #424]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	2200      	movs	r2, #0
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005030:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
 800503a:	2300      	movs	r3, #0
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
 800503e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	f04f 0000 	mov.w	r0, #0
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	0159      	lsls	r1, r3, #5
 8005050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005054:	0150      	lsls	r0, r2, #5
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4621      	mov	r1, r4
 800505c:	1a51      	subs	r1, r2, r1
 800505e:	6139      	str	r1, [r7, #16]
 8005060:	4629      	mov	r1, r5
 8005062:	eb63 0301 	sbc.w	r3, r3, r1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005074:	4659      	mov	r1, fp
 8005076:	018b      	lsls	r3, r1, #6
 8005078:	4651      	mov	r1, sl
 800507a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507e:	4651      	mov	r1, sl
 8005080:	018a      	lsls	r2, r1, #6
 8005082:	4651      	mov	r1, sl
 8005084:	ebb2 0801 	subs.w	r8, r2, r1
 8005088:	4659      	mov	r1, fp
 800508a:	eb63 0901 	sbc.w	r9, r3, r1
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800509a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050a2:	4690      	mov	r8, r2
 80050a4:	4699      	mov	r9, r3
 80050a6:	4623      	mov	r3, r4
 80050a8:	eb18 0303 	adds.w	r3, r8, r3
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	462b      	mov	r3, r5
 80050b0:	eb49 0303 	adc.w	r3, r9, r3
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050c2:	4629      	mov	r1, r5
 80050c4:	024b      	lsls	r3, r1, #9
 80050c6:	4621      	mov	r1, r4
 80050c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050cc:	4621      	mov	r1, r4
 80050ce:	024a      	lsls	r2, r1, #9
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d6:	2200      	movs	r2, #0
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050e0:	f7fb fd04 	bl	8000aec <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ec:	e058      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ee:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	2200      	movs	r2, #0
 80050f6:	4618      	mov	r0, r3
 80050f8:	4611      	mov	r1, r2
 80050fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050fe:	623b      	str	r3, [r7, #32]
 8005100:	2300      	movs	r3, #0
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
 8005104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	f04f 0000 	mov.w	r0, #0
 8005110:	f04f 0100 	mov.w	r1, #0
 8005114:	0159      	lsls	r1, r3, #5
 8005116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800511a:	0150      	lsls	r0, r2, #5
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4641      	mov	r1, r8
 8005122:	ebb2 0a01 	subs.w	sl, r2, r1
 8005126:	4649      	mov	r1, r9
 8005128:	eb63 0b01 	sbc.w	fp, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800513c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005140:	ebb2 040a 	subs.w	r4, r2, sl
 8005144:	eb63 050b 	sbc.w	r5, r3, fp
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	00eb      	lsls	r3, r5, #3
 8005152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005156:	00e2      	lsls	r2, r4, #3
 8005158:	4614      	mov	r4, r2
 800515a:	461d      	mov	r5, r3
 800515c:	4643      	mov	r3, r8
 800515e:	18e3      	adds	r3, r4, r3
 8005160:	603b      	str	r3, [r7, #0]
 8005162:	464b      	mov	r3, r9
 8005164:	eb45 0303 	adc.w	r3, r5, r3
 8005168:	607b      	str	r3, [r7, #4]
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005176:	4629      	mov	r1, r5
 8005178:	028b      	lsls	r3, r1, #10
 800517a:	4621      	mov	r1, r4
 800517c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005180:	4621      	mov	r1, r4
 8005182:	028a      	lsls	r2, r1, #10
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518a:	2200      	movs	r2, #0
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	61fa      	str	r2, [r7, #28]
 8005190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005194:	f7fb fcaa 	bl	8000aec <__aeabi_uldivmod>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4613      	mov	r3, r2
 800519e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	3301      	adds	r3, #1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051ba:	e002      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3750      	adds	r7, #80	; 0x50
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800
 80051d4:	00f42400 	.word	0x00f42400
 80051d8:	007a1200 	.word	0x007a1200

080051dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10b      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d075      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005210:	4b91      	ldr	r3, [pc, #580]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005216:	f7fe fcef 	bl	8003bf8 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800521e:	f7fe fceb 	bl	8003bf8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e189      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005230:	4b8a      	ldr	r3, [pc, #552]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	019a      	lsls	r2, r3, #6
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	071b      	lsls	r3, r3, #28
 8005254:	4981      	ldr	r1, [pc, #516]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005268:	4b7c      	ldr	r3, [pc, #496]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526e:	0f1b      	lsrs	r3, r3, #28
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	019a      	lsls	r2, r3, #6
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	431a      	orrs	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	071b      	lsls	r3, r3, #28
 8005288:	4974      	ldr	r1, [pc, #464]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005290:	4b72      	ldr	r3, [pc, #456]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005296:	f023 021f 	bic.w	r2, r3, #31
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	3b01      	subs	r3, #1
 80052a0:	496e      	ldr	r1, [pc, #440]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	019a      	lsls	r2, r3, #6
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	071b      	lsls	r3, r3, #28
 80052c8:	4964      	ldr	r1, [pc, #400]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052d0:	4b61      	ldr	r3, [pc, #388]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052d6:	f7fe fc8f 	bl	8003bf8 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052de:	f7fe fc8b 	bl	8003bf8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e129      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f0:	4b5a      	ldr	r3, [pc, #360]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f0      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d079      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005314:	4b52      	ldr	r3, [pc, #328]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800531a:	f7fe fc6d 	bl	8003bf8 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005322:	f7fe fc69 	bl	8003bf8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e107      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005334:	4b49      	ldr	r3, [pc, #292]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005340:	d0ef      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800534e:	4b43      	ldr	r3, [pc, #268]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	0f1b      	lsrs	r3, r3, #28
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	019a      	lsls	r2, r3, #6
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	061b      	lsls	r3, r3, #24
 8005368:	431a      	orrs	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	071b      	lsls	r3, r3, #28
 800536e:	493b      	ldr	r1, [pc, #236]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005370:	4313      	orrs	r3, r2
 8005372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005376:	4b39      	ldr	r3, [pc, #228]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	3b01      	subs	r3, #1
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4934      	ldr	r1, [pc, #208]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800538a:	4313      	orrs	r3, r2
 800538c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01e      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800539c:	4b2f      	ldr	r3, [pc, #188]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	0e1b      	lsrs	r3, r3, #24
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	019a      	lsls	r2, r3, #6
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	4927      	ldr	r1, [pc, #156]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	4922      	ldr	r1, [pc, #136]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053e0:	f7fe fc0a 	bl	8003bf8 <HAL_GetTick>
 80053e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80053e8:	f7fe fc06 	bl	8003bf8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0a4      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053fa:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005406:	d1ef      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0320 	and.w	r3, r3, #32
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 808b 	beq.w	800552c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	4a0f      	ldr	r2, [pc, #60]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005424:	6413      	str	r3, [r2, #64]	; 0x40
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800543e:	f7fe fbdb 	bl	8003bf8 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005444:	e010      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005446:	f7fe fbd7 	bl	8003bf8 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d909      	bls.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e075      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005458:	42470068 	.word	0x42470068
 800545c:	40023800 	.word	0x40023800
 8005460:	42470070 	.word	0x42470070
 8005464:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005468:	4b38      	ldr	r3, [pc, #224]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0e8      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005474:	4b36      	ldr	r3, [pc, #216]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	429a      	cmp	r2, r3
 8005490:	d028      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005492:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054a2:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d114      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fe fb9d 	bl	8003bf8 <HAL_GetTick>
 80054be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c0:	e00a      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c2:	f7fe fb99 	bl	8003bf8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e035      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0ee      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f0:	d10d      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005506:	4912      	ldr	r1, [pc, #72]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005508:	4313      	orrs	r3, r2
 800550a:	608b      	str	r3, [r1, #8]
 800550c:	e005      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005514:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005518:	6093      	str	r3, [r2, #8]
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800551c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005526:	490a      	ldr	r1, [pc, #40]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005528:	4313      	orrs	r3, r2
 800552a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005540:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40007000 	.word	0x40007000
 8005550:	40023800 	.word	0x40023800
 8005554:	42470e40 	.word	0x42470e40
 8005558:	424711e0 	.word	0x424711e0

0800555c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e01c      	b.n	80055a8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	795b      	ldrb	r3, [r3, #5]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fe f9c4 	bl	800390c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0204 	orr.w	r2, r2, #4
 8005598:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_RNG_GenerateRandomNumber+0x1a>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e044      	b.n	8005654 <HAL_RNG_GenerateRandomNumber+0xa4>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	795b      	ldrb	r3, [r3, #5]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d133      	bne.n	8005642 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fe fb0a 	bl	8003bf8 <HAL_GetTick>
 80055e4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055e6:	e018      	b.n	800561a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80055e8:	f7fe fb06 	bl	8003bf8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d911      	bls.n	800561a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d00a      	beq.n	800561a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e01c      	b.n	8005654 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d1df      	bne.n	80055e8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	715a      	strb	r2, [r3, #5]
 8005640:	e004      	b.n	800564c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2204      	movs	r2, #4
 8005646:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]

  return status;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e07b      	b.n	8005766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d108      	bne.n	8005688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800567e:	d009      	beq.n	8005694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	61da      	str	r2, [r3, #28]
 8005686:	e005      	b.n	8005694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fe f94e 	bl	8003950 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	ea42 0103 	orr.w	r1, r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	f003 0104 	and.w	r1, r3, #4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f003 0210 	and.w	r2, r3, #16
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01a      	b.n	80057b6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fe f921 	bl	80039e0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b088      	sub	sp, #32
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_SPI_Transmit+0x22>
 80057dc:	2302      	movs	r3, #2
 80057de:	e126      	b.n	8005a2e <HAL_SPI_Transmit+0x270>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057e8:	f7fe fa06 	bl	8003bf8 <HAL_GetTick>
 80057ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
 8005800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005802:	e10b      	b.n	8005a1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Transmit+0x52>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005814:	e102      	b.n	8005a1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2203      	movs	r2, #3
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d10f      	bne.n	800587e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d007      	beq.n	800589c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a4:	d14b      	bne.n	800593e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Transmit+0xf6>
 80058ae:	8afb      	ldrh	r3, [r7, #22]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d13e      	bne.n	8005932 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b8:	881a      	ldrh	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	1c9a      	adds	r2, r3, #2
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058d8:	e02b      	b.n	8005932 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d112      	bne.n	800590e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	881a      	ldrh	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	86da      	strh	r2, [r3, #54]	; 0x36
 800590c:	e011      	b.n	8005932 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590e:	f7fe f973 	bl	8003bf8 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d803      	bhi.n	8005926 <HAL_SPI_Transmit+0x168>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005924:	d102      	bne.n	800592c <HAL_SPI_Transmit+0x16e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005930:	e074      	b.n	8005a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1ce      	bne.n	80058da <HAL_SPI_Transmit+0x11c>
 800593c:	e04c      	b.n	80059d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0x18e>
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d140      	bne.n	80059ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005972:	e02c      	b.n	80059ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d113      	bne.n	80059aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	7812      	ldrb	r2, [r2, #0]
 800598e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	1c5a      	adds	r2, r3, #1
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599e:	b29b      	uxth	r3, r3
 80059a0:	3b01      	subs	r3, #1
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80059a8:	e011      	b.n	80059ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059aa:	f7fe f925 	bl	8003bf8 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d803      	bhi.n	80059c2 <HAL_SPI_Transmit+0x204>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059c0:	d102      	bne.n	80059c8 <HAL_SPI_Transmit+0x20a>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059cc:	e026      	b.n	8005a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1cd      	bne.n	8005974 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f8c1 	bl	8005b64 <SPI_EndRxTxTransaction>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e000      	b.n	8005a1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a44:	b2db      	uxtb	r3, r3
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a64:	f7fe f8c8 	bl	8003bf8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	1a9b      	subs	r3, r3, r2
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	4413      	add	r3, r2
 8005a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a74:	f7fe f8c0 	bl	8003bf8 <HAL_GetTick>
 8005a78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a7a:	4b39      	ldr	r3, [pc, #228]	; (8005b60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	0d1b      	lsrs	r3, r3, #20
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a8a:	e054      	b.n	8005b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a92:	d050      	beq.n	8005b36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a94:	f7fe f8b0 	bl	8003bf8 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d902      	bls.n	8005aaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d13d      	bne.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ab8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac2:	d111      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d004      	beq.n	8005ad8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ad6:	d107      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af0:	d10f      	bne.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e017      	b.n	8005b56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3b01      	subs	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	bf0c      	ite	eq
 8005b46:	2301      	moveq	r3, #1
 8005b48:	2300      	movne	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d19b      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000014 	.word	0x20000014

08005b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b70:	4b1b      	ldr	r3, [pc, #108]	; (8005be0 <SPI_EndRxTxTransaction+0x7c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a1b      	ldr	r2, [pc, #108]	; (8005be4 <SPI_EndRxTxTransaction+0x80>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	0d5b      	lsrs	r3, r3, #21
 8005b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8e:	d112      	bne.n	8005bb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff ff5a 	bl	8005a54 <SPI_WaitFlagStateUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e00f      	b.n	8005bd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bcc:	2b80      	cmp	r3, #128	; 0x80
 8005bce:	d0f2      	beq.n	8005bb6 <SPI_EndRxTxTransaction+0x52>
 8005bd0:	e000      	b.n	8005bd4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005bd2:	bf00      	nop
  }

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000014 	.word	0x20000014
 8005be4:	165e9f81 	.word	0x165e9f81

08005be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e041      	b.n	8005c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd ff04 	bl	8003a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3304      	adds	r3, #4
 8005c24:	4619      	mov	r1, r3
 8005c26:	4610      	mov	r0, r2
 8005c28:	f000 f82e 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a40      	ldr	r2, [pc, #256]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a3d      	ldr	r2, [pc, #244]	; (8005da0 <TIM_Base_SetConfig+0x118>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a3c      	ldr	r2, [pc, #240]	; (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a3b      	ldr	r2, [pc, #236]	; (8005da8 <TIM_Base_SetConfig+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a3a      	ldr	r2, [pc, #232]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2f      	ldr	r2, [pc, #188]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d02b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d027      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <TIM_Base_SetConfig+0x118>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d023      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <TIM_Base_SetConfig+0x11c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <TIM_Base_SetConfig+0x120>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a29      	ldr	r2, [pc, #164]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d017      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <TIM_Base_SetConfig+0x128>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <TIM_Base_SetConfig+0x130>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a25      	ldr	r2, [pc, #148]	; (8005dbc <TIM_Base_SetConfig+0x134>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <TIM_Base_SetConfig+0x138>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a23      	ldr	r2, [pc, #140]	; (8005dc4 <TIM_Base_SetConfig+0x13c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <TIM_Base_SetConfig+0x114>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_Base_SetConfig+0xf8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <TIM_Base_SetConfig+0x124>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d103      	bne.n	8005d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	615a      	str	r2, [r3, #20]
}
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800
 8005dbc:	40001800 	.word	0x40001800
 8005dc0:	40001c00 	.word	0x40001c00
 8005dc4:	40002000 	.word	0x40002000

08005dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e05a      	b.n	8005e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d022      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d01d      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d018      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1a      	ldr	r2, [pc, #104]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00e      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d004      	beq.n	8005e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a15      	ldr	r2, [pc, #84]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10c      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40000400 	.word	0x40000400
 8005eac:	40000800 	.word	0x40000800
 8005eb0:	40000c00 	.word	0x40000c00
 8005eb4:	40010400 	.word	0x40010400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40001800 	.word	0x40001800

08005ec0 <memset>:
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d100      	bne.n	8005eca <memset+0xa>
 8005ec8:	4770      	bx	lr
 8005eca:	f803 1b01 	strb.w	r1, [r3], #1
 8005ece:	e7f9      	b.n	8005ec4 <memset+0x4>

08005ed0 <__libc_init_array>:
 8005ed0:	b570      	push	{r4, r5, r6, lr}
 8005ed2:	4d0d      	ldr	r5, [pc, #52]	; (8005f08 <__libc_init_array+0x38>)
 8005ed4:	4c0d      	ldr	r4, [pc, #52]	; (8005f0c <__libc_init_array+0x3c>)
 8005ed6:	1b64      	subs	r4, r4, r5
 8005ed8:	10a4      	asrs	r4, r4, #2
 8005eda:	2600      	movs	r6, #0
 8005edc:	42a6      	cmp	r6, r4
 8005ede:	d109      	bne.n	8005ef4 <__libc_init_array+0x24>
 8005ee0:	4d0b      	ldr	r5, [pc, #44]	; (8005f10 <__libc_init_array+0x40>)
 8005ee2:	4c0c      	ldr	r4, [pc, #48]	; (8005f14 <__libc_init_array+0x44>)
 8005ee4:	f001 f858 	bl	8006f98 <_init>
 8005ee8:	1b64      	subs	r4, r4, r5
 8005eea:	10a4      	asrs	r4, r4, #2
 8005eec:	2600      	movs	r6, #0
 8005eee:	42a6      	cmp	r6, r4
 8005ef0:	d105      	bne.n	8005efe <__libc_init_array+0x2e>
 8005ef2:	bd70      	pop	{r4, r5, r6, pc}
 8005ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef8:	4798      	blx	r3
 8005efa:	3601      	adds	r6, #1
 8005efc:	e7ee      	b.n	8005edc <__libc_init_array+0xc>
 8005efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f02:	4798      	blx	r3
 8005f04:	3601      	adds	r6, #1
 8005f06:	e7f2      	b.n	8005eee <__libc_init_array+0x1e>
 8005f08:	08008370 	.word	0x08008370
 8005f0c:	08008370 	.word	0x08008370
 8005f10:	08008370 	.word	0x08008370
 8005f14:	08008374 	.word	0x08008374

08005f18 <sin>:
 8005f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f1a:	ec53 2b10 	vmov	r2, r3, d0
 8005f1e:	4828      	ldr	r0, [pc, #160]	; (8005fc0 <sin+0xa8>)
 8005f20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f24:	4281      	cmp	r1, r0
 8005f26:	dc07      	bgt.n	8005f38 <sin+0x20>
 8005f28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005fb8 <sin+0xa0>
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	b005      	add	sp, #20
 8005f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f34:	f000 be68 	b.w	8006c08 <__kernel_sin>
 8005f38:	4822      	ldr	r0, [pc, #136]	; (8005fc4 <sin+0xac>)
 8005f3a:	4281      	cmp	r1, r0
 8005f3c:	dd09      	ble.n	8005f52 <sin+0x3a>
 8005f3e:	ee10 0a10 	vmov	r0, s0
 8005f42:	4619      	mov	r1, r3
 8005f44:	f7fa f958 	bl	80001f8 <__aeabi_dsub>
 8005f48:	ec41 0b10 	vmov	d0, r0, r1
 8005f4c:	b005      	add	sp, #20
 8005f4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f52:	4668      	mov	r0, sp
 8005f54:	f000 f838 	bl	8005fc8 <__ieee754_rem_pio2>
 8005f58:	f000 0003 	and.w	r0, r0, #3
 8005f5c:	2801      	cmp	r0, #1
 8005f5e:	d00c      	beq.n	8005f7a <sin+0x62>
 8005f60:	2802      	cmp	r0, #2
 8005f62:	d011      	beq.n	8005f88 <sin+0x70>
 8005f64:	b9f0      	cbnz	r0, 8005fa4 <sin+0x8c>
 8005f66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f6a:	ed9d 0b00 	vldr	d0, [sp]
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f000 fe4a 	bl	8006c08 <__kernel_sin>
 8005f74:	ec51 0b10 	vmov	r0, r1, d0
 8005f78:	e7e6      	b.n	8005f48 <sin+0x30>
 8005f7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f7e:	ed9d 0b00 	vldr	d0, [sp]
 8005f82:	f000 fd79 	bl	8006a78 <__kernel_cos>
 8005f86:	e7f5      	b.n	8005f74 <sin+0x5c>
 8005f88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f8c:	ed9d 0b00 	vldr	d0, [sp]
 8005f90:	2001      	movs	r0, #1
 8005f92:	f000 fe39 	bl	8006c08 <__kernel_sin>
 8005f96:	ec53 2b10 	vmov	r2, r3, d0
 8005f9a:	ee10 0a10 	vmov	r0, s0
 8005f9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005fa2:	e7d1      	b.n	8005f48 <sin+0x30>
 8005fa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005fa8:	ed9d 0b00 	vldr	d0, [sp]
 8005fac:	f000 fd64 	bl	8006a78 <__kernel_cos>
 8005fb0:	e7f1      	b.n	8005f96 <sin+0x7e>
 8005fb2:	bf00      	nop
 8005fb4:	f3af 8000 	nop.w
	...
 8005fc0:	3fe921fb 	.word	0x3fe921fb
 8005fc4:	7fefffff 	.word	0x7fefffff

08005fc8 <__ieee754_rem_pio2>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	ed2d 8b02 	vpush	{d8}
 8005fd0:	ec55 4b10 	vmov	r4, r5, d0
 8005fd4:	4bca      	ldr	r3, [pc, #808]	; (8006300 <__ieee754_rem_pio2+0x338>)
 8005fd6:	b08b      	sub	sp, #44	; 0x2c
 8005fd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005fdc:	4598      	cmp	r8, r3
 8005fde:	4682      	mov	sl, r0
 8005fe0:	9502      	str	r5, [sp, #8]
 8005fe2:	dc08      	bgt.n	8005ff6 <__ieee754_rem_pio2+0x2e>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	ed80 0b00 	vstr	d0, [r0]
 8005fec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ff0:	f04f 0b00 	mov.w	fp, #0
 8005ff4:	e028      	b.n	8006048 <__ieee754_rem_pio2+0x80>
 8005ff6:	4bc3      	ldr	r3, [pc, #780]	; (8006304 <__ieee754_rem_pio2+0x33c>)
 8005ff8:	4598      	cmp	r8, r3
 8005ffa:	dc78      	bgt.n	80060ee <__ieee754_rem_pio2+0x126>
 8005ffc:	9b02      	ldr	r3, [sp, #8]
 8005ffe:	4ec2      	ldr	r6, [pc, #776]	; (8006308 <__ieee754_rem_pio2+0x340>)
 8006000:	2b00      	cmp	r3, #0
 8006002:	ee10 0a10 	vmov	r0, s0
 8006006:	a3b0      	add	r3, pc, #704	; (adr r3, 80062c8 <__ieee754_rem_pio2+0x300>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	4629      	mov	r1, r5
 800600e:	dd39      	ble.n	8006084 <__ieee754_rem_pio2+0xbc>
 8006010:	f7fa f8f2 	bl	80001f8 <__aeabi_dsub>
 8006014:	45b0      	cmp	r8, r6
 8006016:	4604      	mov	r4, r0
 8006018:	460d      	mov	r5, r1
 800601a:	d01b      	beq.n	8006054 <__ieee754_rem_pio2+0x8c>
 800601c:	a3ac      	add	r3, pc, #688	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x308>)
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	f7fa f8e9 	bl	80001f8 <__aeabi_dsub>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	e9ca 2300 	strd	r2, r3, [sl]
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f7fa f8e1 	bl	80001f8 <__aeabi_dsub>
 8006036:	a3a6      	add	r3, pc, #664	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x308>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa f8dc 	bl	80001f8 <__aeabi_dsub>
 8006040:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006044:	f04f 0b01 	mov.w	fp, #1
 8006048:	4658      	mov	r0, fp
 800604a:	b00b      	add	sp, #44	; 0x2c
 800604c:	ecbd 8b02 	vpop	{d8}
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	a3a0      	add	r3, pc, #640	; (adr r3, 80062d8 <__ieee754_rem_pio2+0x310>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f8cd 	bl	80001f8 <__aeabi_dsub>
 800605e:	a3a0      	add	r3, pc, #640	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x318>)
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	4604      	mov	r4, r0
 8006066:	460d      	mov	r5, r1
 8006068:	f7fa f8c6 	bl	80001f8 <__aeabi_dsub>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9ca 2300 	strd	r2, r3, [sl]
 8006074:	4620      	mov	r0, r4
 8006076:	4629      	mov	r1, r5
 8006078:	f7fa f8be 	bl	80001f8 <__aeabi_dsub>
 800607c:	a398      	add	r3, pc, #608	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x318>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	e7db      	b.n	800603c <__ieee754_rem_pio2+0x74>
 8006084:	f7fa f8ba 	bl	80001fc <__adddf3>
 8006088:	45b0      	cmp	r8, r6
 800608a:	4604      	mov	r4, r0
 800608c:	460d      	mov	r5, r1
 800608e:	d016      	beq.n	80060be <__ieee754_rem_pio2+0xf6>
 8006090:	a38f      	add	r3, pc, #572	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x308>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa f8b1 	bl	80001fc <__adddf3>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	e9ca 2300 	strd	r2, r3, [sl]
 80060a2:	4620      	mov	r0, r4
 80060a4:	4629      	mov	r1, r5
 80060a6:	f7fa f8a7 	bl	80001f8 <__aeabi_dsub>
 80060aa:	a389      	add	r3, pc, #548	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x308>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa f8a4 	bl	80001fc <__adddf3>
 80060b4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80060b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80060bc:	e7c4      	b.n	8006048 <__ieee754_rem_pio2+0x80>
 80060be:	a386      	add	r3, pc, #536	; (adr r3, 80062d8 <__ieee754_rem_pio2+0x310>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f89a 	bl	80001fc <__adddf3>
 80060c8:	a385      	add	r3, pc, #532	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x318>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	4604      	mov	r4, r0
 80060d0:	460d      	mov	r5, r1
 80060d2:	f7fa f893 	bl	80001fc <__adddf3>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	e9ca 2300 	strd	r2, r3, [sl]
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa f889 	bl	80001f8 <__aeabi_dsub>
 80060e6:	a37e      	add	r3, pc, #504	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x318>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	e7e0      	b.n	80060b0 <__ieee754_rem_pio2+0xe8>
 80060ee:	4b87      	ldr	r3, [pc, #540]	; (800630c <__ieee754_rem_pio2+0x344>)
 80060f0:	4598      	cmp	r8, r3
 80060f2:	f300 80d8 	bgt.w	80062a6 <__ieee754_rem_pio2+0x2de>
 80060f6:	f000 fe45 	bl	8006d84 <fabs>
 80060fa:	ec55 4b10 	vmov	r4, r5, d0
 80060fe:	ee10 0a10 	vmov	r0, s0
 8006102:	a379      	add	r3, pc, #484	; (adr r3, 80062e8 <__ieee754_rem_pio2+0x320>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	4629      	mov	r1, r5
 800610a:	f7fa fa2d 	bl	8000568 <__aeabi_dmul>
 800610e:	4b80      	ldr	r3, [pc, #512]	; (8006310 <__ieee754_rem_pio2+0x348>)
 8006110:	2200      	movs	r2, #0
 8006112:	f7fa f873 	bl	80001fc <__adddf3>
 8006116:	f7fa fcc1 	bl	8000a9c <__aeabi_d2iz>
 800611a:	4683      	mov	fp, r0
 800611c:	f7fa f9ba 	bl	8000494 <__aeabi_i2d>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	ec43 2b18 	vmov	d8, r2, r3
 8006128:	a367      	add	r3, pc, #412	; (adr r3, 80062c8 <__ieee754_rem_pio2+0x300>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa1b 	bl	8000568 <__aeabi_dmul>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4620      	mov	r0, r4
 8006138:	4629      	mov	r1, r5
 800613a:	f7fa f85d 	bl	80001f8 <__aeabi_dsub>
 800613e:	a364      	add	r3, pc, #400	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x308>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	4606      	mov	r6, r0
 8006146:	460f      	mov	r7, r1
 8006148:	ec51 0b18 	vmov	r0, r1, d8
 800614c:	f7fa fa0c 	bl	8000568 <__aeabi_dmul>
 8006150:	f1bb 0f1f 	cmp.w	fp, #31
 8006154:	4604      	mov	r4, r0
 8006156:	460d      	mov	r5, r1
 8006158:	dc0d      	bgt.n	8006176 <__ieee754_rem_pio2+0x1ae>
 800615a:	4b6e      	ldr	r3, [pc, #440]	; (8006314 <__ieee754_rem_pio2+0x34c>)
 800615c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	4543      	cmp	r3, r8
 8006166:	d006      	beq.n	8006176 <__ieee754_rem_pio2+0x1ae>
 8006168:	4622      	mov	r2, r4
 800616a:	462b      	mov	r3, r5
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa f842 	bl	80001f8 <__aeabi_dsub>
 8006174:	e00e      	b.n	8006194 <__ieee754_rem_pio2+0x1cc>
 8006176:	462b      	mov	r3, r5
 8006178:	4622      	mov	r2, r4
 800617a:	4630      	mov	r0, r6
 800617c:	4639      	mov	r1, r7
 800617e:	f7fa f83b 	bl	80001f8 <__aeabi_dsub>
 8006182:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006186:	9303      	str	r3, [sp, #12]
 8006188:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800618c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006190:	2b10      	cmp	r3, #16
 8006192:	dc02      	bgt.n	800619a <__ieee754_rem_pio2+0x1d2>
 8006194:	e9ca 0100 	strd	r0, r1, [sl]
 8006198:	e039      	b.n	800620e <__ieee754_rem_pio2+0x246>
 800619a:	a34f      	add	r3, pc, #316	; (adr r3, 80062d8 <__ieee754_rem_pio2+0x310>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	ec51 0b18 	vmov	r0, r1, d8
 80061a4:	f7fa f9e0 	bl	8000568 <__aeabi_dmul>
 80061a8:	4604      	mov	r4, r0
 80061aa:	460d      	mov	r5, r1
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa f820 	bl	80001f8 <__aeabi_dsub>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4680      	mov	r8, r0
 80061be:	4689      	mov	r9, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f818 	bl	80001f8 <__aeabi_dsub>
 80061c8:	4622      	mov	r2, r4
 80061ca:	462b      	mov	r3, r5
 80061cc:	f7fa f814 	bl	80001f8 <__aeabi_dsub>
 80061d0:	a343      	add	r3, pc, #268	; (adr r3, 80062e0 <__ieee754_rem_pio2+0x318>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	4604      	mov	r4, r0
 80061d8:	460d      	mov	r5, r1
 80061da:	ec51 0b18 	vmov	r0, r1, d8
 80061de:	f7fa f9c3 	bl	8000568 <__aeabi_dmul>
 80061e2:	4622      	mov	r2, r4
 80061e4:	462b      	mov	r3, r5
 80061e6:	f7fa f807 	bl	80001f8 <__aeabi_dsub>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7f9 ffff 	bl	80001f8 <__aeabi_dsub>
 80061fa:	9a03      	ldr	r2, [sp, #12]
 80061fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b31      	cmp	r3, #49	; 0x31
 8006204:	dc24      	bgt.n	8006250 <__ieee754_rem_pio2+0x288>
 8006206:	e9ca 0100 	strd	r0, r1, [sl]
 800620a:	4646      	mov	r6, r8
 800620c:	464f      	mov	r7, r9
 800620e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006212:	4630      	mov	r0, r6
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	4639      	mov	r1, r7
 800621a:	f7f9 ffed 	bl	80001f8 <__aeabi_dsub>
 800621e:	462b      	mov	r3, r5
 8006220:	4622      	mov	r2, r4
 8006222:	f7f9 ffe9 	bl	80001f8 <__aeabi_dsub>
 8006226:	9b02      	ldr	r3, [sp, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800622e:	f6bf af0b 	bge.w	8006048 <__ieee754_rem_pio2+0x80>
 8006232:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006236:	f8ca 3004 	str.w	r3, [sl, #4]
 800623a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800623e:	f8ca 8000 	str.w	r8, [sl]
 8006242:	f8ca 0008 	str.w	r0, [sl, #8]
 8006246:	f8ca 300c 	str.w	r3, [sl, #12]
 800624a:	f1cb 0b00 	rsb	fp, fp, #0
 800624e:	e6fb      	b.n	8006048 <__ieee754_rem_pio2+0x80>
 8006250:	a327      	add	r3, pc, #156	; (adr r3, 80062f0 <__ieee754_rem_pio2+0x328>)
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	ec51 0b18 	vmov	r0, r1, d8
 800625a:	f7fa f985 	bl	8000568 <__aeabi_dmul>
 800625e:	4604      	mov	r4, r0
 8006260:	460d      	mov	r5, r1
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f7f9 ffc5 	bl	80001f8 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4606      	mov	r6, r0
 8006274:	460f      	mov	r7, r1
 8006276:	4640      	mov	r0, r8
 8006278:	4649      	mov	r1, r9
 800627a:	f7f9 ffbd 	bl	80001f8 <__aeabi_dsub>
 800627e:	4622      	mov	r2, r4
 8006280:	462b      	mov	r3, r5
 8006282:	f7f9 ffb9 	bl	80001f8 <__aeabi_dsub>
 8006286:	a31c      	add	r3, pc, #112	; (adr r3, 80062f8 <__ieee754_rem_pio2+0x330>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	4604      	mov	r4, r0
 800628e:	460d      	mov	r5, r1
 8006290:	ec51 0b18 	vmov	r0, r1, d8
 8006294:	f7fa f968 	bl	8000568 <__aeabi_dmul>
 8006298:	4622      	mov	r2, r4
 800629a:	462b      	mov	r3, r5
 800629c:	f7f9 ffac 	bl	80001f8 <__aeabi_dsub>
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
 80062a4:	e760      	b.n	8006168 <__ieee754_rem_pio2+0x1a0>
 80062a6:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <__ieee754_rem_pio2+0x350>)
 80062a8:	4598      	cmp	r8, r3
 80062aa:	dd37      	ble.n	800631c <__ieee754_rem_pio2+0x354>
 80062ac:	ee10 2a10 	vmov	r2, s0
 80062b0:	462b      	mov	r3, r5
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ff9f 	bl	80001f8 <__aeabi_dsub>
 80062ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80062be:	e9ca 0100 	strd	r0, r1, [sl]
 80062c2:	e695      	b.n	8005ff0 <__ieee754_rem_pio2+0x28>
 80062c4:	f3af 8000 	nop.w
 80062c8:	54400000 	.word	0x54400000
 80062cc:	3ff921fb 	.word	0x3ff921fb
 80062d0:	1a626331 	.word	0x1a626331
 80062d4:	3dd0b461 	.word	0x3dd0b461
 80062d8:	1a600000 	.word	0x1a600000
 80062dc:	3dd0b461 	.word	0x3dd0b461
 80062e0:	2e037073 	.word	0x2e037073
 80062e4:	3ba3198a 	.word	0x3ba3198a
 80062e8:	6dc9c883 	.word	0x6dc9c883
 80062ec:	3fe45f30 	.word	0x3fe45f30
 80062f0:	2e000000 	.word	0x2e000000
 80062f4:	3ba3198a 	.word	0x3ba3198a
 80062f8:	252049c1 	.word	0x252049c1
 80062fc:	397b839a 	.word	0x397b839a
 8006300:	3fe921fb 	.word	0x3fe921fb
 8006304:	4002d97b 	.word	0x4002d97b
 8006308:	3ff921fb 	.word	0x3ff921fb
 800630c:	413921fb 	.word	0x413921fb
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	08008190 	.word	0x08008190
 8006318:	7fefffff 	.word	0x7fefffff
 800631c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006320:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006324:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006328:	4620      	mov	r0, r4
 800632a:	460d      	mov	r5, r1
 800632c:	f7fa fbb6 	bl	8000a9c <__aeabi_d2iz>
 8006330:	f7fa f8b0 	bl	8000494 <__aeabi_i2d>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4620      	mov	r0, r4
 800633a:	4629      	mov	r1, r5
 800633c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006340:	f7f9 ff5a 	bl	80001f8 <__aeabi_dsub>
 8006344:	4b21      	ldr	r3, [pc, #132]	; (80063cc <__ieee754_rem_pio2+0x404>)
 8006346:	2200      	movs	r2, #0
 8006348:	f7fa f90e 	bl	8000568 <__aeabi_dmul>
 800634c:	460d      	mov	r5, r1
 800634e:	4604      	mov	r4, r0
 8006350:	f7fa fba4 	bl	8000a9c <__aeabi_d2iz>
 8006354:	f7fa f89e 	bl	8000494 <__aeabi_i2d>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4620      	mov	r0, r4
 800635e:	4629      	mov	r1, r5
 8006360:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006364:	f7f9 ff48 	bl	80001f8 <__aeabi_dsub>
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <__ieee754_rem_pio2+0x404>)
 800636a:	2200      	movs	r2, #0
 800636c:	f7fa f8fc 	bl	8000568 <__aeabi_dmul>
 8006370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006374:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006378:	2703      	movs	r7, #3
 800637a:	2400      	movs	r4, #0
 800637c:	2500      	movs	r5, #0
 800637e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006382:	4622      	mov	r2, r4
 8006384:	462b      	mov	r3, r5
 8006386:	46b9      	mov	r9, r7
 8006388:	3f01      	subs	r7, #1
 800638a:	f7fa fb55 	bl	8000a38 <__aeabi_dcmpeq>
 800638e:	2800      	cmp	r0, #0
 8006390:	d1f5      	bne.n	800637e <__ieee754_rem_pio2+0x3b6>
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <__ieee754_rem_pio2+0x408>)
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	2302      	movs	r3, #2
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4632      	mov	r2, r6
 800639c:	464b      	mov	r3, r9
 800639e:	4651      	mov	r1, sl
 80063a0:	a804      	add	r0, sp, #16
 80063a2:	f000 f819 	bl	80063d8 <__kernel_rem_pio2>
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	4683      	mov	fp, r0
 80063ac:	f6bf ae4c 	bge.w	8006048 <__ieee754_rem_pio2+0x80>
 80063b0:	e9da 2100 	ldrd	r2, r1, [sl]
 80063b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063b8:	e9ca 2300 	strd	r2, r3, [sl]
 80063bc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80063c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063c4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80063c8:	e73f      	b.n	800624a <__ieee754_rem_pio2+0x282>
 80063ca:	bf00      	nop
 80063cc:	41700000 	.word	0x41700000
 80063d0:	08008210 	.word	0x08008210
 80063d4:	00000000 	.word	0x00000000

080063d8 <__kernel_rem_pio2>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b02 	vpush	{d8}
 80063e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80063e4:	f112 0f14 	cmn.w	r2, #20
 80063e8:	9306      	str	r3, [sp, #24]
 80063ea:	9104      	str	r1, [sp, #16]
 80063ec:	4bc2      	ldr	r3, [pc, #776]	; (80066f8 <__kernel_rem_pio2+0x320>)
 80063ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80063f0:	9009      	str	r0, [sp, #36]	; 0x24
 80063f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	9b06      	ldr	r3, [sp, #24]
 80063fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80063fe:	bfa8      	it	ge
 8006400:	1ed4      	subge	r4, r2, #3
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	bfb2      	itee	lt
 8006406:	2400      	movlt	r4, #0
 8006408:	2318      	movge	r3, #24
 800640a:	fb94 f4f3 	sdivge	r4, r4, r3
 800640e:	f06f 0317 	mvn.w	r3, #23
 8006412:	fb04 3303 	mla	r3, r4, r3, r3
 8006416:	eb03 0a02 	add.w	sl, r3, r2
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	9a05      	ldr	r2, [sp, #20]
 800641e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80066e8 <__kernel_rem_pio2+0x310>
 8006422:	eb03 0802 	add.w	r8, r3, r2
 8006426:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006428:	1aa7      	subs	r7, r4, r2
 800642a:	ae20      	add	r6, sp, #128	; 0x80
 800642c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006430:	2500      	movs	r5, #0
 8006432:	4545      	cmp	r5, r8
 8006434:	dd13      	ble.n	800645e <__kernel_rem_pio2+0x86>
 8006436:	9b06      	ldr	r3, [sp, #24]
 8006438:	aa20      	add	r2, sp, #128	; 0x80
 800643a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800643e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	9b00      	ldr	r3, [sp, #0]
 8006448:	4598      	cmp	r8, r3
 800644a:	dc31      	bgt.n	80064b0 <__kernel_rem_pio2+0xd8>
 800644c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80066e8 <__kernel_rem_pio2+0x310>
 8006450:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006454:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006458:	462f      	mov	r7, r5
 800645a:	2600      	movs	r6, #0
 800645c:	e01b      	b.n	8006496 <__kernel_rem_pio2+0xbe>
 800645e:	42ef      	cmn	r7, r5
 8006460:	d407      	bmi.n	8006472 <__kernel_rem_pio2+0x9a>
 8006462:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006466:	f7fa f815 	bl	8000494 <__aeabi_i2d>
 800646a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800646e:	3501      	adds	r5, #1
 8006470:	e7df      	b.n	8006432 <__kernel_rem_pio2+0x5a>
 8006472:	ec51 0b18 	vmov	r0, r1, d8
 8006476:	e7f8      	b.n	800646a <__kernel_rem_pio2+0x92>
 8006478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006480:	f7fa f872 	bl	8000568 <__aeabi_dmul>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800648c:	f7f9 feb6 	bl	80001fc <__adddf3>
 8006490:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006494:	3601      	adds	r6, #1
 8006496:	9b05      	ldr	r3, [sp, #20]
 8006498:	429e      	cmp	r6, r3
 800649a:	f1a7 0708 	sub.w	r7, r7, #8
 800649e:	ddeb      	ble.n	8006478 <__kernel_rem_pio2+0xa0>
 80064a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064a4:	f108 0801 	add.w	r8, r8, #1
 80064a8:	ecab 7b02 	vstmia	fp!, {d7}
 80064ac:	3508      	adds	r5, #8
 80064ae:	e7ca      	b.n	8006446 <__kernel_rem_pio2+0x6e>
 80064b0:	9b00      	ldr	r3, [sp, #0]
 80064b2:	aa0c      	add	r2, sp, #48	; 0x30
 80064b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80064bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80064c0:	9c00      	ldr	r4, [sp, #0]
 80064c2:	930a      	str	r3, [sp, #40]	; 0x28
 80064c4:	00e3      	lsls	r3, r4, #3
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	ab98      	add	r3, sp, #608	; 0x260
 80064ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80064d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80064d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80064d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80064dc:	46c3      	mov	fp, r8
 80064de:	46a1      	mov	r9, r4
 80064e0:	f1b9 0f00 	cmp.w	r9, #0
 80064e4:	f1a5 0508 	sub.w	r5, r5, #8
 80064e8:	dc77      	bgt.n	80065da <__kernel_rem_pio2+0x202>
 80064ea:	ec47 6b10 	vmov	d0, r6, r7
 80064ee:	4650      	mov	r0, sl
 80064f0:	f000 fc52 	bl	8006d98 <scalbn>
 80064f4:	ec57 6b10 	vmov	r6, r7, d0
 80064f8:	2200      	movs	r2, #0
 80064fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80064fe:	ee10 0a10 	vmov	r0, s0
 8006502:	4639      	mov	r1, r7
 8006504:	f7fa f830 	bl	8000568 <__aeabi_dmul>
 8006508:	ec41 0b10 	vmov	d0, r0, r1
 800650c:	f000 fcc4 	bl	8006e98 <floor>
 8006510:	4b7a      	ldr	r3, [pc, #488]	; (80066fc <__kernel_rem_pio2+0x324>)
 8006512:	ec51 0b10 	vmov	r0, r1, d0
 8006516:	2200      	movs	r2, #0
 8006518:	f7fa f826 	bl	8000568 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4630      	mov	r0, r6
 8006522:	4639      	mov	r1, r7
 8006524:	f7f9 fe68 	bl	80001f8 <__aeabi_dsub>
 8006528:	460f      	mov	r7, r1
 800652a:	4606      	mov	r6, r0
 800652c:	f7fa fab6 	bl	8000a9c <__aeabi_d2iz>
 8006530:	9002      	str	r0, [sp, #8]
 8006532:	f7f9 ffaf 	bl	8000494 <__aeabi_i2d>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f7f9 fe5b 	bl	80001f8 <__aeabi_dsub>
 8006542:	f1ba 0f00 	cmp.w	sl, #0
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	dd6d      	ble.n	8006628 <__kernel_rem_pio2+0x250>
 800654c:	1e61      	subs	r1, r4, #1
 800654e:	ab0c      	add	r3, sp, #48	; 0x30
 8006550:	9d02      	ldr	r5, [sp, #8]
 8006552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006556:	f1ca 0018 	rsb	r0, sl, #24
 800655a:	fa43 f200 	asr.w	r2, r3, r0
 800655e:	4415      	add	r5, r2
 8006560:	4082      	lsls	r2, r0
 8006562:	1a9b      	subs	r3, r3, r2
 8006564:	aa0c      	add	r2, sp, #48	; 0x30
 8006566:	9502      	str	r5, [sp, #8]
 8006568:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800656c:	f1ca 0217 	rsb	r2, sl, #23
 8006570:	fa43 fb02 	asr.w	fp, r3, r2
 8006574:	f1bb 0f00 	cmp.w	fp, #0
 8006578:	dd65      	ble.n	8006646 <__kernel_rem_pio2+0x26e>
 800657a:	9b02      	ldr	r3, [sp, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	3301      	adds	r3, #1
 8006580:	9302      	str	r3, [sp, #8]
 8006582:	4615      	mov	r5, r2
 8006584:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006588:	4294      	cmp	r4, r2
 800658a:	f300 809f 	bgt.w	80066cc <__kernel_rem_pio2+0x2f4>
 800658e:	f1ba 0f00 	cmp.w	sl, #0
 8006592:	dd07      	ble.n	80065a4 <__kernel_rem_pio2+0x1cc>
 8006594:	f1ba 0f01 	cmp.w	sl, #1
 8006598:	f000 80c1 	beq.w	800671e <__kernel_rem_pio2+0x346>
 800659c:	f1ba 0f02 	cmp.w	sl, #2
 80065a0:	f000 80c7 	beq.w	8006732 <__kernel_rem_pio2+0x35a>
 80065a4:	f1bb 0f02 	cmp.w	fp, #2
 80065a8:	d14d      	bne.n	8006646 <__kernel_rem_pio2+0x26e>
 80065aa:	4632      	mov	r2, r6
 80065ac:	463b      	mov	r3, r7
 80065ae:	4954      	ldr	r1, [pc, #336]	; (8006700 <__kernel_rem_pio2+0x328>)
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7f9 fe21 	bl	80001f8 <__aeabi_dsub>
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	d043      	beq.n	8006646 <__kernel_rem_pio2+0x26e>
 80065be:	4650      	mov	r0, sl
 80065c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80066f0 <__kernel_rem_pio2+0x318>
 80065c4:	f000 fbe8 	bl	8006d98 <scalbn>
 80065c8:	4630      	mov	r0, r6
 80065ca:	4639      	mov	r1, r7
 80065cc:	ec53 2b10 	vmov	r2, r3, d0
 80065d0:	f7f9 fe12 	bl	80001f8 <__aeabi_dsub>
 80065d4:	4606      	mov	r6, r0
 80065d6:	460f      	mov	r7, r1
 80065d8:	e035      	b.n	8006646 <__kernel_rem_pio2+0x26e>
 80065da:	4b4a      	ldr	r3, [pc, #296]	; (8006704 <__kernel_rem_pio2+0x32c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 ffc1 	bl	8000568 <__aeabi_dmul>
 80065e6:	f7fa fa59 	bl	8000a9c <__aeabi_d2iz>
 80065ea:	f7f9 ff53 	bl	8000494 <__aeabi_i2d>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	ec43 2b18 	vmov	d8, r2, r3
 80065f6:	4b44      	ldr	r3, [pc, #272]	; (8006708 <__kernel_rem_pio2+0x330>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	f7f9 ffb5 	bl	8000568 <__aeabi_dmul>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4630      	mov	r0, r6
 8006604:	4639      	mov	r1, r7
 8006606:	f7f9 fdf7 	bl	80001f8 <__aeabi_dsub>
 800660a:	f7fa fa47 	bl	8000a9c <__aeabi_d2iz>
 800660e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006612:	f84b 0b04 	str.w	r0, [fp], #4
 8006616:	ec51 0b18 	vmov	r0, r1, d8
 800661a:	f7f9 fdef 	bl	80001fc <__adddf3>
 800661e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	e75b      	b.n	80064e0 <__kernel_rem_pio2+0x108>
 8006628:	d106      	bne.n	8006638 <__kernel_rem_pio2+0x260>
 800662a:	1e63      	subs	r3, r4, #1
 800662c:	aa0c      	add	r2, sp, #48	; 0x30
 800662e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006632:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006636:	e79d      	b.n	8006574 <__kernel_rem_pio2+0x19c>
 8006638:	4b34      	ldr	r3, [pc, #208]	; (800670c <__kernel_rem_pio2+0x334>)
 800663a:	2200      	movs	r2, #0
 800663c:	f7fa fa1a 	bl	8000a74 <__aeabi_dcmpge>
 8006640:	2800      	cmp	r0, #0
 8006642:	d140      	bne.n	80066c6 <__kernel_rem_pio2+0x2ee>
 8006644:	4683      	mov	fp, r0
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7fa f9f3 	bl	8000a38 <__aeabi_dcmpeq>
 8006652:	2800      	cmp	r0, #0
 8006654:	f000 80c1 	beq.w	80067da <__kernel_rem_pio2+0x402>
 8006658:	1e65      	subs	r5, r4, #1
 800665a:	462b      	mov	r3, r5
 800665c:	2200      	movs	r2, #0
 800665e:	9900      	ldr	r1, [sp, #0]
 8006660:	428b      	cmp	r3, r1
 8006662:	da6d      	bge.n	8006740 <__kernel_rem_pio2+0x368>
 8006664:	2a00      	cmp	r2, #0
 8006666:	f000 808a 	beq.w	800677e <__kernel_rem_pio2+0x3a6>
 800666a:	ab0c      	add	r3, sp, #48	; 0x30
 800666c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006670:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80ae 	beq.w	80067d6 <__kernel_rem_pio2+0x3fe>
 800667a:	4650      	mov	r0, sl
 800667c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80066f0 <__kernel_rem_pio2+0x318>
 8006680:	f000 fb8a 	bl	8006d98 <scalbn>
 8006684:	1c6b      	adds	r3, r5, #1
 8006686:	00da      	lsls	r2, r3, #3
 8006688:	9205      	str	r2, [sp, #20]
 800668a:	ec57 6b10 	vmov	r6, r7, d0
 800668e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006690:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8006704 <__kernel_rem_pio2+0x32c>
 8006694:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006698:	462c      	mov	r4, r5
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	2c00      	cmp	r4, #0
 80066a0:	f280 80d4 	bge.w	800684c <__kernel_rem_pio2+0x474>
 80066a4:	462c      	mov	r4, r5
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	f2c0 8102 	blt.w	80068b0 <__kernel_rem_pio2+0x4d8>
 80066ac:	4b18      	ldr	r3, [pc, #96]	; (8006710 <__kernel_rem_pio2+0x338>)
 80066ae:	461e      	mov	r6, r3
 80066b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80066b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80066b6:	1b2b      	subs	r3, r5, r4
 80066b8:	f04f 0900 	mov.w	r9, #0
 80066bc:	f04f 0a00 	mov.w	sl, #0
 80066c0:	2700      	movs	r7, #0
 80066c2:	9306      	str	r3, [sp, #24]
 80066c4:	e0e6      	b.n	8006894 <__kernel_rem_pio2+0x4bc>
 80066c6:	f04f 0b02 	mov.w	fp, #2
 80066ca:	e756      	b.n	800657a <__kernel_rem_pio2+0x1a2>
 80066cc:	f8d8 3000 	ldr.w	r3, [r8]
 80066d0:	bb05      	cbnz	r5, 8006714 <__kernel_rem_pio2+0x33c>
 80066d2:	b123      	cbz	r3, 80066de <__kernel_rem_pio2+0x306>
 80066d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80066d8:	f8c8 3000 	str.w	r3, [r8]
 80066dc:	2301      	movs	r3, #1
 80066de:	3201      	adds	r2, #1
 80066e0:	f108 0804 	add.w	r8, r8, #4
 80066e4:	461d      	mov	r5, r3
 80066e6:	e74f      	b.n	8006588 <__kernel_rem_pio2+0x1b0>
	...
 80066f4:	3ff00000 	.word	0x3ff00000
 80066f8:	08008358 	.word	0x08008358
 80066fc:	40200000 	.word	0x40200000
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	3e700000 	.word	0x3e700000
 8006708:	41700000 	.word	0x41700000
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	08008318 	.word	0x08008318
 8006714:	1acb      	subs	r3, r1, r3
 8006716:	f8c8 3000 	str.w	r3, [r8]
 800671a:	462b      	mov	r3, r5
 800671c:	e7df      	b.n	80066de <__kernel_rem_pio2+0x306>
 800671e:	1e62      	subs	r2, r4, #1
 8006720:	ab0c      	add	r3, sp, #48	; 0x30
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800672a:	a90c      	add	r1, sp, #48	; 0x30
 800672c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006730:	e738      	b.n	80065a4 <__kernel_rem_pio2+0x1cc>
 8006732:	1e62      	subs	r2, r4, #1
 8006734:	ab0c      	add	r3, sp, #48	; 0x30
 8006736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800673e:	e7f4      	b.n	800672a <__kernel_rem_pio2+0x352>
 8006740:	a90c      	add	r1, sp, #48	; 0x30
 8006742:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006746:	3b01      	subs	r3, #1
 8006748:	430a      	orrs	r2, r1
 800674a:	e788      	b.n	800665e <__kernel_rem_pio2+0x286>
 800674c:	3301      	adds	r3, #1
 800674e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006752:	2900      	cmp	r1, #0
 8006754:	d0fa      	beq.n	800674c <__kernel_rem_pio2+0x374>
 8006756:	9a08      	ldr	r2, [sp, #32]
 8006758:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800675c:	446a      	add	r2, sp
 800675e:	3a98      	subs	r2, #152	; 0x98
 8006760:	9208      	str	r2, [sp, #32]
 8006762:	9a06      	ldr	r2, [sp, #24]
 8006764:	a920      	add	r1, sp, #128	; 0x80
 8006766:	18a2      	adds	r2, r4, r2
 8006768:	18e3      	adds	r3, r4, r3
 800676a:	f104 0801 	add.w	r8, r4, #1
 800676e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006772:	9302      	str	r3, [sp, #8]
 8006774:	9b02      	ldr	r3, [sp, #8]
 8006776:	4543      	cmp	r3, r8
 8006778:	da04      	bge.n	8006784 <__kernel_rem_pio2+0x3ac>
 800677a:	461c      	mov	r4, r3
 800677c:	e6a2      	b.n	80064c4 <__kernel_rem_pio2+0xec>
 800677e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006780:	2301      	movs	r3, #1
 8006782:	e7e4      	b.n	800674e <__kernel_rem_pio2+0x376>
 8006784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006786:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800678a:	f7f9 fe83 	bl	8000494 <__aeabi_i2d>
 800678e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	46ab      	mov	fp, r5
 8006796:	461c      	mov	r4, r3
 8006798:	f04f 0900 	mov.w	r9, #0
 800679c:	2600      	movs	r6, #0
 800679e:	2700      	movs	r7, #0
 80067a0:	9b05      	ldr	r3, [sp, #20]
 80067a2:	4599      	cmp	r9, r3
 80067a4:	dd06      	ble.n	80067b4 <__kernel_rem_pio2+0x3dc>
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80067ac:	f108 0801 	add.w	r8, r8, #1
 80067b0:	9308      	str	r3, [sp, #32]
 80067b2:	e7df      	b.n	8006774 <__kernel_rem_pio2+0x39c>
 80067b4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80067b8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80067bc:	f7f9 fed4 	bl	8000568 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4630      	mov	r0, r6
 80067c6:	4639      	mov	r1, r7
 80067c8:	f7f9 fd18 	bl	80001fc <__adddf3>
 80067cc:	f109 0901 	add.w	r9, r9, #1
 80067d0:	4606      	mov	r6, r0
 80067d2:	460f      	mov	r7, r1
 80067d4:	e7e4      	b.n	80067a0 <__kernel_rem_pio2+0x3c8>
 80067d6:	3d01      	subs	r5, #1
 80067d8:	e747      	b.n	800666a <__kernel_rem_pio2+0x292>
 80067da:	ec47 6b10 	vmov	d0, r6, r7
 80067de:	f1ca 0000 	rsb	r0, sl, #0
 80067e2:	f000 fad9 	bl	8006d98 <scalbn>
 80067e6:	ec57 6b10 	vmov	r6, r7, d0
 80067ea:	4ba0      	ldr	r3, [pc, #640]	; (8006a6c <__kernel_rem_pio2+0x694>)
 80067ec:	ee10 0a10 	vmov	r0, s0
 80067f0:	2200      	movs	r2, #0
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f93e 	bl	8000a74 <__aeabi_dcmpge>
 80067f8:	b1f8      	cbz	r0, 800683a <__kernel_rem_pio2+0x462>
 80067fa:	4b9d      	ldr	r3, [pc, #628]	; (8006a70 <__kernel_rem_pio2+0x698>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	4630      	mov	r0, r6
 8006800:	4639      	mov	r1, r7
 8006802:	f7f9 feb1 	bl	8000568 <__aeabi_dmul>
 8006806:	f7fa f949 	bl	8000a9c <__aeabi_d2iz>
 800680a:	4680      	mov	r8, r0
 800680c:	f7f9 fe42 	bl	8000494 <__aeabi_i2d>
 8006810:	4b96      	ldr	r3, [pc, #600]	; (8006a6c <__kernel_rem_pio2+0x694>)
 8006812:	2200      	movs	r2, #0
 8006814:	f7f9 fea8 	bl	8000568 <__aeabi_dmul>
 8006818:	460b      	mov	r3, r1
 800681a:	4602      	mov	r2, r0
 800681c:	4639      	mov	r1, r7
 800681e:	4630      	mov	r0, r6
 8006820:	f7f9 fcea 	bl	80001f8 <__aeabi_dsub>
 8006824:	f7fa f93a 	bl	8000a9c <__aeabi_d2iz>
 8006828:	1c65      	adds	r5, r4, #1
 800682a:	ab0c      	add	r3, sp, #48	; 0x30
 800682c:	f10a 0a18 	add.w	sl, sl, #24
 8006830:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006834:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006838:	e71f      	b.n	800667a <__kernel_rem_pio2+0x2a2>
 800683a:	4630      	mov	r0, r6
 800683c:	4639      	mov	r1, r7
 800683e:	f7fa f92d 	bl	8000a9c <__aeabi_d2iz>
 8006842:	ab0c      	add	r3, sp, #48	; 0x30
 8006844:	4625      	mov	r5, r4
 8006846:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800684a:	e716      	b.n	800667a <__kernel_rem_pio2+0x2a2>
 800684c:	ab0c      	add	r3, sp, #48	; 0x30
 800684e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006852:	f7f9 fe1f 	bl	8000494 <__aeabi_i2d>
 8006856:	4632      	mov	r2, r6
 8006858:	463b      	mov	r3, r7
 800685a:	f7f9 fe85 	bl	8000568 <__aeabi_dmul>
 800685e:	4642      	mov	r2, r8
 8006860:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006864:	464b      	mov	r3, r9
 8006866:	4630      	mov	r0, r6
 8006868:	4639      	mov	r1, r7
 800686a:	f7f9 fe7d 	bl	8000568 <__aeabi_dmul>
 800686e:	3c01      	subs	r4, #1
 8006870:	4606      	mov	r6, r0
 8006872:	460f      	mov	r7, r1
 8006874:	e713      	b.n	800669e <__kernel_rem_pio2+0x2c6>
 8006876:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800687a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800687e:	f7f9 fe73 	bl	8000568 <__aeabi_dmul>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4648      	mov	r0, r9
 8006888:	4651      	mov	r1, sl
 800688a:	f7f9 fcb7 	bl	80001fc <__adddf3>
 800688e:	3701      	adds	r7, #1
 8006890:	4681      	mov	r9, r0
 8006892:	468a      	mov	sl, r1
 8006894:	9b00      	ldr	r3, [sp, #0]
 8006896:	429f      	cmp	r7, r3
 8006898:	dc02      	bgt.n	80068a0 <__kernel_rem_pio2+0x4c8>
 800689a:	9b06      	ldr	r3, [sp, #24]
 800689c:	429f      	cmp	r7, r3
 800689e:	ddea      	ble.n	8006876 <__kernel_rem_pio2+0x49e>
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	ab48      	add	r3, sp, #288	; 0x120
 80068a4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80068a8:	e9c6 9a00 	strd	r9, sl, [r6]
 80068ac:	3c01      	subs	r4, #1
 80068ae:	e6fa      	b.n	80066a6 <__kernel_rem_pio2+0x2ce>
 80068b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	dc0b      	bgt.n	80068ce <__kernel_rem_pio2+0x4f6>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	dc39      	bgt.n	800692e <__kernel_rem_pio2+0x556>
 80068ba:	d05d      	beq.n	8006978 <__kernel_rem_pio2+0x5a0>
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	f003 0007 	and.w	r0, r3, #7
 80068c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80068c6:	ecbd 8b02 	vpop	{d8}
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d1f3      	bne.n	80068bc <__kernel_rem_pio2+0x4e4>
 80068d4:	9b05      	ldr	r3, [sp, #20]
 80068d6:	9500      	str	r5, [sp, #0]
 80068d8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80068dc:	eb0d 0403 	add.w	r4, sp, r3
 80068e0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80068e4:	46a2      	mov	sl, r4
 80068e6:	9b00      	ldr	r3, [sp, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f1aa 0a08 	sub.w	sl, sl, #8
 80068ee:	dc69      	bgt.n	80069c4 <__kernel_rem_pio2+0x5ec>
 80068f0:	46aa      	mov	sl, r5
 80068f2:	f1ba 0f01 	cmp.w	sl, #1
 80068f6:	f1a4 0408 	sub.w	r4, r4, #8
 80068fa:	f300 8083 	bgt.w	8006a04 <__kernel_rem_pio2+0x62c>
 80068fe:	9c05      	ldr	r4, [sp, #20]
 8006900:	ab48      	add	r3, sp, #288	; 0x120
 8006902:	441c      	add	r4, r3
 8006904:	2000      	movs	r0, #0
 8006906:	2100      	movs	r1, #0
 8006908:	2d01      	cmp	r5, #1
 800690a:	f300 809a 	bgt.w	8006a42 <__kernel_rem_pio2+0x66a>
 800690e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006912:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006916:	f1bb 0f00 	cmp.w	fp, #0
 800691a:	f040 8098 	bne.w	8006a4e <__kernel_rem_pio2+0x676>
 800691e:	9b04      	ldr	r3, [sp, #16]
 8006920:	e9c3 7800 	strd	r7, r8, [r3]
 8006924:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006928:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800692c:	e7c6      	b.n	80068bc <__kernel_rem_pio2+0x4e4>
 800692e:	9e05      	ldr	r6, [sp, #20]
 8006930:	ab48      	add	r3, sp, #288	; 0x120
 8006932:	441e      	add	r6, r3
 8006934:	462c      	mov	r4, r5
 8006936:	2000      	movs	r0, #0
 8006938:	2100      	movs	r1, #0
 800693a:	2c00      	cmp	r4, #0
 800693c:	da33      	bge.n	80069a6 <__kernel_rem_pio2+0x5ce>
 800693e:	f1bb 0f00 	cmp.w	fp, #0
 8006942:	d036      	beq.n	80069b2 <__kernel_rem_pio2+0x5da>
 8006944:	4602      	mov	r2, r0
 8006946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800694a:	9c04      	ldr	r4, [sp, #16]
 800694c:	e9c4 2300 	strd	r2, r3, [r4]
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006958:	f7f9 fc4e 	bl	80001f8 <__aeabi_dsub>
 800695c:	ae4a      	add	r6, sp, #296	; 0x128
 800695e:	2401      	movs	r4, #1
 8006960:	42a5      	cmp	r5, r4
 8006962:	da29      	bge.n	80069b8 <__kernel_rem_pio2+0x5e0>
 8006964:	f1bb 0f00 	cmp.w	fp, #0
 8006968:	d002      	beq.n	8006970 <__kernel_rem_pio2+0x598>
 800696a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800696e:	4619      	mov	r1, r3
 8006970:	9b04      	ldr	r3, [sp, #16]
 8006972:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006976:	e7a1      	b.n	80068bc <__kernel_rem_pio2+0x4e4>
 8006978:	9c05      	ldr	r4, [sp, #20]
 800697a:	ab48      	add	r3, sp, #288	; 0x120
 800697c:	441c      	add	r4, r3
 800697e:	2000      	movs	r0, #0
 8006980:	2100      	movs	r1, #0
 8006982:	2d00      	cmp	r5, #0
 8006984:	da09      	bge.n	800699a <__kernel_rem_pio2+0x5c2>
 8006986:	f1bb 0f00 	cmp.w	fp, #0
 800698a:	d002      	beq.n	8006992 <__kernel_rem_pio2+0x5ba>
 800698c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006990:	4619      	mov	r1, r3
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	e9c3 0100 	strd	r0, r1, [r3]
 8006998:	e790      	b.n	80068bc <__kernel_rem_pio2+0x4e4>
 800699a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800699e:	f7f9 fc2d 	bl	80001fc <__adddf3>
 80069a2:	3d01      	subs	r5, #1
 80069a4:	e7ed      	b.n	8006982 <__kernel_rem_pio2+0x5aa>
 80069a6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80069aa:	f7f9 fc27 	bl	80001fc <__adddf3>
 80069ae:	3c01      	subs	r4, #1
 80069b0:	e7c3      	b.n	800693a <__kernel_rem_pio2+0x562>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e7c8      	b.n	800694a <__kernel_rem_pio2+0x572>
 80069b8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80069bc:	f7f9 fc1e 	bl	80001fc <__adddf3>
 80069c0:	3401      	adds	r4, #1
 80069c2:	e7cd      	b.n	8006960 <__kernel_rem_pio2+0x588>
 80069c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80069c8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80069cc:	9b00      	ldr	r3, [sp, #0]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	4632      	mov	r2, r6
 80069d4:	463b      	mov	r3, r7
 80069d6:	4640      	mov	r0, r8
 80069d8:	4649      	mov	r1, r9
 80069da:	f7f9 fc0f 	bl	80001fc <__adddf3>
 80069de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7f9 fc05 	bl	80001f8 <__aeabi_dsub>
 80069ee:	4632      	mov	r2, r6
 80069f0:	463b      	mov	r3, r7
 80069f2:	f7f9 fc03 	bl	80001fc <__adddf3>
 80069f6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80069fa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069fe:	ed8a 7b00 	vstr	d7, [sl]
 8006a02:	e770      	b.n	80068e6 <__kernel_rem_pio2+0x50e>
 8006a04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4632      	mov	r2, r6
 8006a10:	463b      	mov	r3, r7
 8006a12:	4649      	mov	r1, r9
 8006a14:	f7f9 fbf2 	bl	80001fc <__adddf3>
 8006a18:	e9cd 0100 	strd	r0, r1, [sp]
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7f9 fbe8 	bl	80001f8 <__aeabi_dsub>
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	f7f9 fbe6 	bl	80001fc <__adddf3>
 8006a30:	ed9d 7b00 	vldr	d7, [sp]
 8006a34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a38:	ed84 7b00 	vstr	d7, [r4]
 8006a3c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a40:	e757      	b.n	80068f2 <__kernel_rem_pio2+0x51a>
 8006a42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a46:	f7f9 fbd9 	bl	80001fc <__adddf3>
 8006a4a:	3d01      	subs	r5, #1
 8006a4c:	e75c      	b.n	8006908 <__kernel_rem_pio2+0x530>
 8006a4e:	9b04      	ldr	r3, [sp, #16]
 8006a50:	9a04      	ldr	r2, [sp, #16]
 8006a52:	601f      	str	r7, [r3, #0]
 8006a54:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006a58:	605c      	str	r4, [r3, #4]
 8006a5a:	609d      	str	r5, [r3, #8]
 8006a5c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a60:	60d3      	str	r3, [r2, #12]
 8006a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a66:	6110      	str	r0, [r2, #16]
 8006a68:	6153      	str	r3, [r2, #20]
 8006a6a:	e727      	b.n	80068bc <__kernel_rem_pio2+0x4e4>
 8006a6c:	41700000 	.word	0x41700000
 8006a70:	3e700000 	.word	0x3e700000
 8006a74:	00000000 	.word	0x00000000

08006a78 <__kernel_cos>:
 8006a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	ec57 6b10 	vmov	r6, r7, d0
 8006a80:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006a84:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006a88:	ed8d 1b00 	vstr	d1, [sp]
 8006a8c:	da07      	bge.n	8006a9e <__kernel_cos+0x26>
 8006a8e:	ee10 0a10 	vmov	r0, s0
 8006a92:	4639      	mov	r1, r7
 8006a94:	f7fa f802 	bl	8000a9c <__aeabi_d2iz>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f000 8088 	beq.w	8006bae <__kernel_cos+0x136>
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fd5f 	bl	8000568 <__aeabi_dmul>
 8006aaa:	4b51      	ldr	r3, [pc, #324]	; (8006bf0 <__kernel_cos+0x178>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	4604      	mov	r4, r0
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	f7f9 fd59 	bl	8000568 <__aeabi_dmul>
 8006ab6:	a340      	add	r3, pc, #256	; (adr r3, 8006bb8 <__kernel_cos+0x140>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	4682      	mov	sl, r0
 8006abe:	468b      	mov	fp, r1
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	f7f9 fd50 	bl	8000568 <__aeabi_dmul>
 8006ac8:	a33d      	add	r3, pc, #244	; (adr r3, 8006bc0 <__kernel_cos+0x148>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fb95 	bl	80001fc <__adddf3>
 8006ad2:	4622      	mov	r2, r4
 8006ad4:	462b      	mov	r3, r5
 8006ad6:	f7f9 fd47 	bl	8000568 <__aeabi_dmul>
 8006ada:	a33b      	add	r3, pc, #236	; (adr r3, 8006bc8 <__kernel_cos+0x150>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fb8a 	bl	80001f8 <__aeabi_dsub>
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	f7f9 fd3e 	bl	8000568 <__aeabi_dmul>
 8006aec:	a338      	add	r3, pc, #224	; (adr r3, 8006bd0 <__kernel_cos+0x158>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fb83 	bl	80001fc <__adddf3>
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fd35 	bl	8000568 <__aeabi_dmul>
 8006afe:	a336      	add	r3, pc, #216	; (adr r3, 8006bd8 <__kernel_cos+0x160>)
 8006b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b04:	f7f9 fb78 	bl	80001f8 <__aeabi_dsub>
 8006b08:	4622      	mov	r2, r4
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f7f9 fd2c 	bl	8000568 <__aeabi_dmul>
 8006b10:	a333      	add	r3, pc, #204	; (adr r3, 8006be0 <__kernel_cos+0x168>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fb71 	bl	80001fc <__adddf3>
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	462b      	mov	r3, r5
 8006b1e:	f7f9 fd23 	bl	8000568 <__aeabi_dmul>
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	f7f9 fd1f 	bl	8000568 <__aeabi_dmul>
 8006b2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 fd17 	bl	8000568 <__aeabi_dmul>
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4620      	mov	r0, r4
 8006b42:	f7f9 fb59 	bl	80001f8 <__aeabi_dsub>
 8006b46:	4b2b      	ldr	r3, [pc, #172]	; (8006bf4 <__kernel_cos+0x17c>)
 8006b48:	4598      	cmp	r8, r3
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	dc10      	bgt.n	8006b72 <__kernel_cos+0xfa>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4650      	mov	r0, sl
 8006b56:	4659      	mov	r1, fp
 8006b58:	f7f9 fb4e 	bl	80001f8 <__aeabi_dsub>
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4926      	ldr	r1, [pc, #152]	; (8006bf8 <__kernel_cos+0x180>)
 8006b60:	4602      	mov	r2, r0
 8006b62:	2000      	movs	r0, #0
 8006b64:	f7f9 fb48 	bl	80001f8 <__aeabi_dsub>
 8006b68:	ec41 0b10 	vmov	d0, r0, r1
 8006b6c:	b003      	add	sp, #12
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	4b22      	ldr	r3, [pc, #136]	; (8006bfc <__kernel_cos+0x184>)
 8006b74:	4920      	ldr	r1, [pc, #128]	; (8006bf8 <__kernel_cos+0x180>)
 8006b76:	4598      	cmp	r8, r3
 8006b78:	bfcc      	ite	gt
 8006b7a:	4d21      	ldrgt	r5, [pc, #132]	; (8006c00 <__kernel_cos+0x188>)
 8006b7c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006b80:	2400      	movs	r4, #0
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7f9 fb36 	bl	80001f8 <__aeabi_dsub>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	4680      	mov	r8, r0
 8006b90:	4689      	mov	r9, r1
 8006b92:	462b      	mov	r3, r5
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	f7f9 fb2e 	bl	80001f8 <__aeabi_dsub>
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	463b      	mov	r3, r7
 8006ba0:	f7f9 fb2a 	bl	80001f8 <__aeabi_dsub>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4640      	mov	r0, r8
 8006baa:	4649      	mov	r1, r9
 8006bac:	e7da      	b.n	8006b64 <__kernel_cos+0xec>
 8006bae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006be8 <__kernel_cos+0x170>
 8006bb2:	e7db      	b.n	8006b6c <__kernel_cos+0xf4>
 8006bb4:	f3af 8000 	nop.w
 8006bb8:	be8838d4 	.word	0xbe8838d4
 8006bbc:	bda8fae9 	.word	0xbda8fae9
 8006bc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006bc4:	3e21ee9e 	.word	0x3e21ee9e
 8006bc8:	809c52ad 	.word	0x809c52ad
 8006bcc:	3e927e4f 	.word	0x3e927e4f
 8006bd0:	19cb1590 	.word	0x19cb1590
 8006bd4:	3efa01a0 	.word	0x3efa01a0
 8006bd8:	16c15177 	.word	0x16c15177
 8006bdc:	3f56c16c 	.word	0x3f56c16c
 8006be0:	5555554c 	.word	0x5555554c
 8006be4:	3fa55555 	.word	0x3fa55555
 8006be8:	00000000 	.word	0x00000000
 8006bec:	3ff00000 	.word	0x3ff00000
 8006bf0:	3fe00000 	.word	0x3fe00000
 8006bf4:	3fd33332 	.word	0x3fd33332
 8006bf8:	3ff00000 	.word	0x3ff00000
 8006bfc:	3fe90000 	.word	0x3fe90000
 8006c00:	3fd20000 	.word	0x3fd20000
 8006c04:	00000000 	.word	0x00000000

08006c08 <__kernel_sin>:
 8006c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0c:	ed2d 8b04 	vpush	{d8-d9}
 8006c10:	eeb0 8a41 	vmov.f32	s16, s2
 8006c14:	eef0 8a61 	vmov.f32	s17, s3
 8006c18:	ec55 4b10 	vmov	r4, r5, d0
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c22:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006c26:	9001      	str	r0, [sp, #4]
 8006c28:	da06      	bge.n	8006c38 <__kernel_sin+0x30>
 8006c2a:	ee10 0a10 	vmov	r0, s0
 8006c2e:	4629      	mov	r1, r5
 8006c30:	f7f9 ff34 	bl	8000a9c <__aeabi_d2iz>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d051      	beq.n	8006cdc <__kernel_sin+0xd4>
 8006c38:	4622      	mov	r2, r4
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 fc92 	bl	8000568 <__aeabi_dmul>
 8006c44:	4682      	mov	sl, r0
 8006c46:	468b      	mov	fp, r1
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 fc8a 	bl	8000568 <__aeabi_dmul>
 8006c54:	a341      	add	r3, pc, #260	; (adr r3, 8006d5c <__kernel_sin+0x154>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4689      	mov	r9, r1
 8006c5e:	4650      	mov	r0, sl
 8006c60:	4659      	mov	r1, fp
 8006c62:	f7f9 fc81 	bl	8000568 <__aeabi_dmul>
 8006c66:	a33f      	add	r3, pc, #252	; (adr r3, 8006d64 <__kernel_sin+0x15c>)
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fac4 	bl	80001f8 <__aeabi_dsub>
 8006c70:	4652      	mov	r2, sl
 8006c72:	465b      	mov	r3, fp
 8006c74:	f7f9 fc78 	bl	8000568 <__aeabi_dmul>
 8006c78:	a33c      	add	r3, pc, #240	; (adr r3, 8006d6c <__kernel_sin+0x164>)
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f7f9 fabd 	bl	80001fc <__adddf3>
 8006c82:	4652      	mov	r2, sl
 8006c84:	465b      	mov	r3, fp
 8006c86:	f7f9 fc6f 	bl	8000568 <__aeabi_dmul>
 8006c8a:	a33a      	add	r3, pc, #232	; (adr r3, 8006d74 <__kernel_sin+0x16c>)
 8006c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c90:	f7f9 fab2 	bl	80001f8 <__aeabi_dsub>
 8006c94:	4652      	mov	r2, sl
 8006c96:	465b      	mov	r3, fp
 8006c98:	f7f9 fc66 	bl	8000568 <__aeabi_dmul>
 8006c9c:	a337      	add	r3, pc, #220	; (adr r3, 8006d7c <__kernel_sin+0x174>)
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f7f9 faab 	bl	80001fc <__adddf3>
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460f      	mov	r7, r1
 8006cac:	b9eb      	cbnz	r3, 8006cea <__kernel_sin+0xe2>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4650      	mov	r0, sl
 8006cb4:	4659      	mov	r1, fp
 8006cb6:	f7f9 fc57 	bl	8000568 <__aeabi_dmul>
 8006cba:	a325      	add	r3, pc, #148	; (adr r3, 8006d50 <__kernel_sin+0x148>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 fa9a 	bl	80001f8 <__aeabi_dsub>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	f7f9 fc4e 	bl	8000568 <__aeabi_dmul>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7f9 fa92 	bl	80001fc <__adddf3>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	ec45 4b10 	vmov	d0, r4, r5
 8006ce0:	b003      	add	sp, #12
 8006ce2:	ecbd 8b04 	vpop	{d8-d9}
 8006ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <__kernel_sin+0x150>)
 8006cec:	ec51 0b18 	vmov	r0, r1, d8
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f7f9 fc39 	bl	8000568 <__aeabi_dmul>
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	ec41 0b19 	vmov	d9, r0, r1
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4649      	mov	r1, r9
 8006d02:	f7f9 fc31 	bl	8000568 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	ec51 0b19 	vmov	r0, r1, d9
 8006d0e:	f7f9 fa73 	bl	80001f8 <__aeabi_dsub>
 8006d12:	4652      	mov	r2, sl
 8006d14:	465b      	mov	r3, fp
 8006d16:	f7f9 fc27 	bl	8000568 <__aeabi_dmul>
 8006d1a:	ec53 2b18 	vmov	r2, r3, d8
 8006d1e:	f7f9 fa6b 	bl	80001f8 <__aeabi_dsub>
 8006d22:	a30b      	add	r3, pc, #44	; (adr r3, 8006d50 <__kernel_sin+0x148>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	4640      	mov	r0, r8
 8006d2e:	4649      	mov	r1, r9
 8006d30:	f7f9 fc1a 	bl	8000568 <__aeabi_dmul>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 fa5e 	bl	80001fc <__adddf3>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fa56 	bl	80001f8 <__aeabi_dsub>
 8006d4c:	e7c4      	b.n	8006cd8 <__kernel_sin+0xd0>
 8006d4e:	bf00      	nop
 8006d50:	55555549 	.word	0x55555549
 8006d54:	3fc55555 	.word	0x3fc55555
 8006d58:	3fe00000 	.word	0x3fe00000
 8006d5c:	5acfd57c 	.word	0x5acfd57c
 8006d60:	3de5d93a 	.word	0x3de5d93a
 8006d64:	8a2b9ceb 	.word	0x8a2b9ceb
 8006d68:	3e5ae5e6 	.word	0x3e5ae5e6
 8006d6c:	57b1fe7d 	.word	0x57b1fe7d
 8006d70:	3ec71de3 	.word	0x3ec71de3
 8006d74:	19c161d5 	.word	0x19c161d5
 8006d78:	3f2a01a0 	.word	0x3f2a01a0
 8006d7c:	1110f8a6 	.word	0x1110f8a6
 8006d80:	3f811111 	.word	0x3f811111

08006d84 <fabs>:
 8006d84:	ec51 0b10 	vmov	r0, r1, d0
 8006d88:	ee10 2a10 	vmov	r2, s0
 8006d8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d90:	ec43 2b10 	vmov	d0, r2, r3
 8006d94:	4770      	bx	lr
	...

08006d98 <scalbn>:
 8006d98:	b570      	push	{r4, r5, r6, lr}
 8006d9a:	ec55 4b10 	vmov	r4, r5, d0
 8006d9e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006da2:	4606      	mov	r6, r0
 8006da4:	462b      	mov	r3, r5
 8006da6:	b999      	cbnz	r1, 8006dd0 <scalbn+0x38>
 8006da8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006dac:	4323      	orrs	r3, r4
 8006dae:	d03f      	beq.n	8006e30 <scalbn+0x98>
 8006db0:	4b35      	ldr	r3, [pc, #212]	; (8006e88 <scalbn+0xf0>)
 8006db2:	4629      	mov	r1, r5
 8006db4:	ee10 0a10 	vmov	r0, s0
 8006db8:	2200      	movs	r2, #0
 8006dba:	f7f9 fbd5 	bl	8000568 <__aeabi_dmul>
 8006dbe:	4b33      	ldr	r3, [pc, #204]	; (8006e8c <scalbn+0xf4>)
 8006dc0:	429e      	cmp	r6, r3
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	da10      	bge.n	8006dea <scalbn+0x52>
 8006dc8:	a327      	add	r3, pc, #156	; (adr r3, 8006e68 <scalbn+0xd0>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	e01f      	b.n	8006e10 <scalbn+0x78>
 8006dd0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006dd4:	4291      	cmp	r1, r2
 8006dd6:	d10c      	bne.n	8006df2 <scalbn+0x5a>
 8006dd8:	ee10 2a10 	vmov	r2, s0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fa0c 	bl	80001fc <__adddf3>
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	e022      	b.n	8006e30 <scalbn+0x98>
 8006dea:	460b      	mov	r3, r1
 8006dec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006df0:	3936      	subs	r1, #54	; 0x36
 8006df2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006df6:	4296      	cmp	r6, r2
 8006df8:	dd0d      	ble.n	8006e16 <scalbn+0x7e>
 8006dfa:	2d00      	cmp	r5, #0
 8006dfc:	a11c      	add	r1, pc, #112	; (adr r1, 8006e70 <scalbn+0xd8>)
 8006dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e02:	da02      	bge.n	8006e0a <scalbn+0x72>
 8006e04:	a11c      	add	r1, pc, #112	; (adr r1, 8006e78 <scalbn+0xe0>)
 8006e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e0a:	a319      	add	r3, pc, #100	; (adr r3, 8006e70 <scalbn+0xd8>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fbaa 	bl	8000568 <__aeabi_dmul>
 8006e14:	e7e6      	b.n	8006de4 <scalbn+0x4c>
 8006e16:	1872      	adds	r2, r6, r1
 8006e18:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006e1c:	428a      	cmp	r2, r1
 8006e1e:	dcec      	bgt.n	8006dfa <scalbn+0x62>
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	dd08      	ble.n	8006e36 <scalbn+0x9e>
 8006e24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006e30:	ec45 4b10 	vmov	d0, r4, r5
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
 8006e36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006e3a:	da08      	bge.n	8006e4e <scalbn+0xb6>
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	a10a      	add	r1, pc, #40	; (adr r1, 8006e68 <scalbn+0xd0>)
 8006e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e44:	dac0      	bge.n	8006dc8 <scalbn+0x30>
 8006e46:	a10e      	add	r1, pc, #56	; (adr r1, 8006e80 <scalbn+0xe8>)
 8006e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e4c:	e7bc      	b.n	8006dc8 <scalbn+0x30>
 8006e4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e52:	3236      	adds	r2, #54	; 0x36
 8006e54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <scalbn+0xf8>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	e7d5      	b.n	8006e10 <scalbn+0x78>
 8006e64:	f3af 8000 	nop.w
 8006e68:	c2f8f359 	.word	0xc2f8f359
 8006e6c:	01a56e1f 	.word	0x01a56e1f
 8006e70:	8800759c 	.word	0x8800759c
 8006e74:	7e37e43c 	.word	0x7e37e43c
 8006e78:	8800759c 	.word	0x8800759c
 8006e7c:	fe37e43c 	.word	0xfe37e43c
 8006e80:	c2f8f359 	.word	0xc2f8f359
 8006e84:	81a56e1f 	.word	0x81a56e1f
 8006e88:	43500000 	.word	0x43500000
 8006e8c:	ffff3cb0 	.word	0xffff3cb0
 8006e90:	3c900000 	.word	0x3c900000
 8006e94:	00000000 	.word	0x00000000

08006e98 <floor>:
 8006e98:	ec51 0b10 	vmov	r0, r1, d0
 8006e9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006ea8:	2e13      	cmp	r6, #19
 8006eaa:	ee10 5a10 	vmov	r5, s0
 8006eae:	ee10 8a10 	vmov	r8, s0
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	dc31      	bgt.n	8006f1a <floor+0x82>
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	da14      	bge.n	8006ee4 <floor+0x4c>
 8006eba:	a333      	add	r3, pc, #204	; (adr r3, 8006f88 <floor+0xf0>)
 8006ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec0:	f7f9 f99c 	bl	80001fc <__adddf3>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f7f9 fdde 	bl	8000a88 <__aeabi_dcmpgt>
 8006ecc:	b138      	cbz	r0, 8006ede <floor+0x46>
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	da53      	bge.n	8006f7a <floor+0xe2>
 8006ed2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006ed6:	4325      	orrs	r5, r4
 8006ed8:	d052      	beq.n	8006f80 <floor+0xe8>
 8006eda:	4c2d      	ldr	r4, [pc, #180]	; (8006f90 <floor+0xf8>)
 8006edc:	2500      	movs	r5, #0
 8006ede:	4621      	mov	r1, r4
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	e024      	b.n	8006f2e <floor+0x96>
 8006ee4:	4f2b      	ldr	r7, [pc, #172]	; (8006f94 <floor+0xfc>)
 8006ee6:	4137      	asrs	r7, r6
 8006ee8:	ea01 0307 	and.w	r3, r1, r7
 8006eec:	4303      	orrs	r3, r0
 8006eee:	d01e      	beq.n	8006f2e <floor+0x96>
 8006ef0:	a325      	add	r3, pc, #148	; (adr r3, 8006f88 <floor+0xf0>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 f981 	bl	80001fc <__adddf3>
 8006efa:	2200      	movs	r2, #0
 8006efc:	2300      	movs	r3, #0
 8006efe:	f7f9 fdc3 	bl	8000a88 <__aeabi_dcmpgt>
 8006f02:	2800      	cmp	r0, #0
 8006f04:	d0eb      	beq.n	8006ede <floor+0x46>
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	bfbe      	ittt	lt
 8006f0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006f0e:	4133      	asrlt	r3, r6
 8006f10:	18e4      	addlt	r4, r4, r3
 8006f12:	ea24 0407 	bic.w	r4, r4, r7
 8006f16:	2500      	movs	r5, #0
 8006f18:	e7e1      	b.n	8006ede <floor+0x46>
 8006f1a:	2e33      	cmp	r6, #51	; 0x33
 8006f1c:	dd0b      	ble.n	8006f36 <floor+0x9e>
 8006f1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f22:	d104      	bne.n	8006f2e <floor+0x96>
 8006f24:	ee10 2a10 	vmov	r2, s0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	f7f9 f967 	bl	80001fc <__adddf3>
 8006f2e:	ec41 0b10 	vmov	d0, r0, r1
 8006f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f36:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006f3a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f3e:	40df      	lsrs	r7, r3
 8006f40:	4238      	tst	r0, r7
 8006f42:	d0f4      	beq.n	8006f2e <floor+0x96>
 8006f44:	a310      	add	r3, pc, #64	; (adr r3, 8006f88 <floor+0xf0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f957 	bl	80001fc <__adddf3>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2300      	movs	r3, #0
 8006f52:	f7f9 fd99 	bl	8000a88 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d0c1      	beq.n	8006ede <floor+0x46>
 8006f5a:	2c00      	cmp	r4, #0
 8006f5c:	da0a      	bge.n	8006f74 <floor+0xdc>
 8006f5e:	2e14      	cmp	r6, #20
 8006f60:	d101      	bne.n	8006f66 <floor+0xce>
 8006f62:	3401      	adds	r4, #1
 8006f64:	e006      	b.n	8006f74 <floor+0xdc>
 8006f66:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	40b3      	lsls	r3, r6
 8006f6e:	441d      	add	r5, r3
 8006f70:	45a8      	cmp	r8, r5
 8006f72:	d8f6      	bhi.n	8006f62 <floor+0xca>
 8006f74:	ea25 0507 	bic.w	r5, r5, r7
 8006f78:	e7b1      	b.n	8006ede <floor+0x46>
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	462c      	mov	r4, r5
 8006f7e:	e7ae      	b.n	8006ede <floor+0x46>
 8006f80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006f84:	e7ab      	b.n	8006ede <floor+0x46>
 8006f86:	bf00      	nop
 8006f88:	8800759c 	.word	0x8800759c
 8006f8c:	7e37e43c 	.word	0x7e37e43c
 8006f90:	bff00000 	.word	0xbff00000
 8006f94:	000fffff 	.word	0x000fffff

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
